
Sub_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009350  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  08009530  08009530  00019530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800985c  0800985c  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800985c  0800985c  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800985c  0800985c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800985c  0800985c  0001985c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009864  08009864  00019864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002108  20000088  080098f0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002190  080098f0  00022190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002739f  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004864  00000000  00000000  00047457  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ce0  00000000  00000000  0004bcc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00008a2c  00000000  00000000  0004d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00018fc9  00000000  00000000  000563cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d651c  00000000  00000000  0006f395  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  001458b1  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001ae8  00000000  00000000  00145930  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00007e50  00000000  00000000  00147418  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000088 	.word	0x20000088
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009518 	.word	0x08009518

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000008c 	.word	0x2000008c
 800021c:	08009518 	.word	0x08009518

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <SERVO_RawMove>:
	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
}

/* Moves A Specific Motor With A Raw Pulse Width Value */
void SERVO_RawMove(uint16_t au16_SERVO_Instance, uint16_t au16_Pulse)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	460a      	mov	r2, r1
 8000a76:	80fb      	strh	r3, [r7, #6]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	80bb      	strh	r3, [r7, #4]
	if(au16_Pulse <= gs_SERVO_info[au16_SERVO_Instance].Period_Max && au16_Pulse >= gs_SERVO_info[au16_SERVO_Instance].Period_Min)
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <SERVO_RawMove+0x4c>)
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	885b      	ldrh	r3, [r3, #2]
 8000a86:	88ba      	ldrh	r2, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d80e      	bhi.n	8000aaa <SERVO_RawMove+0x3e>
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <SERVO_RawMove+0x4c>)
 8000a90:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000a94:	88ba      	ldrh	r2, [r7, #4]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d307      	bcc.n	8000aaa <SERVO_RawMove+0x3e>
	{
		*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	4a07      	ldr	r2, [pc, #28]	; (8000abc <SERVO_RawMove+0x50>)
 8000a9e:	015b      	lsls	r3, r3, #5
 8000aa0:	4413      	add	r3, r2
 8000aa2:	330c      	adds	r3, #12
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	88ba      	ldrh	r2, [r7, #4]
 8000aa8:	601a      	str	r2, [r3, #0]
	}
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	200000a4 	.word	0x200000a4
 8000abc:	080096e8 	.word	0x080096e8

08000ac0 <autonomous_Mode>:
#include "functions.h"

void autonomous_Mode(uint16_t thrusterRight, uint16_t thrusterLeft, int powerR, int powerL) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60ba      	str	r2, [r7, #8]
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4603      	mov	r3, r0
 8000acc:	81fb      	strh	r3, [r7, #14]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	81bb      	strh	r3, [r7, #12]
    SERVO_RawMove(thrusterRight,powerR);
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	89fb      	ldrh	r3, [r7, #14]
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ffc6 	bl	8000a6c <SERVO_RawMove>
    SERVO_RawMove(thrusterLeft,powerL);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	89bb      	ldrh	r3, [r7, #12]
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ffbf 	bl	8000a6c <SERVO_RawMove>
}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max){
 8000af6:	b480      	push	{r7}
 8000af8:	b087      	sub	sp, #28
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	ed87 0a05 	vstr	s0, [r7, #20]
 8000b00:	edc7 0a04 	vstr	s1, [r7, #16]
 8000b04:	ed87 1a03 	vstr	s2, [r7, #12]
 8000b08:	edc7 1a02 	vstr	s3, [r7, #8]
 8000b0c:	ed87 2a01 	vstr	s4, [r7, #4]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000b10:	ed97 7a05 	vldr	s14, [r7, #20]
 8000b14:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b1c:	edd7 6a01 	vldr	s13, [r7, #4]
 8000b20:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b24:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000b28:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000b2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b30:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000b3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b40:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000b44:	eeb0 0a67 	vmov.f32	s0, s15
 8000b48:	371c      	adds	r7, #28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <RGB_color>:

void RGB_color(bool red_light_value, bool green_light_value, bool blue_light_value){
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	71fb      	strb	r3, [r7, #7]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	71bb      	strb	r3, [r7, #6]
 8000b60:	4613      	mov	r3, r2
 8000b62:	717b      	strb	r3, [r7, #5]
    HAL_GPIO_WritePin(GPIOA, red_light_pin, red_light_value ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b64:	230e      	movs	r3, #14
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	79fa      	ldrb	r2, [r7, #7]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b70:	f003 f810 	bl	8003b94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, green_light_pin, green_light_value ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b74:	230d      	movs	r3, #13
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	79ba      	ldrb	r2, [r7, #6]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b80:	f003 f808 	bl	8003b94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, blue_light_pin, blue_light_value ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b84:	230c      	movs	r3, #12
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	797a      	ldrb	r2, [r7, #5]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b90:	f003 f800 	bl	8003b94 <HAL_GPIO_WritePin>
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	0000      	movs	r0, r0
	...

08000ba0 <power_Difference>:

void power_Difference(float channel4, float channel2, float channel5,
                      uint16_t thrusterRight, uint16_t thrusterLeft){
 8000ba0:	b5b0      	push	{r4, r5, r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000baa:	edc7 0a02 	vstr	s1, [r7, #8]
 8000bae:	ed87 1a01 	vstr	s2, [r7, #4]
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	460a      	mov	r2, r1
 8000bb6:	807b      	strh	r3, [r7, #2]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	803b      	strh	r3, [r7, #0]
    float Tx;
    float Tz;
    float Tport;
    float Tstbd;

    if ((channel4 > 1450 && channel4 < 1550) && (channel2 > 1450 && channel2 < 1550)){     //Control stable
 8000bbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bc0:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8000e38 <power_Difference+0x298>
 8000bc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bcc:	dd37      	ble.n	8000c3e <power_Difference+0x9e>
 8000bce:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bd2:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8000e3c <power_Difference+0x29c>
 8000bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bde:	d52e      	bpl.n	8000c3e <power_Difference+0x9e>
 8000be0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000be4:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8000e38 <power_Difference+0x298>
 8000be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf0:	dd25      	ble.n	8000c3e <power_Difference+0x9e>
 8000bf2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bf6:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8000e3c <power_Difference+0x29c>
 8000bfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c02:	d51c      	bpl.n	8000c3e <power_Difference+0x9e>
        R=1500;
 8000c04:	4b8e      	ldr	r3, [pc, #568]	; (8000e40 <power_Difference+0x2a0>)
 8000c06:	61fb      	str	r3, [r7, #28]
        L=1500;
 8000c08:	4b8d      	ldr	r3, [pc, #564]	; (8000e40 <power_Difference+0x2a0>)
 8000c0a:	61bb      	str	r3, [r7, #24]
        SERVO_RawMove(thrusterRight,R);
 8000c0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c14:	ee17 3a90 	vmov	r3, s15
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	887b      	ldrh	r3, [r7, #2]
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff24 	bl	8000a6c <SERVO_RawMove>
        SERVO_RawMove(thrusterLeft,L);      //thrusters at zero
 8000c24:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c2c:	ee17 3a90 	vmov	r3, s15
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	883b      	ldrh	r3, [r7, #0]
 8000c34:	4611      	mov	r1, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff18 	bl	8000a6c <SERVO_RawMove>
        R = ((Tstbd / 35 * 400)+1500);
        L = ((Tport / 35 * 400)+1500);
        SERVO_RawMove(thrusterRight,R);
        SERVO_RawMove(thrusterLeft,L);
    }
}
 8000c3c:	e0ea      	b.n	8000e14 <power_Difference+0x274>
    else if ((channel4 < 1450 || channel4 > 1550) || (channel2 < 1450 || channel2 > 1550)) {    //Control for moving
 8000c3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c42:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8000e38 <power_Difference+0x298>
 8000c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4e:	d41b      	bmi.n	8000c88 <power_Difference+0xe8>
 8000c50:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c54:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8000e3c <power_Difference+0x29c>
 8000c58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c60:	dc12      	bgt.n	8000c88 <power_Difference+0xe8>
 8000c62:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c66:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8000e38 <power_Difference+0x298>
 8000c6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c72:	d409      	bmi.n	8000c88 <power_Difference+0xe8>
 8000c74:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c78:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8000e3c <power_Difference+0x29c>
 8000c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c84:	dc00      	bgt.n	8000c88 <power_Difference+0xe8>
}
 8000c86:	e0c5      	b.n	8000e14 <power_Difference+0x274>
        Tx = map(channel2, 975, 2025, -70, 70);
 8000c88:	ed9f 2a6e 	vldr	s4, [pc, #440]	; 8000e44 <power_Difference+0x2a4>
 8000c8c:	eddf 1a6e 	vldr	s3, [pc, #440]	; 8000e48 <power_Difference+0x2a8>
 8000c90:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 8000e4c <power_Difference+0x2ac>
 8000c94:	eddf 0a6e 	vldr	s1, [pc, #440]	; 8000e50 <power_Difference+0x2b0>
 8000c98:	ed97 0a02 	vldr	s0, [r7, #8]
 8000c9c:	f7ff ff2b 	bl	8000af6 <map>
 8000ca0:	ed87 0a05 	vstr	s0, [r7, #20]
        Tz = map(channel4, 975, 2025, -5, 5);
 8000ca4:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 8000ca8:	eef9 1a04 	vmov.f32	s3, #148	; 0xc0a00000 -5.0
 8000cac:	ed9f 1a67 	vldr	s2, [pc, #412]	; 8000e4c <power_Difference+0x2ac>
 8000cb0:	eddf 0a67 	vldr	s1, [pc, #412]	; 8000e50 <power_Difference+0x2b0>
 8000cb4:	ed97 0a03 	vldr	s0, [r7, #12]
 8000cb8:	f7ff ff1d 	bl	8000af6 <map>
 8000cbc:	ed87 0a04 	vstr	s0, [r7, #16]
        Tstbd = (Tx / 2) - (Tz / 0.41);
 8000cc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cc4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000cc8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ccc:	ee16 0a90 	vmov	r0, s13
 8000cd0:	f7ff fc12 	bl	80004f8 <__aeabi_f2d>
 8000cd4:	4604      	mov	r4, r0
 8000cd6:	460d      	mov	r5, r1
 8000cd8:	6938      	ldr	r0, [r7, #16]
 8000cda:	f7ff fc0d 	bl	80004f8 <__aeabi_f2d>
 8000cde:	a350      	add	r3, pc, #320	; (adr r3, 8000e20 <power_Difference+0x280>)
 8000ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce4:	f7ff fd8a 	bl	80007fc <__aeabi_ddiv>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4620      	mov	r0, r4
 8000cee:	4629      	mov	r1, r5
 8000cf0:	f7ff faa2 	bl	8000238 <__aeabi_dsub>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	460c      	mov	r4, r1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	4621      	mov	r1, r4
 8000cfc:	f7ff fe66 	bl	80009cc <__aeabi_d2f>
 8000d00:	4603      	mov	r3, r0
 8000d02:	623b      	str	r3, [r7, #32]
        if (Tstbd > 35){
 8000d04:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d08:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8000e54 <power_Difference+0x2b4>
 8000d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d14:	dd02      	ble.n	8000d1c <power_Difference+0x17c>
            Tstbd = 35;
 8000d16:	4b50      	ldr	r3, [pc, #320]	; (8000e58 <power_Difference+0x2b8>)
 8000d18:	623b      	str	r3, [r7, #32]
 8000d1a:	e00a      	b.n	8000d32 <power_Difference+0x192>
        else if (Tstbd < -35){
 8000d1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d20:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8000e5c <power_Difference+0x2bc>
 8000d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2c:	d501      	bpl.n	8000d32 <power_Difference+0x192>
            Tstbd = -35;
 8000d2e:	4b4c      	ldr	r3, [pc, #304]	; (8000e60 <power_Difference+0x2c0>)
 8000d30:	623b      	str	r3, [r7, #32]
        Tport = (Tx / (2 * 1.27)) + (Tz / (0.41 * 1.27));
 8000d32:	6978      	ldr	r0, [r7, #20]
 8000d34:	f7ff fbe0 	bl	80004f8 <__aeabi_f2d>
 8000d38:	a33b      	add	r3, pc, #236	; (adr r3, 8000e28 <power_Difference+0x288>)
 8000d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3e:	f7ff fd5d 	bl	80007fc <__aeabi_ddiv>
 8000d42:	4603      	mov	r3, r0
 8000d44:	460c      	mov	r4, r1
 8000d46:	4625      	mov	r5, r4
 8000d48:	461c      	mov	r4, r3
 8000d4a:	6938      	ldr	r0, [r7, #16]
 8000d4c:	f7ff fbd4 	bl	80004f8 <__aeabi_f2d>
 8000d50:	a337      	add	r3, pc, #220	; (adr r3, 8000e30 <power_Difference+0x290>)
 8000d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d56:	f7ff fd51 	bl	80007fc <__aeabi_ddiv>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	4620      	mov	r0, r4
 8000d60:	4629      	mov	r1, r5
 8000d62:	f7ff fa6b 	bl	800023c <__adddf3>
 8000d66:	4603      	mov	r3, r0
 8000d68:	460c      	mov	r4, r1
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	4621      	mov	r1, r4
 8000d6e:	f7ff fe2d 	bl	80009cc <__aeabi_d2f>
 8000d72:	4603      	mov	r3, r0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
        if (Tport > 27){
 8000d76:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d7a:	eeb3 7a0b 	vmov.f32	s14, #59	; 0x41d80000  27.0
 8000d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d86:	dd02      	ble.n	8000d8e <power_Difference+0x1ee>
            Tport = 27;
 8000d88:	4b36      	ldr	r3, [pc, #216]	; (8000e64 <power_Difference+0x2c4>)
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d8c:	e00a      	b.n	8000da4 <power_Difference+0x204>
        else if (Tstbd < -27){
 8000d8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d92:	eebb 7a0b 	vmov.f32	s14, #187	; 0xc1d80000 -27.0
 8000d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9e:	d501      	bpl.n	8000da4 <power_Difference+0x204>
            Tstbd = -27;
 8000da0:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <power_Difference+0x2c8>)
 8000da2:	623b      	str	r3, [r7, #32]
        R = ((Tstbd / 35 * 400)+1500);
 8000da4:	ed97 7a08 	vldr	s14, [r7, #32]
 8000da8:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000e54 <power_Difference+0x2b4>
 8000dac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000db0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000e6c <power_Difference+0x2cc>
 8000db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000db8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000e70 <power_Difference+0x2d0>
 8000dbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000dc0:	edc7 7a07 	vstr	s15, [r7, #28]
        L = ((Tport / 35 * 400)+1500);
 8000dc4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000dc8:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000e54 <power_Difference+0x2b4>
 8000dcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dd0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000e6c <power_Difference+0x2cc>
 8000dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dd8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000e70 <power_Difference+0x2d0>
 8000ddc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000de0:	edc7 7a06 	vstr	s15, [r7, #24]
        SERVO_RawMove(thrusterRight,R);
 8000de4:	edd7 7a07 	vldr	s15, [r7, #28]
 8000de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dec:	ee17 3a90 	vmov	r3, s15
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	887b      	ldrh	r3, [r7, #2]
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fe38 	bl	8000a6c <SERVO_RawMove>
        SERVO_RawMove(thrusterLeft,L);
 8000dfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e04:	ee17 3a90 	vmov	r3, s15
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	883b      	ldrh	r3, [r7, #0]
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fe2c 	bl	8000a6c <SERVO_RawMove>
}
 8000e14:	bf00      	nop
 8000e16:	3728      	adds	r7, #40	; 0x28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e1c:	f3af 8000 	nop.w
 8000e20:	a3d70a3d 	.word	0xa3d70a3d
 8000e24:	3fda3d70 	.word	0x3fda3d70
 8000e28:	851eb852 	.word	0x851eb852
 8000e2c:	400451eb 	.word	0x400451eb
 8000e30:	0be0ded2 	.word	0x0be0ded2
 8000e34:	3fe0a993 	.word	0x3fe0a993
 8000e38:	44b54000 	.word	0x44b54000
 8000e3c:	44c1c000 	.word	0x44c1c000
 8000e40:	44bb8000 	.word	0x44bb8000
 8000e44:	428c0000 	.word	0x428c0000
 8000e48:	c28c0000 	.word	0xc28c0000
 8000e4c:	44fd2000 	.word	0x44fd2000
 8000e50:	4473c000 	.word	0x4473c000
 8000e54:	420c0000 	.word	0x420c0000
 8000e58:	420c0000 	.word	0x420c0000
 8000e5c:	c20c0000 	.word	0xc20c0000
 8000e60:	c20c0000 	.word	0xc20c0000
 8000e64:	41d80000 	.word	0x41d80000
 8000e68:	c1d80000 	.word	0xc1d80000
 8000e6c:	43c80000 	.word	0x43c80000
 8000e70:	44bb8000 	.word	0x44bb8000

08000e74 <select>:

void select(float channel4, float channel2, float channel5,
            uint16_t thrusterRight, uint16_t thrusterLeft,
            int powerR, int powerL) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	ed87 0a05 	vstr	s0, [r7, #20]
 8000e7e:	edc7 0a04 	vstr	s1, [r7, #16]
 8000e82:	ed87 1a03 	vstr	s2, [r7, #12]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	817b      	strh	r3, [r7, #10]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	813b      	strh	r3, [r7, #8]
    //Use channel 5 to select current mode
    if (channel5 < 1300) {
 8000e92:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e96:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000f20 <select+0xac>
 8000e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea2:	d511      	bpl.n	8000ec8 <select+0x54>
        power_Difference(channel4, channel2, channel5, thrusterRight, thrusterLeft);
 8000ea4:	893a      	ldrh	r2, [r7, #8]
 8000ea6:	897b      	ldrh	r3, [r7, #10]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	ed97 1a03 	vldr	s2, [r7, #12]
 8000eb0:	edd7 0a04 	vldr	s1, [r7, #16]
 8000eb4:	ed97 0a05 	vldr	s0, [r7, #20]
 8000eb8:	f7ff fe72 	bl	8000ba0 <power_Difference>
        RGB_color(true, true, false); // Yellow
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f7ff fe46 	bl	8000b52 <RGB_color>
    else {
        SERVO_RawMove(thrusterRight,powerR);
        SERVO_RawMove(thrusterLeft,powerL);
        RGB_color(true, false, false); // Red
    }
}
 8000ec6:	e027      	b.n	8000f18 <select+0xa4>
    else if ( channel5 > 1600) {
 8000ec8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ecc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000f24 <select+0xb0>
 8000ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed8:	dd0b      	ble.n	8000ef2 <select+0x7e>
        autonomous_Mode(thrusterRight,thrusterLeft,powerR,powerL);
 8000eda:	8939      	ldrh	r1, [r7, #8]
 8000edc:	8978      	ldrh	r0, [r7, #10]
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	f7ff fded 	bl	8000ac0 <autonomous_Mode>
        RGB_color(false, false, true); // Blue
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff fe31 	bl	8000b52 <RGB_color>
}
 8000ef0:	e012      	b.n	8000f18 <select+0xa4>
        SERVO_RawMove(thrusterRight,powerR);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	897b      	ldrh	r3, [r7, #10]
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fdb6 	bl	8000a6c <SERVO_RawMove>
        SERVO_RawMove(thrusterLeft,powerL);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	893b      	ldrh	r3, [r7, #8]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fdaf 	bl	8000a6c <SERVO_RawMove>
        RGB_color(true, false, false); // Red
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	2001      	movs	r0, #1
 8000f14:	f7ff fe1d 	bl	8000b52 <RGB_color>
}
 8000f18:	bf00      	nop
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	44a28000 	.word	0x44a28000
 8000f24:	44c80000 	.word	0x44c80000

08000f28 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <MX_GPIO_Init+0x7c>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	4a18      	ldr	r2, [pc, #96]	; (8000fa4 <MX_GPIO_Init+0x7c>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <MX_GPIO_Init+0x7c>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_GPIO_Init+0x7c>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <MX_GPIO_Init+0x7c>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <MX_GPIO_Init+0x7c>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red_light_pin_Pin|green_light_pin_Pin|blue_light_pin_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8000f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f78:	f002 fe0c 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = red_light_pin_Pin|green_light_pin_Pin|blue_light_pin_Pin;
 8000f7c:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000f80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	4619      	mov	r1, r3
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f98:	f002 fc7a 	bl	8003890 <HAL_GPIO_Init>

}
 8000f9c:	bf00      	nop
 8000f9e:	3720      	adds	r7, #32
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	; (800101c <MX_I2C1_Init+0x74>)
 8000fae:	4a1c      	ldr	r2, [pc, #112]	; (8001020 <MX_I2C1_Init+0x78>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20C0EDFF;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	; (800101c <MX_I2C1_Init+0x74>)
 8000fb4:	4a1b      	ldr	r2, [pc, #108]	; (8001024 <MX_I2C1_Init+0x7c>)
 8000fb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	; (800101c <MX_I2C1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <MX_I2C1_Init+0x74>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <MX_I2C1_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_I2C1_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <MX_I2C1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_I2C1_Init+0x74>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_I2C1_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fe2:	480e      	ldr	r0, [pc, #56]	; (800101c <MX_I2C1_Init+0x74>)
 8000fe4:	f002 fdee 	bl	8003bc4 <HAL_I2C_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fee:	f001 f929 	bl	8002244 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4809      	ldr	r0, [pc, #36]	; (800101c <MX_I2C1_Init+0x74>)
 8000ff6:	f002 fe74 	bl	8003ce2 <HAL_I2CEx_ConfigAnalogFilter>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001000:	f001 f920 	bl	8002244 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001004:	2100      	movs	r1, #0
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_I2C1_Init+0x74>)
 8001008:	f002 feb6 	bl	8003d78 <HAL_I2CEx_ConfigDigitalFilter>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001012:	f001 f917 	bl	8002244 <Error_Handler>
  }

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200006a4 	.word	0x200006a4
 8001020:	40005400 	.word	0x40005400
 8001024:	20c0edff 	.word	0x20c0edff

08001028 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <HAL_I2C_MspInit+0x80>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d129      	bne.n	800109e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <HAL_I2C_MspInit+0x84>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4a17      	ldr	r2, [pc, #92]	; (80010ac <HAL_I2C_MspInit+0x84>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_I2C_MspInit+0x84>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA13     ------> I2C1_SCL
    PA14     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001062:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001068:	2312      	movs	r3, #18
 800106a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800106c:	2301      	movs	r3, #1
 800106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001074:	2304      	movs	r3, #4
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001082:	f002 fc05 	bl	8003890 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_I2C_MspInit+0x84>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <HAL_I2C_MspInit+0x84>)
 800108c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001090:	6593      	str	r3, [r2, #88]	; 0x58
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_I2C_MspInit+0x84>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800109e:	bf00      	nop
 80010a0:	3728      	adds	r7, #40	; 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40005400 	.word	0x40005400
 80010ac:	40021000 	.word	0x40021000

080010b0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	4a04      	ldr	r2, [pc, #16]	; (80010cc <_ZN3ros3MsgC1Ev+0x1c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	08009834 	.word	0x08009834

080010d0 <_ZN8std_msgs6UInt16C1Ev>:
  {
    public:
      typedef uint16_t _data_type;
      _data_type data;

    UInt16():
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
      data(0)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ffe8 	bl	80010b0 <_ZN3ros3MsgC1Ev>
 80010e0:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <_ZN8std_msgs6UInt16C1Ev+0x28>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	809a      	strh	r2, [r3, #4]
    {
    }
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	0800981c 	.word	0x0800981c

080010fc <_ZNK8std_msgs6UInt169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	8899      	ldrh	r1, [r3, #4]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	4413      	add	r3, r2
 8001114:	b2ca      	uxtb	r2, r1
 8001116:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	889b      	ldrh	r3, [r3, #4]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	b299      	uxth	r1, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3301      	adds	r3, #1
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	4413      	add	r3, r2
 8001128:	b2ca      	uxtb	r2, r1
 800112a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3302      	adds	r3, #2
 8001130:	60fb      	str	r3, [r7, #12]
      return offset;
 8001132:	68fb      	ldr	r3, [r7, #12]
    }
 8001134:	4618      	mov	r0, r3
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <_ZN8std_msgs6UInt1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint16_t) (*(inbuffer + offset)));
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	4413      	add	r3, r2
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b29a      	uxth	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	809a      	strh	r2, [r3, #4]
      this->data |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	889b      	ldrh	r3, [r3, #4]
 8001160:	b21a      	sxth	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	3301      	adds	r3, #1
 8001166:	6839      	ldr	r1, [r7, #0]
 8001168:	440b      	add	r3, r1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21b      	sxth	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b21b      	sxth	r3, r3
 8001174:	b29a      	uxth	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	3302      	adds	r3, #2
 800117e:	60fb      	str	r3, [r7, #12]
     return offset;
 8001180:	68fb      	ldr	r3, [r7, #12]
    }
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <_ZN8std_msgs6UInt167getTypeEv>:

    const char * getType(){ return "std_msgs/UInt16"; };
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <_ZN8std_msgs6UInt167getTypeEv+0x18>)
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	08009530 	.word	0x08009530

080011ac <_ZN8std_msgs6UInt166getMD5Ev>:
    const char * getMD5(){ return "1df79edf208b629fe6b81923a544552d"; };
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <_ZN8std_msgs6UInt166getMD5Ev+0x18>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	08009540 	.word	0x08009540

080011c8 <_ZN8std_msgs5UInt8C1Ev>:
  {
    public:
      typedef uint8_t _data_type;
      _data_type data;

    UInt8():
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
      data(0)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff6c 	bl	80010b0 <_ZN3ros3MsgC1Ev>
 80011d8:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <_ZN8std_msgs5UInt8C1Ev+0x28>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	711a      	strb	r2, [r3, #4]
    {
    }
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	08009804 	.word	0x08009804

080011f4 <_ZNK8std_msgs5UInt89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	4413      	add	r3, r2
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	7912      	ldrb	r2, [r2, #4]
 800120c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	3301      	adds	r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
      return offset;
 8001214:	68fb      	ldr	r3, [r7, #12]
    }
 8001216:	4618      	mov	r0, r3
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001222:	b480      	push	{r7}
 8001224:	b085      	sub	sp, #20
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	4413      	add	r3, r2
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	3301      	adds	r3, #1
 8001240:	60fb      	str	r3, [r7, #12]
     return offset;
 8001242:	68fb      	ldr	r3, [r7, #12]
    }
 8001244:	4618      	mov	r0, r3
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_ZN8std_msgs5UInt87getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8"; };
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <_ZN8std_msgs5UInt87getTypeEv+0x18>)
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	08009564 	.word	0x08009564

0800126c <_ZN8std_msgs5UInt86getMD5Ev>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <_ZN8std_msgs5UInt86getMD5Ev+0x18>)
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	08009574 	.word	0x08009574

08001288 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
      data()
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fefa 	bl	80010b0 <_ZN3ros3MsgC1Ev>
 80012bc:	4a06      	ldr	r2, [pc, #24]	; (80012d8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3304      	adds	r3, #4
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ffde 	bl	8001288 <_ZN3ros4TimeC1Ev>
    {
    }
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	080097ec 	.word	0x080097ec

080012dc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6859      	ldr	r1, [r3, #4]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	b2ca      	uxtb	r2, r1
 80012f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	0a19      	lsrs	r1, r3, #8
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	3301      	adds	r3, #1
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	4413      	add	r3, r2
 8001306:	b2ca      	uxtb	r2, r1
 8001308:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	0c19      	lsrs	r1, r3, #16
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	3302      	adds	r3, #2
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	4413      	add	r3, r2
 8001318:	b2ca      	uxtb	r2, r1
 800131a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	0e19      	lsrs	r1, r3, #24
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	3303      	adds	r3, #3
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	4413      	add	r3, r2
 800132a:	b2ca      	uxtb	r2, r1
 800132c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	3304      	adds	r3, #4
 8001332:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6899      	ldr	r1, [r3, #8]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	4413      	add	r3, r2
 800133e:	b2ca      	uxtb	r2, r1
 8001340:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	0a19      	lsrs	r1, r3, #8
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3301      	adds	r3, #1
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	4413      	add	r3, r2
 8001350:	b2ca      	uxtb	r2, r1
 8001352:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	0c19      	lsrs	r1, r3, #16
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3302      	adds	r3, #2
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	4413      	add	r3, r2
 8001362:	b2ca      	uxtb	r2, r1
 8001364:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	0e19      	lsrs	r1, r3, #24
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3303      	adds	r3, #3
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	4413      	add	r3, r2
 8001374:	b2ca      	uxtb	r2, r1
 8001376:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	3304      	adds	r3, #4
 800137c:	60fb      	str	r3, [r7, #12]
      return offset;
 800137e:	68fb      	ldr	r3, [r7, #12]
    }
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3301      	adds	r3, #1
 80013b0:	6839      	ldr	r1, [r7, #0]
 80013b2:	440b      	add	r3, r1
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	431a      	orrs	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3302      	adds	r3, #2
 80013c6:	6839      	ldr	r1, [r7, #0]
 80013c8:	440b      	add	r3, r1
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	041b      	lsls	r3, r3, #16
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3303      	adds	r3, #3
 80013dc:	6839      	ldr	r1, [r7, #0]
 80013de:	440b      	add	r3, r1
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	061b      	lsls	r3, r3, #24
 80013e4:	431a      	orrs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	3304      	adds	r3, #4
 80013ee:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	4413      	add	r3, r2
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3301      	adds	r3, #1
 8001406:	6839      	ldr	r1, [r7, #0]
 8001408:	440b      	add	r3, r1
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	3302      	adds	r3, #2
 800141c:	6839      	ldr	r1, [r7, #0]
 800141e:	440b      	add	r3, r1
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	041b      	lsls	r3, r3, #16
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3303      	adds	r3, #3
 8001432:	6839      	ldr	r1, [r7, #0]
 8001434:	440b      	add	r3, r1
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	061b      	lsls	r3, r3, #24
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3304      	adds	r3, #4
 8001444:	60fb      	str	r3, [r7, #12]
     return offset;
 8001446:	68fb      	ldr	r3, [r7, #12]
    }
 8001448:	4618      	mov	r0, r3
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	08009598 	.word	0x08009598

08001470 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	080095a8 	.word	0x080095a8

0800148c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fe0a 	bl	80010b0 <_ZN3ros3MsgC1Ev>
 800149c:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	809a      	strh	r2, [r3, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a09      	ldr	r2, [pc, #36]	; (80014d0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a06      	ldr	r2, [pc, #24]	; (80014d0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80014b8:	611a      	str	r2, [r3, #16]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	615a      	str	r2, [r3, #20]
    {
    }
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	080097d4 	.word	0x080097d4
 80014d0:	080095cc 	.word	0x080095cc

080014d4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	8899      	ldrh	r1, [r3, #4]
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	b2ca      	uxtb	r2, r1
 80014ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	889b      	ldrh	r3, [r3, #4]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	b299      	uxth	r1, r3
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	3301      	adds	r3, #1
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	b2ca      	uxtb	r2, r1
 8001502:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	3302      	adds	r3, #2
 8001508:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe fe86 	bl	8000220 <strlen>
 8001514:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	4413      	add	r3, r2
 800151c:	69b9      	ldr	r1, [r7, #24]
 800151e:	4618      	mov	r0, r3
 8001520:	f000 fe94 	bl	800224c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	3304      	adds	r3, #4
 8001528:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	18d0      	adds	r0, r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4619      	mov	r1, r3
 8001538:	f007 fea6 	bl	8009288 <memcpy>
      offset += length_topic_name;
 800153c:	69fa      	ldr	r2, [r7, #28]
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	4413      	add	r3, r2
 8001542:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe fe69 	bl	8000220 <strlen>
 800154e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	4413      	add	r3, r2
 8001556:	6979      	ldr	r1, [r7, #20]
 8001558:	4618      	mov	r0, r3
 800155a:	f000 fe77 	bl	800224c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3304      	adds	r3, #4
 8001562:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	18d0      	adds	r0, r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	4619      	mov	r1, r3
 8001572:	f007 fe89 	bl	8009288 <memcpy>
      offset += length_message_type;
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	4413      	add	r3, r2
 800157c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe fe4c 	bl	8000220 <strlen>
 8001588:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	4413      	add	r3, r2
 8001590:	6939      	ldr	r1, [r7, #16]
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fe5a 	bl	800224c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	3304      	adds	r3, #4
 800159c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	18d0      	adds	r0, r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4619      	mov	r1, r3
 80015ac:	f007 fe6c 	bl	8009288 <memcpy>
      offset += length_md5sum;
 80015b0:	69fa      	ldr	r2, [r7, #28]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4413      	add	r3, r2
 80015b6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80015be:	68f9      	ldr	r1, [r7, #12]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	4413      	add	r3, r2
 80015c6:	b2ca      	uxtb	r2, r1
 80015c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	0a19      	lsrs	r1, r3, #8
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3301      	adds	r3, #1
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	4413      	add	r3, r2
 80015d6:	b2ca      	uxtb	r2, r1
 80015d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	0c19      	lsrs	r1, r3, #16
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3302      	adds	r3, #2
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	4413      	add	r3, r2
 80015e6:	b2ca      	uxtb	r2, r1
 80015e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	0e19      	lsrs	r1, r3, #24
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3303      	adds	r3, #3
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	4413      	add	r3, r2
 80015f6:	b2ca      	uxtb	r2, r1
 80015f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	61fb      	str	r3, [r7, #28]
      return offset;
 8001600:	69fb      	ldr	r3, [r7, #28]
    }
 8001602:	4618      	mov	r0, r3
 8001604:	3720      	adds	r7, #32
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800160a:	b580      	push	{r7, lr}
 800160c:	b08a      	sub	sp, #40	; 0x28
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	4413      	add	r3, r2
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	b29a      	uxth	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	889b      	ldrh	r3, [r3, #4]
 800162a:	b21a      	sxth	r2, r3
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	3301      	adds	r3, #1
 8001630:	6839      	ldr	r1, [r7, #0]
 8001632:	440b      	add	r3, r1
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	b21b      	sxth	r3, r3
 800163a:	4313      	orrs	r3, r2
 800163c:	b21b      	sxth	r3, r3
 800163e:	b29a      	uxth	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	3302      	adds	r3, #2
 8001648:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	441a      	add	r2, r3
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f000 fe16 	bl	8002288 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	3304      	adds	r3, #4
 8001660:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	4413      	add	r3, r2
 800166c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800166e:	429a      	cmp	r2, r3
 8001670:	d20c      	bcs.n	800168c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	441a      	add	r2, r3
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	3b01      	subs	r3, #1
 800167c:	6839      	ldr	r1, [r7, #0]
 800167e:	440b      	add	r3, r1
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	3301      	adds	r3, #1
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
 800168a:	e7ec      	b.n	8001666 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	4413      	add	r3, r2
 8001692:	3b01      	subs	r3, #1
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	4413      	add	r3, r2
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	3b01      	subs	r3, #1
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	441a      	add	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	4413      	add	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	441a      	add	r2, r3
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 fde3 	bl	8002288 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	3304      	adds	r3, #4
 80016c6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	623b      	str	r3, [r7, #32]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4413      	add	r3, r2
 80016d2:	6a3a      	ldr	r2, [r7, #32]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d20c      	bcs.n	80016f2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	441a      	add	r2, r3
 80016de:	6a3b      	ldr	r3, [r7, #32]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	6839      	ldr	r1, [r7, #0]
 80016e4:	440b      	add	r3, r1
 80016e6:	7812      	ldrb	r2, [r2, #0]
 80016e8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	3301      	adds	r3, #1
 80016ee:	623b      	str	r3, [r7, #32]
 80016f0:	e7ec      	b.n	80016cc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4413      	add	r3, r2
 80016f8:	3b01      	subs	r3, #1
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	4413      	add	r3, r2
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	3b01      	subs	r3, #1
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	441a      	add	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4413      	add	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	441a      	add	r2, r3
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	4611      	mov	r1, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f000 fdb0 	bl	8002288 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	3304      	adds	r3, #4
 800172c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	61fb      	str	r3, [r7, #28]
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	69fa      	ldr	r2, [r7, #28]
 800173a:	429a      	cmp	r2, r3
 800173c:	d20c      	bcs.n	8001758 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	441a      	add	r2, r3
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	3b01      	subs	r3, #1
 8001748:	6839      	ldr	r1, [r7, #0]
 800174a:	440b      	add	r3, r1
 800174c:	7812      	ldrb	r2, [r2, #0]
 800174e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	3301      	adds	r3, #1
 8001754:	61fb      	str	r3, [r7, #28]
 8001756:	e7ec      	b.n	8001732 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4413      	add	r3, r2
 800175e:	3b01      	subs	r3, #1
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	4413      	add	r3, r2
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	3b01      	subs	r3, #1
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	441a      	add	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4413      	add	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	6839      	ldr	r1, [r7, #0]
 8001786:	440a      	add	r2, r1
 8001788:	7812      	ldrb	r2, [r2, #0]
 800178a:	4313      	orrs	r3, r2
 800178c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	3301      	adds	r3, #1
 8001794:	6839      	ldr	r1, [r7, #0]
 8001796:	440b      	add	r3, r1
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	021b      	lsls	r3, r3, #8
 800179c:	4313      	orrs	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	3302      	adds	r3, #2
 80017a6:	6839      	ldr	r1, [r7, #0]
 80017a8:	440b      	add	r3, r1
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	041b      	lsls	r3, r3, #16
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	3303      	adds	r3, #3
 80017b8:	6839      	ldr	r1, [r7, #0]
 80017ba:	440b      	add	r3, r1
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	061b      	lsls	r3, r3, #24
 80017c0:	4313      	orrs	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	3304      	adds	r3, #4
 80017ce:	61bb      	str	r3, [r7, #24]
     return offset;
 80017d0:	69bb      	ldr	r3, [r7, #24]
    }
 80017d2:	4618      	mov	r0, r3
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	080095d0 	.word	0x080095d0

080017f8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	080095ec 	.word	0x080095ec

08001814 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fc46 	bl	80010b0 <_ZN3ros3MsgC1Ev>
 8001824:	4a06      	ldr	r2, [pc, #24]	; (8001840 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	711a      	strb	r2, [r3, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a04      	ldr	r2, [pc, #16]	; (8001844 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001834:	609a      	str	r2, [r3, #8]
    {
    }
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	080097bc 	.word	0x080097bc
 8001844:	080095cc 	.word	0x080095cc

08001848 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	4413      	add	r3, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	7912      	ldrb	r2, [r2, #4]
 8001860:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3301      	adds	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fcd7 	bl	8000220 <strlen>
 8001872:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	4413      	add	r3, r2
 800187a:	68b9      	ldr	r1, [r7, #8]
 800187c:	4618      	mov	r0, r3
 800187e:	f000 fce5 	bl	800224c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3304      	adds	r3, #4
 8001886:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	18d0      	adds	r0, r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	4619      	mov	r1, r3
 8001896:	f007 fcf7 	bl	8009288 <memcpy>
      offset += length_msg;
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
      return offset;
 80018a2:	68fb      	ldr	r3, [r7, #12]
    }
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	781a      	ldrb	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	3301      	adds	r3, #1
 80018ca:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	441a      	add	r2, r3
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 fcd5 	bl	8002288 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	3304      	adds	r3, #4
 80018e2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4413      	add	r3, r2
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d20c      	bcs.n	800190e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	441a      	add	r2, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	6839      	ldr	r1, [r7, #0]
 8001900:	440b      	add	r3, r1
 8001902:	7812      	ldrb	r2, [r2, #0]
 8001904:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	e7ec      	b.n	80018e8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	3b01      	subs	r3, #1
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	4413      	add	r3, r2
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	3b01      	subs	r3, #1
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	441a      	add	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
     return offset;
 8001932:	693b      	ldr	r3, [r7, #16]
    }
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	08009610 	.word	0x08009610

08001958 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	08009624 	.word	0x08009624

08001974 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fb96 	bl	80010b0 <_ZN3ros3MsgC1Ev>
 8001984:	4a0c      	ldr	r2, [pc, #48]	; (80019b8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	61da      	str	r2, [r3, #28]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	080097a4 	.word	0x080097a4

080019bc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	; 0x28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6859      	ldr	r1, [r3, #4]
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	b2ca      	uxtb	r2, r1
 80019d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	0a19      	lsrs	r1, r3, #8
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	3301      	adds	r3, #1
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	b2ca      	uxtb	r2, r1
 80019e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	0c19      	lsrs	r1, r3, #16
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	3302      	adds	r3, #2
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	b2ca      	uxtb	r2, r1
 80019fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	0e19      	lsrs	r1, r3, #24
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	3303      	adds	r3, #3
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	4413      	add	r3, r2
 8001a0a:	b2ca      	uxtb	r2, r1
 8001a0c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	3304      	adds	r3, #4
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	6a3a      	ldr	r2, [r7, #32]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d22b      	bcs.n	8001a7a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001a30:	6939      	ldr	r1, [r7, #16]
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	b2ca      	uxtb	r2, r1
 8001a3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	0a19      	lsrs	r1, r3, #8
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	3301      	adds	r3, #1
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	b2ca      	uxtb	r2, r1
 8001a4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	0c19      	lsrs	r1, r3, #16
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	3302      	adds	r3, #2
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	b2ca      	uxtb	r2, r1
 8001a5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	0e19      	lsrs	r1, r3, #24
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	3303      	adds	r3, #3
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	b2ca      	uxtb	r2, r1
 8001a6a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	3304      	adds	r3, #4
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	3301      	adds	r3, #1
 8001a76:	623b      	str	r3, [r7, #32]
 8001a78:	e7ce      	b.n	8001a18 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6919      	ldr	r1, [r3, #16]
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	b2ca      	uxtb	r2, r1
 8001a86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	0a19      	lsrs	r1, r3, #8
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	3301      	adds	r3, #1
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	4413      	add	r3, r2
 8001a96:	b2ca      	uxtb	r2, r1
 8001a98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	0c19      	lsrs	r1, r3, #16
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b2ca      	uxtb	r2, r1
 8001aaa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	0e19      	lsrs	r1, r3, #24
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	3303      	adds	r3, #3
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	4413      	add	r3, r2
 8001aba:	b2ca      	uxtb	r2, r1
 8001abc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d22b      	bcs.n	8001b2a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699a      	ldr	r2, [r3, #24]
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001ae0:	68f9      	ldr	r1, [r7, #12]
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	b2ca      	uxtb	r2, r1
 8001aea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	0a19      	lsrs	r1, r3, #8
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	3301      	adds	r3, #1
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	b2ca      	uxtb	r2, r1
 8001afa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	0c19      	lsrs	r1, r3, #16
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	3302      	adds	r3, #2
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	b2ca      	uxtb	r2, r1
 8001b0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	0e19      	lsrs	r1, r3, #24
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	3303      	adds	r3, #3
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	b2ca      	uxtb	r2, r1
 8001b1a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	3304      	adds	r3, #4
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3301      	adds	r3, #1
 8001b26:	61fb      	str	r3, [r7, #28]
 8001b28:	e7ce      	b.n	8001ac8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69d9      	ldr	r1, [r3, #28]
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	b2ca      	uxtb	r2, r1
 8001b36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	0a19      	lsrs	r1, r3, #8
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	3301      	adds	r3, #1
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	4413      	add	r3, r2
 8001b46:	b2ca      	uxtb	r2, r1
 8001b48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	0c19      	lsrs	r1, r3, #16
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	3302      	adds	r3, #2
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	b2ca      	uxtb	r2, r1
 8001b5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	0e19      	lsrs	r1, r3, #24
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	3303      	adds	r3, #3
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	4413      	add	r3, r2
 8001b6a:	b2ca      	uxtb	r2, r1
 8001b6c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	3304      	adds	r3, #4
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001b74:	2300      	movs	r3, #0
 8001b76:	61bb      	str	r3, [r7, #24]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d228      	bcs.n	8001bd4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fb46 	bl	8000220 <strlen>
 8001b94:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	6979      	ldr	r1, [r7, #20]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 fb54 	bl	800224c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	18d0      	adds	r0, r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f007 fb62 	bl	8009288 <memcpy>
      offset += length_stringsi;
 8001bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	4413      	add	r3, r2
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	61bb      	str	r3, [r7, #24]
 8001bd2:	e7d1      	b.n	8001b78 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b08e      	sub	sp, #56	; 0x38
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	6a3a      	ldr	r2, [r7, #32]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	041b      	lsls	r3, r3, #16
 8001c14:	6a3a      	ldr	r2, [r7, #32]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1c:	3303      	adds	r3, #3
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	4413      	add	r3, r2
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	061b      	lsls	r3, r3, #24
 8001c26:	6a3a      	ldr	r2, [r7, #32]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c2e:	3304      	adds	r3, #4
 8001c30:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	6a3a      	ldr	r2, [r7, #32]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d90a      	bls.n	8001c52 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4619      	mov	r1, r3
 8001c46:	4610      	mov	r0, r2
 8001c48:	f007 fb32 	bl	80092b0 <realloc>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a3a      	ldr	r2, [r7, #32]
 8001c56:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001c58:	2300      	movs	r3, #0
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d236      	bcs.n	8001cd4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c6e:	6839      	ldr	r1, [r7, #0]
 8001c70:	440a      	add	r2, r1
 8001c72:	7812      	ldrb	r2, [r2, #0]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	6839      	ldr	r1, [r7, #0]
 8001c80:	440b      	add	r3, r1
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	4313      	orrs	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c8e:	3302      	adds	r3, #2
 8001c90:	6839      	ldr	r1, [r7, #0]
 8001c92:	440b      	add	r3, r1
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	041b      	lsls	r3, r3, #16
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca0:	3303      	adds	r3, #3
 8001ca2:	6839      	ldr	r1, [r7, #0]
 8001ca4:	440b      	add	r3, r1
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	061b      	lsls	r3, r3, #24
 8001caa:	4313      	orrs	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	3208      	adds	r2, #8
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cce:	3301      	adds	r3, #1
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8001cd2:	e7c3      	b.n	8001c5c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	4413      	add	r3, r2
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	041b      	lsls	r3, r3, #16
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d04:	3303      	adds	r3, #3
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	4413      	add	r3, r2
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	061b      	lsls	r3, r3, #24
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d16:	3304      	adds	r3, #4
 8001d18:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d90a      	bls.n	8001d3a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699a      	ldr	r2, [r3, #24]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4610      	mov	r0, r2
 8001d30:	f007 fabe 	bl	80092b0 <realloc>
 8001d34:	4602      	mov	r2, r0
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69fa      	ldr	r2, [r7, #28]
 8001d3e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d236      	bcs.n	8001dbc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d56:	6839      	ldr	r1, [r7, #0]
 8001d58:	440a      	add	r2, r1
 8001d5a:	7812      	ldrb	r2, [r2, #0]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d64:	3301      	adds	r3, #1
 8001d66:	6839      	ldr	r1, [r7, #0]
 8001d68:	440b      	add	r3, r1
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	021b      	lsls	r3, r3, #8
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d76:	3302      	adds	r3, #2
 8001d78:	6839      	ldr	r1, [r7, #0]
 8001d7a:	440b      	add	r3, r1
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	041b      	lsls	r3, r3, #16
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d88:	3303      	adds	r3, #3
 8001d8a:	6839      	ldr	r1, [r7, #0]
 8001d8c:	440b      	add	r3, r1
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	061b      	lsls	r3, r3, #24
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9e:	3304      	adds	r3, #4
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699a      	ldr	r2, [r3, #24]
 8001da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	3214      	adds	r2, #20
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db6:	3301      	adds	r3, #1
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dba:	e7c3      	b.n	8001d44 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc8:	3301      	adds	r3, #1
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	4413      	add	r3, r2
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dda:	3302      	adds	r3, #2
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	041b      	lsls	r3, r3, #16
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dec:	3303      	adds	r3, #3
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	4413      	add	r3, r2
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	061b      	lsls	r3, r3, #24
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfe:	3304      	adds	r3, #4
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d90a      	bls.n	8001e22 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4619      	mov	r1, r3
 8001e16:	4610      	mov	r0, r2
 8001e18:	f007 fa4a 	bl	80092b0 <realloc>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d23f      	bcs.n	8001eb6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	441a      	add	r2, r3
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 fa20 	bl	8002288 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
 8001e52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d20c      	bcs.n	8001e78 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	441a      	add	r2, r3
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	3b01      	subs	r3, #1
 8001e68:	6839      	ldr	r1, [r7, #0]
 8001e6a:	440b      	add	r3, r1
 8001e6c:	7812      	ldrb	r2, [r2, #0]
 8001e6e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	3301      	adds	r3, #1
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
 8001e76:	e7ec      	b.n	8001e52 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001e78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	441a      	add	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001e94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4413      	add	r3, r2
 8001e9a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	3220      	adds	r2, #32
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eb4:	e7ba      	b.n	8001e2c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3738      	adds	r7, #56	; 0x38
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	08009728 	.word	0x08009728

08001edc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	08009648 	.word	0x08009648

08001ef8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	611a      	str	r2, [r3, #16]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68d8      	ldr	r0, [r3, #12]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6891      	ldr	r1, [r2, #8]
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	4798      	blx	r3
 8001f44:	4603      	mov	r3, r0
  };
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
  }
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_ZN13STM32HardwareC1Ev>:


class STM32Hardware
{
  public:
    STM32Hardware() {}
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <_ZN13STM32Hardware4readEv>:

    }

    // Read a byte of data from ROS connection.
    // If no data , hal_uart-timeout, returns -1
    int read()
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
    {
//      BSP_LED_Toggle(LED1);
      return (HAL_USART_Receive(&UartHandle, RxBuffer, 1, 15) == HAL_OK) ? *RxBuffer : -1;
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <_ZN13STM32Hardware4readEv+0x30>)
 8001f86:	6819      	ldr	r1, [r3, #0]
 8001f88:	230f      	movs	r3, #15
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4808      	ldr	r0, [pc, #32]	; (8001fb0 <_ZN13STM32Hardware4readEv+0x34>)
 8001f8e:	f003 fe70 	bl	8005c72 <HAL_USART_Receive>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d103      	bne.n	8001fa0 <_ZN13STM32Hardware4readEv+0x24>
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <_ZN13STM32Hardware4readEv+0x30>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	e001      	b.n	8001fa4 <_ZN13STM32Hardware4readEv+0x28>
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	200000ac 	.word	0x200000ac

08001fb4 <_ZN13STM32Hardware5writeEPhi>:

    // Send a byte of data to ROS connection
    void write(uint8_t* data, int length)
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
    {
//      BSP_LED_Toggle(LED2);
      HAL_USART_Transmit(&UartHandle, (uint8_t*)data, (uint16_t)length, HAL_MAX_DELAY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	4803      	ldr	r0, [pc, #12]	; (8001fd8 <_ZN13STM32Hardware5writeEPhi+0x24>)
 8001fcc:	f003 fda8 	bl	8005b20 <HAL_USART_Transmit>
    }
 8001fd0:	bf00      	nop
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	200000ac 	.word	0x200000ac

08001fdc <_ZN13STM32Hardware4timeEv>:

    // Returns milliseconds since start of program
    unsigned long time(void)
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
    {
//      BSP_LED_Toggle(LED3);
      return HAL_GetTick();
 8001fe4:	f001 fb42 	bl	800366c <HAL_GetTick>
 8001fe8:	4603      	mov	r3, r0
    }
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <_Z8right_cbRKN8std_msgs6UInt16E>:
int powerR = 1500;
int powerL = 1500;

ros::NodeHandle  nh;

void right_cb( const std_msgs::UInt16& cmd_msg){
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
    powerR = cmd_msg.data; //1100-1900
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	889b      	ldrh	r3, [r3, #4]
 8002000:	461a      	mov	r2, r3
 8002002:	4b04      	ldr	r3, [pc, #16]	; (8002014 <_Z8right_cbRKN8std_msgs6UInt16E+0x20>)
 8002004:	601a      	str	r2, [r3, #0]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000008 	.word	0x20000008

08002018 <_Z7left_cbRKN8std_msgs6UInt16E>:

void left_cb( const std_msgs::UInt16& cmd_msg){
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
    powerL = cmd_msg.data; //1100-1900
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	889b      	ldrh	r3, [r3, #4]
 8002024:	461a      	mov	r2, r3
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <_Z7left_cbRKN8std_msgs6UInt16E+0x20>)
 8002028:	601a      	str	r2, [r3, #0]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	2000000c 	.word	0x2000000c

0800203c <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002040:	f001 faaf 	bl	80035a2 <HAL_Init>
  	/* USER CODE BEGIN Init */

  	/* USER CODE END Init */

  	/* Configure the system clock */
  	SystemClock_Config();
 8002044:	f000 f868 	bl	8002118 <_Z18SystemClock_Configv>

  	/* USER CODE BEGIN SysInit */

  	/* USER CODE END SysInit */

  	  MX_GPIO_Init();
 8002048:	f7fe ff6e 	bl	8000f28 <MX_GPIO_Init>
  	  MX_TIM3_Init();
 800204c:	f001 f802 	bl	8003054 <MX_TIM3_Init>
  	  MX_I2C1_Init();
 8002050:	f7fe ffaa 	bl	8000fa8 <MX_I2C1_Init>
  	  MX_USART2_Init();
 8002054:	f001 f9ce 	bl	80033f4 <MX_USART2_Init>
  	  MX_TIM17_Init();
 8002058:	f001 f864 	bl	8003124 <MX_TIM17_Init>
  	  MX_TIM2_Init();
 800205c:	f000 ff7a 	bl	8002f54 <MX_TIM2_Init>
  	 * 	 en el tiempo.
  	 * - EL periodo de las tareas se debe establecer en las funciones de las
  	 *   tareas usando el comando osDelay(). Evitar en la medida de lo posible
  	 *   periodos coincidentes en las tareas*/
  	  /* creation of thrustersControl */
  	  osKernelInitialize();
 8002060:	f004 fb8e 	bl	8006780 <osKernelInitialize>
  	  osThreadNew(thrustersControl,NULL,NULL);
 8002064:	2200      	movs	r2, #0
 8002066:	2100      	movs	r1, #0
 8002068:	481d      	ldr	r0, [pc, #116]	; (80020e0 <main+0xa4>)
 800206a:	f004 fbf3 	bl	8006854 <osThreadNew>
  	  /* creation of pumpControlTask */
  	  osThreadNew(pumpControlTask,NULL,NULL);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	481c      	ldr	r0, [pc, #112]	; (80020e4 <main+0xa8>)
 8002074:	f004 fbee 	bl	8006854 <osThreadNew>

  	  /* creation of pressureMeasure */

  	  osThreadNew(pressureMeasure,NULL,NULL);
 8002078:	2200      	movs	r2, #0
 800207a:	2100      	movs	r1, #0
 800207c:	481a      	ldr	r0, [pc, #104]	; (80020e8 <main+0xac>)
 800207e:	f004 fbe9 	bl	8006854 <osThreadNew>
  	  /* creation of hydrophoneTask */

  	  osThreadNew(hydrophoneTask,NULL,NULL);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	4819      	ldr	r0, [pc, #100]	; (80020ec <main+0xb0>)
 8002088:	f004 fbe4 	bl	8006854 <osThreadNew>
  	  /* Init scheduler */
  	  osKernelStart();
 800208c:	f004 fbac 	bl	80067e8 <osKernelStart>
    /* We should never get here as control is now taken by the scheduler */
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
  	while (1){
  		select(channel4, channel2, channel5, thrusterRight, thrusterLeft, powerR, powerL);
 8002090:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <main+0xb4>)
 8002092:	edd3 7a00 	vldr	s15, [r3]
 8002096:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <main+0xb8>)
 8002098:	ed93 7a00 	vldr	s14, [r3]
 800209c:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <main+0xbc>)
 800209e:	edd3 6a00 	vldr	s13, [r3]
 80020a2:	4b16      	ldr	r3, [pc, #88]	; (80020fc <main+0xc0>)
 80020a4:	8818      	ldrh	r0, [r3, #0]
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <main+0xc4>)
 80020a8:	8819      	ldrh	r1, [r3, #0]
 80020aa:	4b16      	ldr	r3, [pc, #88]	; (8002104 <main+0xc8>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4b16      	ldr	r3, [pc, #88]	; (8002108 <main+0xcc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	eeb0 1a66 	vmov.f32	s2, s13
 80020b6:	eef0 0a47 	vmov.f32	s1, s14
 80020ba:	eeb0 0a67 	vmov.f32	s0, s15
 80020be:	f7fe fed9 	bl	8000e74 <select>
  		flag.data = 1;
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <main+0xd0>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	711a      	strb	r2, [r3, #4]
  		stm32.publish( &flag );
 80020c8:	4910      	ldr	r1, [pc, #64]	; (800210c <main+0xd0>)
 80020ca:	4811      	ldr	r0, [pc, #68]	; (8002110 <main+0xd4>)
 80020cc:	f7ff ff2b 	bl	8001f26 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  		nh.spinOnce();
 80020d0:	4810      	ldr	r0, [pc, #64]	; (8002114 <main+0xd8>)
 80020d2:	f000 f9c1 	bl	8002458 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	    HAL_Delay(1);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f001 fad4 	bl	8003684 <HAL_Delay>
  		select(channel4, channel2, channel5, thrusterRight, thrusterLeft, powerR, powerL);
 80020dc:	e7d8      	b.n	8002090 <main+0x54>
 80020de:	bf00      	nop
 80020e0:	08002205 	.word	0x08002205
 80020e4:	08002215 	.word	0x08002215
 80020e8:	08002225 	.word	0x08002225
 80020ec:	08002235 	.word	0x08002235
 80020f0:	20000110 	.word	0x20000110
 80020f4:	20000114 	.word	0x20000114
 80020f8:	20000118 	.word	0x20000118
 80020fc:	2000011c 	.word	0x2000011c
 8002100:	20000004 	.word	0x20000004
 8002104:	20000008 	.word	0x20000008
 8002108:	2000000c 	.word	0x2000000c
 800210c:	20000650 	.word	0x20000650
 8002110:	20000690 	.word	0x20000690
 8002114:	20000120 	.word	0x20000120

08002118 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b0a4      	sub	sp, #144	; 0x90
 800211c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800211e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002122:	2238      	movs	r2, #56	; 0x38
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f007 f8b9 	bl	800929e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800212c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800213c:	463b      	mov	r3, r7
 800213e:	2244      	movs	r2, #68	; 0x44
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f007 f8ab 	bl	800929e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002148:	f44f 7000 	mov.w	r0, #512	; 0x200
 800214c:	f001 fe60 	bl	8003e10 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002150:	2302      	movs	r3, #2
 8002152:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002154:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002158:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800215a:	2340      	movs	r3, #64	; 0x40
 800215c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800215e:	2302      	movs	r3, #2
 8002160:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002162:	2302      	movs	r3, #2
 8002164:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002166:	2304      	movs	r3, #4
 8002168:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 75;
 800216a:	234b      	movs	r3, #75	; 0x4b
 800216c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002170:	2302      	movs	r3, #2
 8002172:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002176:	2302      	movs	r3, #2
 8002178:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800217c:	2302      	movs	r3, #2
 800217e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002182:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002186:	4618      	mov	r0, r3
 8002188:	f001 fef6 	bl	8003f78 <HAL_RCC_OscConfig>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	bf14      	ite	ne
 8002192:	2301      	movne	r3, #1
 8002194:	2300      	moveq	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 800219c:	f000 f852 	bl	8002244 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021a0:	230f      	movs	r3, #15
 80021a2:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a4:	2303      	movs	r3, #3
 80021a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021a8:	2300      	movs	r3, #0
 80021aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021ac:	2300      	movs	r3, #0
 80021ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021b0:	2300      	movs	r3, #0
 80021b2:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80021b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021b8:	2104      	movs	r1, #4
 80021ba:	4618      	mov	r0, r3
 80021bc:	f002 f9f4 	bl	80045a8 <HAL_RCC_ClockConfig>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	bf14      	ite	ne
 80021c6:	2301      	movne	r3, #1
 80021c8:	2300      	moveq	r3, #0
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 80021d0:	f000 f838 	bl	8002244 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80021d4:	2342      	movs	r3, #66	; 0x42
 80021d6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80021dc:	2300      	movs	r3, #0
 80021de:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021e0:	463b      	mov	r3, r7
 80021e2:	4618      	mov	r0, r3
 80021e4:	f002 fbfc 	bl	80049e0 <HAL_RCCEx_PeriphCLKConfig>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	bf14      	ite	ne
 80021ee:	2301      	movne	r3, #1
 80021f0:	2300      	moveq	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <_Z18SystemClock_Configv+0xe4>
  {
    Error_Handler();
 80021f8:	f000 f824 	bl	8002244 <Error_Handler>
  }
}
 80021fc:	bf00      	nop
 80021fe:	3790      	adds	r7, #144	; 0x90
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_Z16thrustersControlPv>:
  * @param None
  * @retval None
  */

void thrustersControl(void *argument)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
   * En caso de requerir cambiar configuraciones notificarlo y hacerlo en el archivo
   * "Servo.cfg"*/
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800220c:	2001      	movs	r0, #1
 800220e:	f004 fbc7 	bl	80069a0 <osDelay>
 8002212:	e7fb      	b.n	800220c <_Z16thrustersControlPv+0x8>

08002214 <_Z15pumpControlTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pumpControlTask */
void pumpControlTask(void *argument)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
   * migrar de RTOS a maneja de interrupciones
   *  */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800221c:	2001      	movs	r0, #1
 800221e:	f004 fbbf 	bl	80069a0 <osDelay>
 8002222:	e7fb      	b.n	800221c <_Z15pumpControlTaskPv+0x8>

08002224 <_Z15pressureMeasurePv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pressureMeasure */
void pressureMeasure(void *argument)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
   * código no debería ser complicado de realizar. INvestigar si ya hay una
   * liberría existente que podamos usar.*/
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800222c:	2001      	movs	r0, #1
 800222e:	f004 fbb7 	bl	80069a0 <osDelay>
 8002232:	e7fb      	b.n	800222c <_Z15pressureMeasurePv+0x8>

08002234 <_Z14hydrophoneTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_hydrophoneTask */
void hydrophoneTask(void *argument)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN hydrophoneTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800223c:	2001      	movs	r0, #1
 800223e:	f004 fbaf 	bl	80069a0 <osDelay>
 8002242:	e7fb      	b.n	800223c <_Z14hydrophoneTaskPv+0x8>

08002244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002248:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800224a:	e7fe      	b.n	800224a <Error_Handler+0x6>

0800224c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b03      	cmp	r3, #3
 800225e:	d80d      	bhi.n	800227c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	fa22 f103 	lsr.w	r1, r2, r3
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4413      	add	r3, r2
 8002270:	b2ca      	uxtb	r2, r1
 8002272:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	3301      	adds	r3, #1
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	e7ee      	b.n	800225a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d811      	bhi.n	80022c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6839      	ldr	r1, [r7, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	440a      	add	r2, r1
 80022ac:	7812      	ldrb	r2, [r2, #0]
 80022ae:	4611      	mov	r1, r2
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	00d2      	lsls	r2, r2, #3
 80022b4:	fa01 f202 	lsl.w	r2, r1, r2
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	3301      	adds	r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	e7ea      	b.n	800229c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	08009790 	.word	0x08009790

080022f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff ffe8 	bl	80022d4 <_ZN3ros15NodeHandleBase_C1Ev>
 8002304:	4a39      	ldr	r2, [pc, #228]	; (80023ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xf8>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3304      	adds	r3, #4
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fe29 	bl	8001f66 <_ZN13STM32HardwareC1Ev>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fb26 	bl	8001974 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	2b18      	cmp	r3, #24
 8002330:	d80a      	bhi.n	8002348 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800233a:	2100      	movs	r1, #0
 800233c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	3301      	adds	r3, #1
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	e7f1      	b.n	800232c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002348:	2300      	movs	r3, #0
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	2b18      	cmp	r3, #24
 8002350:	d80b      	bhi.n	800236a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	2200      	movs	r2, #0
 8002360:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	3301      	adds	r3, #1
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	e7f0      	b.n	800234c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002374:	d209      	bcs.n	800238a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x96>
      message_in[i] = 0;
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	3318      	adds	r3, #24
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3301      	adds	r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e7f1      	b.n	800236e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002394:	d20a      	bcs.n	80023ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xb8>
      message_out[i] = 0;
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4413      	add	r3, r2
 800239c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	3301      	adds	r3, #1
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	e7f0      	b.n	800238e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    req_param_resp.floats_length = 0;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    req_param_resp.floats = NULL;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    req_param_resp.ints_length = 0;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514

    spin_timeout_ = 0;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	615a      	str	r2, [r3, #20]
  }
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	08009764 	.word	0x08009764

080023f0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	4a04      	ldr	r2, [pc, #16]	; (800240c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	08009778 	.word	0x08009778

08002410 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ffe5 	bl	80023f0 <_ZN3ros11Subscriber_C1Ev>
 8002426:	4a0b      	ldr	r2, [pc, #44]	; (8002454 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei+0x44>)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	330c      	adds	r3, #12
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe fe4d 	bl	80010d0 <_ZN8std_msgs6UInt16C1Ev>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	615a      	str	r2, [r3, #20]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	609a      	str	r2, [r3, #8]
  };
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	0800974c 	.word	0x0800974c

08002458 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce()
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3304      	adds	r3, #4
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fdb9 	bl	8001fdc <_ZN13STM32Hardware4timeEv>
 800246a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800247a:	4293      	cmp	r3, r2
 800247c:	d903      	bls.n	8002486 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
    {
      configured_ = false;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d009      	beq.n	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
    {
      if (c_time > last_msg_timeout_time)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	429a      	cmp	r2, r3
 800249a:	d903      	bls.n	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d013      	beq.n	80024d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3304      	adds	r3, #4
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fd93 	bl	8001fdc <_ZN13STM32Hardware4timeEv>
 80024b6:	4602      	mov	r2, r0
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1ad2      	subs	r2, r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	bf8c      	ite	hi
 80024c4:	2301      	movhi	r3, #1
 80024c6:	2300      	movls	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 80024ce:	f06f 0301 	mvn.w	r3, #1
 80024d2:	e193      	b.n	80027fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
        }
      }
      int data = hardware_.read();
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3304      	adds	r3, #4
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fd4f 	bl	8001f7c <_ZN13STM32Hardware4readEv>
 80024de:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f2c0 8173 	blt.w	80027ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x376>
        break;
      checksum_ += data;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	441a      	add	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80024fe:	2b07      	cmp	r3, #7
 8002500:	d11d      	bne.n	800253e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
      {
        message_in[index_++] = data;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002508:	1c59      	adds	r1, r3, #1
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	b2d1      	uxtb	r1, r2
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	4413      	add	r3, r2
 8002518:	460a      	mov	r2, r1
 800251a:	761a      	strb	r2, [r3, #24]
        bytes_--;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8002522:	1e5a      	subs	r2, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1b7      	bne.n	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2208      	movs	r2, #8
 8002538:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800253c:	e7b2      	b.n	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_FIRST_FF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d128      	bne.n	800259a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
      {
        if (data == 0xff)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2bff      	cmp	r3, #255	; 0xff
 800254c:	d10d      	bne.n	800256a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
        {
          mode_++;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f103 0214 	add.w	r2, r3, #20
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8002568:	e79c      	b.n	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3304      	adds	r3, #4
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fd34 	bl	8001fdc <_ZN13STM32Hardware4timeEv>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	bf8c      	ite	hi
 8002582:	2301      	movhi	r3, #1
 8002584:	2300      	movls	r3, #0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d08b      	beq.n	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 8002594:	f06f 0301 	mvn.w	r3, #1
 8002598:	e130      	b.n	80027fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d11b      	bne.n	80025dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
      {
        if (data == PROTOCOL_VER)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2bfe      	cmp	r3, #254	; 0xfe
 80025a8:	d107      	bne.n	80025ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
        {
          mode_++;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80025b8:	e774      	b.n	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80025c8:	f083 0301 	eor.w	r3, r3, #1
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f43f af68 	beq.w	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f915 	bl	8002804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80025da:	e763      	b.n	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d113      	bne.n	800260e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
      {
        bytes_ = data;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 800260c:	e74a      	b.n	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002614:	2b03      	cmp	r3, #3
 8002616:	d110      	bne.n	800263a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
      {
        bytes_ += data << 8;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	441a      	add	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002638:	e734      	b.n	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002640:	2b04      	cmp	r3, #4
 8002642:	d116      	bne.n	8002672 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
      {
        if ((checksum_ % 256) == 255)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800264a:	425a      	negs	r2, r3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	bf58      	it	pl
 8002652:	4253      	negpl	r3, r2
 8002654:	2bff      	cmp	r3, #255	; 0xff
 8002656:	d107      	bne.n	8002668 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002666:	e71d      	b.n	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8002670:	e718      	b.n	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002678:	2b05      	cmp	r3, #5
 800267a:	d10f      	bne.n	800269c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
      {
        topic_ = data;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 800269a:	e703      	b.n	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80026a2:	2b06      	cmp	r3, #6
 80026a4:	d117      	bne.n	80026d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
      {
        topic_ += data << 8;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	441a      	add	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2207      	movs	r2, #7
 80026bc:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f47f aeec 	bne.w	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2208      	movs	r2, #8
 80026d0:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80026d4:	e6e6      	b.n	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80026dc:	2b08      	cmp	r3, #8
 80026de:	f47f aee1 	bne.w	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80026f0:	425a      	negs	r2, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	bf58      	it	pl
 80026f8:	4253      	negpl	r3, r2
 80026fa:	2bff      	cmp	r3, #255	; 0xff
 80026fc:	f47f aed2 	bne.w	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d110      	bne.n	800272c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
          {
            requestSyncTime();
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f87a 	bl	8002804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f894 	bl	800283e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800272a:	e067      	b.n	80027fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002732:	2b0a      	cmp	r3, #10
 8002734:	d106      	bne.n	8002744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ec>
          {
            syncTime(message_in);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3318      	adds	r3, #24
 800273a:	4619      	mov	r1, r3
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f95f 	bl	8002a00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8002742:	e6af      	b.n	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800274a:	2b06      	cmp	r3, #6
 800274c:	d10d      	bne.n	800276a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
          {
            req_param_resp.deserialize(message_in);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3318      	adds	r3, #24
 8002758:	4619      	mov	r1, r3
 800275a:	4610      	mov	r0, r2
 800275c:	f7ff fa3f 	bl	8001bde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8002768:	e69c      	b.n	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002770:	2b0b      	cmp	r3, #11
 8002772:	d104      	bne.n	800277e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x326>
          {
            configured_ = false;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 800277c:	e692      	b.n	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else
          {
            if (subscribers[topic_ - 100])
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002784:	3b64      	subs	r3, #100	; 0x64
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	f43f ae86 	beq.w	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800279e:	3b64      	subs	r3, #100	; 0x64
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	6858      	ldr	r0, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80027b2:	3b64      	subs	r3, #100	; 0x64
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	3218      	adds	r2, #24
 80027c8:	4611      	mov	r1, r2
 80027ca:	4798      	blx	r3
    while (true)
 80027cc:	e66a      	b.n	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80027ce:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00f      	beq.n	80027fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d906      	bls.n	80027fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
    {
      requestSyncTime();
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f809 	bl	8002804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    }

    return SPIN_OK;
 80027fa:	2300      	movs	r3, #0
  }
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:

  /********************************************************************
   * Time functions
   */

  void requestSyncTime()
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  {
    std_msgs::Time t;
 800280c:	f107 030c 	add.w	r3, r7, #12
 8002810:	4618      	mov	r0, r3
 8002812:	f7fe fd4b 	bl	80012ac <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f107 020c 	add.w	r2, r7, #12
 8002820:	210a      	movs	r1, #10
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
    rt_time = hardware_.time();
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3304      	adds	r3, #4
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fbd6 	bl	8001fdc <_ZN13STM32Hardware4timeEv>
 8002830:	4602      	mov	r2, r0
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	609a      	str	r2, [r3, #8]
  }
 8002836:	bf00      	nop
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800283e:	b590      	push	{r4, r7, lr}
 8002840:	b08b      	sub	sp, #44	; 0x2c
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8002846:	f107 030c 	add.w	r3, r7, #12
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe fe1e 	bl	800148c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002850:	2300      	movs	r3, #0
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	2b18      	cmp	r3, #24
 8002858:	dc5b      	bgt.n	8002912 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d04f      	beq.n	800290a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	b29b      	uxth	r3, r3
 800287a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002880:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002890:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8002894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002898:	6859      	ldr	r1, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80028a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3308      	adds	r3, #8
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4608      	mov	r0, r1
 80028b0:	4798      	blx	r3
 80028b2:	4603      	mov	r3, r0
 80028b4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ba:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80028be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c8:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80028cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	330c      	adds	r3, #12
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4608      	mov	r0, r1
 80028da:	4798      	blx	r3
 80028dc:	4603      	mov	r3, r0
 80028de:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80028e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028e4:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681c      	ldr	r4, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f0:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80028f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fb28 	bl	8001f4e <_ZN3ros9Publisher15getEndpointTypeEv>
 80028fe:	4601      	mov	r1, r0
 8002900:	f107 030c 	add.w	r3, r7, #12
 8002904:	461a      	mov	r2, r3
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	3301      	adds	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
 8002910:	e7a0      	b.n	8002854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	2b18      	cmp	r3, #24
 800291a:	dc68      	bgt.n	80029ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d05b      	beq.n	80029e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	b29b      	uxth	r3, r3
 8002940:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	6859      	ldr	r1, [r3, #4]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3308      	adds	r3, #8
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4608      	mov	r0, r1
 8002978:	4798      	blx	r3
 800297a:	4603      	mov	r3, r0
 800297c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	330c      	adds	r3, #12
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4608      	mov	r0, r1
 80029a2:	4798      	blx	r3
 80029a4:	4603      	mov	r3, r0
 80029a6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80029a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ac:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681c      	ldr	r4, [r3, #0]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	6859      	ldr	r1, [r3, #4]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3304      	adds	r3, #4
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4608      	mov	r0, r1
 80029d8:	4798      	blx	r3
 80029da:	4601      	mov	r1, r0
 80029dc:	f107 030c 	add.w	r3, r7, #12
 80029e0:	461a      	mov	r2, r3
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	3301      	adds	r3, #1
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
 80029ec:	e793      	b.n	8002916 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 80029f6:	bf00      	nop
 80029f8:	372c      	adds	r7, #44	; 0x2c
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd90      	pop	{r4, r7, pc}
	...

08002a00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8002a0a:	f107 0308 	add.w	r3, r7, #8
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe fc4c 	bl	80012ac <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fadf 	bl	8001fdc <_ZN13STM32Hardware4timeEv>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002a28:	f107 0308 	add.w	r3, r7, #8
 8002a2c:	6839      	ldr	r1, [r7, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe fcac 	bl	800138c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	4914      	ldr	r1, [pc, #80]	; (8002a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8002a3a:	fba1 1303 	umull	r1, r3, r1, r3
 8002a3e:	099b      	lsrs	r3, r3, #6
 8002a40:	4413      	add	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002a44:	6939      	ldr	r1, [r7, #16]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8002a4a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a4e:	099b      	lsrs	r3, r3, #6
 8002a50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a54:	fb00 f303 	mul.w	r3, r0, r3
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	4a0d      	ldr	r2, [pc, #52]	; (8002a90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	440b      	add	r3, r1
 8002a62:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002a64:	f107 0308 	add.w	r3, r7, #8
 8002a68:	3304      	adds	r3, #4
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f8a3 	bl	8002bb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3304      	adds	r3, #4
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fab0 	bl	8001fdc <_ZN13STM32Hardware4timeEv>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 8002a84:	bf00      	nop
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	10624dd3 	.word	0x10624dd3
 8002a90:	000f4240 	.word	0x000f4240

08002a94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b63      	cmp	r3, #99	; 0x63
 8002aa4:	dd09      	ble.n	8002aba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002aac:	f083 0301 	eor.w	r3, r3, #1
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	e077      	b.n	8002baa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	f502 7206 	add.w	r2, r2, #536	; 0x218
 8002ac6:	3207      	adds	r2, #7
 8002ac8:	4611      	mov	r1, r2
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4798      	blx	r3
 8002ace:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	22ff      	movs	r2, #255	; 0xff
 8002ad4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	22fe      	movs	r2, #254	; 0xfe
 8002adc:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	121b      	asrs	r3, r3, #8
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8002b04:	4413      	add	r3, r2
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	b21b      	sxth	r3, r3
 8002b20:	121b      	asrs	r3, r3, #8
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002b2e:	2305      	movs	r3, #5
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3307      	adds	r3, #7
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	da0d      	bge.n	8002b58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	3301      	adds	r3, #1
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	e7ec      	b.n	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	3307      	adds	r3, #7
 8002b5c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	425a      	negs	r2, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	bf58      	it	pl
 8002b68:	4253      	negpl	r3, r2
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	1c59      	adds	r1, r3, #1
 8002b70:	6179      	str	r1, [r7, #20]
 8002b72:	43d2      	mvns	r2, r2
 8002b74:	b2d1      	uxtb	r1, r2
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4413      	add	r3, r2
 8002b7a:	460a      	mov	r2, r1
 8002b7c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b86:	dc0a      	bgt.n	8002b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	1d18      	adds	r0, r3, #4
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4619      	mov	r1, r3
 8002b96:	f7ff fa0d 	bl	8001fb4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	e005      	b.n	8002baa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002b9e:	4905      	ldr	r1, [pc, #20]	; (8002bb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f85d 	bl	8002c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8002baa:	4618      	mov	r0, r3
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	0800966c 	.word	0x0800966c

08002bb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fa08 	bl	8001fdc <_ZN13STM32Hardware4timeEv>
 8002bcc:	6178      	str	r0, [r7, #20]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	491e      	ldr	r1, [pc, #120]	; (8002c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x98>)
 8002bd6:	fba1 1303 	umull	r1, r3, r1, r3
 8002bda:	099b      	lsrs	r3, r3, #6
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	1e5a      	subs	r2, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x98>)
 8002bec:	fba3 0302 	umull	r0, r3, r3, r2
 8002bf0:	099b      	lsrs	r3, r3, #6
 8002bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bf6:	fb00 f303 	mul.w	r3, r0, r3
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	4a15      	ldr	r2, [pc, #84]	; (8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x9c>)
 8002bfe:	fb02 f303 	mul.w	r3, r2, r3
 8002c02:	1aca      	subs	r2, r1, r3
 8002c04:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0xa0>)
 8002c06:	4413      	add	r3, r2
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6113      	str	r3, [r2, #16]
    uint32_t nsec_part = nsec_offset % 1000000000UL;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	0a5a      	lsrs	r2, r3, #9
 8002c12:	4912      	ldr	r1, [pc, #72]	; (8002c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0xa4>)
 8002c14:	fba1 1202 	umull	r1, r2, r1, r2
 8002c18:	09d2      	lsrs	r2, r2, #7
 8002c1a:	490f      	ldr	r1, [pc, #60]	; (8002c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0xa0>)
 8002c1c:	fb01 f202 	mul.w	r2, r1, r2
 8002c20:	1a9b      	subs	r3, r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
    uint32_t sec_part = nsec_offset / 1000000000UL;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	0a5b      	lsrs	r3, r3, #9
 8002c2a:	4a0c      	ldr	r2, [pc, #48]	; (8002c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0xa4>)
 8002c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c30:	09db      	lsrs	r3, r3, #7
 8002c32:	60fb      	str	r3, [r7, #12]
    nsec_offset = nsec_part;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	611a      	str	r2, [r3, #16]
    sec_offset += sec_part;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	441a      	add	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	60da      	str	r2, [r3, #12]
  }
 8002c46:	bf00      	nop
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	10624dd3 	.word	0x10624dd3
 8002c54:	000f4240 	.word	0x000f4240
 8002c58:	3b9aca00 	.word	0x3b9aca00
 8002c5c:	00044b83 	.word	0x00044b83

08002c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	2103      	movs	r1, #3
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f804 	bl	8002c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	460b      	mov	r3, r1
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002c8a:	f107 0314 	add.w	r3, r7, #20
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fdc0 	bl	8001814 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002c94:	7afb      	ldrb	r3, [r7, #11]
 8002c96:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f107 0214 	add.w	r2, r7, #20
 8002ca6:	2107      	movs	r1, #7
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	4798      	blx	r3
  }
 8002cac:	bf00      	nop
 8002cae:	3720      	adds	r7, #32
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d11c      	bne.n	8002cfe <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d117      	bne.n	8002cfe <_Z41__static_initialization_and_destruction_0ii+0x4a>
ros::NodeHandle  nh;
 8002cce:	480e      	ldr	r0, [pc, #56]	; (8002d08 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002cd0:	f7ff fb10 	bl	80022f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::UInt8 flag;
 8002cd4:	480d      	ldr	r0, [pc, #52]	; (8002d0c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002cd6:	f7fe fa77 	bl	80011c8 <_ZN8std_msgs5UInt8C1Ev>
ros::Subscriber<std_msgs::UInt16> rsub("rpwm", right_cb);
 8002cda:	2301      	movs	r3, #1
 8002cdc:	4a0c      	ldr	r2, [pc, #48]	; (8002d10 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002cde:	490d      	ldr	r1, [pc, #52]	; (8002d14 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002ce0:	480d      	ldr	r0, [pc, #52]	; (8002d18 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002ce2:	f7ff fb95 	bl	8002410 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::UInt16> lsub("lpwm", left_cb);
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	4a0c      	ldr	r2, [pc, #48]	; (8002d1c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002cea:	490d      	ldr	r1, [pc, #52]	; (8002d20 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002cec:	480d      	ldr	r0, [pc, #52]	; (8002d24 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002cee:	f7ff fb8f 	bl	8002410 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei>
ros::Publisher stm32("stm32", &flag);
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	4a05      	ldr	r2, [pc, #20]	; (8002d0c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002cf6:	490c      	ldr	r1, [pc, #48]	; (8002d28 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002cf8:	480c      	ldr	r0, [pc, #48]	; (8002d2c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002cfa:	f7ff f8fd 	bl	8001ef8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000120 	.word	0x20000120
 8002d0c:	20000650 	.word	0x20000650
 8002d10:	08001ff5 	.word	0x08001ff5
 8002d14:	080096a8 	.word	0x080096a8
 8002d18:	20000658 	.word	0x20000658
 8002d1c:	08002019 	.word	0x08002019
 8002d20:	080096b0 	.word	0x080096b0
 8002d24:	20000674 	.word	0x20000674
 8002d28:	080096b8 	.word	0x080096b8
 8002d2c:	20000690 	.word	0x20000690

08002d30 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	6839      	ldr	r1, [r7, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe f9fd 	bl	8001140 <_ZN8std_msgs6UInt1611deserializeEPh>
    this->cb_(msg);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	320c      	adds	r2, #12
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4798      	blx	r3
  }
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
  }
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	330c      	adds	r3, #12
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe fa06 	bl	8001190 <_ZN8std_msgs6UInt167getTypeEv>
 8002d84:	4603      	mov	r3, r0
  }
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	330c      	adds	r3, #12
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe fa06 	bl	80011ac <_ZN8std_msgs6UInt166getMD5Ev>
 8002da0:	4603      	mov	r3, r0
  }
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
    return configured_;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <_GLOBAL__sub_I_UartHandle>:
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002dcc:	2001      	movs	r0, #1
 8002dce:	f7ff ff71 	bl	8002cb4 <_Z41__static_initialization_and_destruction_0ii>
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dda:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <HAL_MspInit+0x50>)
 8002ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dde:	4a11      	ldr	r2, [pc, #68]	; (8002e24 <HAL_MspInit+0x50>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6613      	str	r3, [r2, #96]	; 0x60
 8002de6:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <HAL_MspInit+0x50>)
 8002de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	607b      	str	r3, [r7, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <HAL_MspInit+0x50>)
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df6:	4a0b      	ldr	r2, [pc, #44]	; (8002e24 <HAL_MspInit+0x50>)
 8002df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_MspInit+0x50>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	210f      	movs	r1, #15
 8002e0e:	f06f 0001 	mvn.w	r0, #1
 8002e12:	f000 fd16 	bl	8003842 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002e16:	f001 f89f 	bl	8003f58 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000

08002e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e36:	b480      	push	{r7}
 8002e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e3a:	e7fe      	b.n	8002e3a <HardFault_Handler+0x4>

08002e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e40:	e7fe      	b.n	8002e40 <MemManage_Handler+0x4>

08002e42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e46:	e7fe      	b.n	8002e46 <BusFault_Handler+0x4>

08002e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e4c:	e7fe      	b.n	8002e4c <UsageFault_Handler+0x4>

08002e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e60:	f000 fbf2 	bl	8003648 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002e64:	f005 f98e 	bl	8008184 <xTaskGetSchedulerState>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d001      	beq.n	8002e72 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002e6e:	f005 ff63 	bl	8008d38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0
	return 1;
 8002e7a:	2301      	movs	r3, #1
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <_kill>:

int _kill(int pid, int sig)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e90:	f006 f9d0 	bl	8009234 <__errno>
 8002e94:	4602      	mov	r2, r0
 8002e96:	2316      	movs	r3, #22
 8002e98:	6013      	str	r3, [r2, #0]
	return -1;
 8002e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <_exit>:

void _exit (int status)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002eae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff ffe7 	bl	8002e86 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002eb8:	e7fe      	b.n	8002eb8 <_exit+0x12>
	...

08002ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ec4:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <_sbrk+0x5c>)
 8002ec6:	4b15      	ldr	r3, [pc, #84]	; (8002f1c <_sbrk+0x60>)
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed0:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <_sbrk+0x64>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d102      	bne.n	8002ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <_sbrk+0x64>)
 8002eda:	4a12      	ldr	r2, [pc, #72]	; (8002f24 <_sbrk+0x68>)
 8002edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <_sbrk+0x64>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d207      	bcs.n	8002efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002eec:	f006 f9a2 	bl	8009234 <__errno>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	230c      	movs	r3, #12
 8002ef4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002efa:	e009      	b.n	8002f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002efc:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <_sbrk+0x64>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f02:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <_sbrk+0x64>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	4a05      	ldr	r2, [pc, #20]	; (8002f20 <_sbrk+0x64>)
 8002f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20008000 	.word	0x20008000
 8002f1c:	00000400 	.word	0x00000400
 8002f20:	20000834 	.word	0x20000834
 8002f24:	20002190 	.word	0x20002190

08002f28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f2c:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <SystemInit+0x28>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f32:	4a07      	ldr	r2, [pc, #28]	; (8002f50 <SystemInit+0x28>)
 8002f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f3c:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <SystemInit+0x28>)
 8002f3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f42:	609a      	str	r2, [r3, #8]
#endif
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08a      	sub	sp, #40	; 0x28
 8002f58:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f5a:	f107 031c 	add.w	r3, r7, #28
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f66:	463b      	mov	r3, r7
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	611a      	str	r2, [r3, #16]
 8002f74:	615a      	str	r2, [r3, #20]
 8002f76:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8002f78:	4b35      	ldr	r3, [pc, #212]	; (8003050 <MX_TIM2_Init+0xfc>)
 8002f7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002f80:	4b33      	ldr	r3, [pc, #204]	; (8003050 <MX_TIM2_Init+0xfc>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f86:	4b32      	ldr	r3, [pc, #200]	; (8003050 <MX_TIM2_Init+0xfc>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8002f8c:	4b30      	ldr	r3, [pc, #192]	; (8003050 <MX_TIM2_Init+0xfc>)
 8002f8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f94:	4b2e      	ldr	r3, [pc, #184]	; (8003050 <MX_TIM2_Init+0xfc>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f9a:	4b2d      	ldr	r3, [pc, #180]	; (8003050 <MX_TIM2_Init+0xfc>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002fa0:	482b      	ldr	r0, [pc, #172]	; (8003050 <MX_TIM2_Init+0xfc>)
 8002fa2:	f001 ff64 	bl	8004e6e <HAL_TIM_PWM_Init>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002fac:	f7ff f94a 	bl	8002244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002fb8:	f107 031c 	add.w	r3, r7, #28
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4824      	ldr	r0, [pc, #144]	; (8003050 <MX_TIM2_Init+0xfc>)
 8002fc0:	f002 fc42 	bl	8005848 <HAL_TIMEx_MasterConfigSynchronization>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002fca:	f7ff f93b 	bl	8002244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fce:	2360      	movs	r3, #96	; 0x60
 8002fd0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fde:	463b      	mov	r3, r7
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	481a      	ldr	r0, [pc, #104]	; (8003050 <MX_TIM2_Init+0xfc>)
 8002fe6:	f001 ff99 	bl	8004f1c <HAL_TIM_PWM_ConfigChannel>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002ff0:	f7ff f928 	bl	8002244 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ff8:	463b      	mov	r3, r7
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4814      	ldr	r0, [pc, #80]	; (8003050 <MX_TIM2_Init+0xfc>)
 8003000:	f001 ff8c 	bl	8004f1c <HAL_TIM_PWM_ConfigChannel>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800300a:	f7ff f91b 	bl	8002244 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003012:	463b      	mov	r3, r7
 8003014:	2208      	movs	r2, #8
 8003016:	4619      	mov	r1, r3
 8003018:	480d      	ldr	r0, [pc, #52]	; (8003050 <MX_TIM2_Init+0xfc>)
 800301a:	f001 ff7f 	bl	8004f1c <HAL_TIM_PWM_ConfigChannel>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8003024:	f7ff f90e 	bl	8002244 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800302c:	463b      	mov	r3, r7
 800302e:	220c      	movs	r2, #12
 8003030:	4619      	mov	r1, r3
 8003032:	4807      	ldr	r0, [pc, #28]	; (8003050 <MX_TIM2_Init+0xfc>)
 8003034:	f001 ff72 	bl	8004f1c <HAL_TIM_PWM_ConfigChannel>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800303e:	f7ff f901 	bl	8002244 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8003042:	4803      	ldr	r0, [pc, #12]	; (8003050 <MX_TIM2_Init+0xfc>)
 8003044:	f000 f93a 	bl	80032bc <HAL_TIM_MspPostInit>

}
 8003048:	bf00      	nop
 800304a:	3728      	adds	r7, #40	; 0x28
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	200006f0 	.word	0x200006f0

08003054 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08a      	sub	sp, #40	; 0x28
 8003058:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800305a:	f107 031c 	add.w	r3, r7, #28
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003066:	463b      	mov	r3, r7
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
 8003074:	615a      	str	r2, [r3, #20]
 8003076:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003078:	4b28      	ldr	r3, [pc, #160]	; (800311c <MX_TIM3_Init+0xc8>)
 800307a:	4a29      	ldr	r2, [pc, #164]	; (8003120 <MX_TIM3_Init+0xcc>)
 800307c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 150-1;
 800307e:	4b27      	ldr	r3, [pc, #156]	; (800311c <MX_TIM3_Init+0xc8>)
 8003080:	2295      	movs	r2, #149	; 0x95
 8003082:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003084:	4b25      	ldr	r3, [pc, #148]	; (800311c <MX_TIM3_Init+0xc8>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800308a:	4b24      	ldr	r3, [pc, #144]	; (800311c <MX_TIM3_Init+0xc8>)
 800308c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003090:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003092:	4b22      	ldr	r3, [pc, #136]	; (800311c <MX_TIM3_Init+0xc8>)
 8003094:	2200      	movs	r2, #0
 8003096:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003098:	4b20      	ldr	r3, [pc, #128]	; (800311c <MX_TIM3_Init+0xc8>)
 800309a:	2200      	movs	r2, #0
 800309c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800309e:	481f      	ldr	r0, [pc, #124]	; (800311c <MX_TIM3_Init+0xc8>)
 80030a0:	f001 fee5 	bl	8004e6e <HAL_TIM_PWM_Init>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80030aa:	f7ff f8cb 	bl	8002244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030b6:	f107 031c 	add.w	r3, r7, #28
 80030ba:	4619      	mov	r1, r3
 80030bc:	4817      	ldr	r0, [pc, #92]	; (800311c <MX_TIM3_Init+0xc8>)
 80030be:	f002 fbc3 	bl	8005848 <HAL_TIMEx_MasterConfigSynchronization>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80030c8:	f7ff f8bc 	bl	8002244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030cc:	2360      	movs	r3, #96	; 0x60
 80030ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030d8:	2300      	movs	r3, #0
 80030da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030dc:	463b      	mov	r3, r7
 80030de:	2200      	movs	r2, #0
 80030e0:	4619      	mov	r1, r3
 80030e2:	480e      	ldr	r0, [pc, #56]	; (800311c <MX_TIM3_Init+0xc8>)
 80030e4:	f001 ff1a 	bl	8004f1c <HAL_TIM_PWM_ConfigChannel>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80030ee:	f7ff f8a9 	bl	8002244 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030f6:	463b      	mov	r3, r7
 80030f8:	2208      	movs	r2, #8
 80030fa:	4619      	mov	r1, r3
 80030fc:	4807      	ldr	r0, [pc, #28]	; (800311c <MX_TIM3_Init+0xc8>)
 80030fe:	f001 ff0d 	bl	8004f1c <HAL_TIM_PWM_ConfigChannel>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8003108:	f7ff f89c 	bl	8002244 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800310c:	4803      	ldr	r0, [pc, #12]	; (800311c <MX_TIM3_Init+0xc8>)
 800310e:	f000 f8d5 	bl	80032bc <HAL_TIM_MspPostInit>

}
 8003112:	bf00      	nop
 8003114:	3728      	adds	r7, #40	; 0x28
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	2000073c 	.word	0x2000073c
 8003120:	40000400 	.word	0x40000400

08003124 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b094      	sub	sp, #80	; 0x50
 8003128:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800312a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	605a      	str	r2, [r3, #4]
 8003134:	609a      	str	r2, [r3, #8]
 8003136:	60da      	str	r2, [r3, #12]
 8003138:	611a      	str	r2, [r3, #16]
 800313a:	615a      	str	r2, [r3, #20]
 800313c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800313e:	463b      	mov	r3, r7
 8003140:	2234      	movs	r2, #52	; 0x34
 8003142:	2100      	movs	r1, #0
 8003144:	4618      	mov	r0, r3
 8003146:	f006 f8aa 	bl	800929e <memset>

  htim17.Instance = TIM17;
 800314a:	4b31      	ldr	r3, [pc, #196]	; (8003210 <MX_TIM17_Init+0xec>)
 800314c:	4a31      	ldr	r2, [pc, #196]	; (8003214 <MX_TIM17_Init+0xf0>)
 800314e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8003150:	4b2f      	ldr	r3, [pc, #188]	; (8003210 <MX_TIM17_Init+0xec>)
 8003152:	2200      	movs	r2, #0
 8003154:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003156:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <MX_TIM17_Init+0xec>)
 8003158:	2200      	movs	r2, #0
 800315a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800315c:	4b2c      	ldr	r3, [pc, #176]	; (8003210 <MX_TIM17_Init+0xec>)
 800315e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003162:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003164:	4b2a      	ldr	r3, [pc, #168]	; (8003210 <MX_TIM17_Init+0xec>)
 8003166:	2200      	movs	r2, #0
 8003168:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800316a:	4b29      	ldr	r3, [pc, #164]	; (8003210 <MX_TIM17_Init+0xec>)
 800316c:	2200      	movs	r2, #0
 800316e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003170:	4b27      	ldr	r3, [pc, #156]	; (8003210 <MX_TIM17_Init+0xec>)
 8003172:	2200      	movs	r2, #0
 8003174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003176:	4826      	ldr	r0, [pc, #152]	; (8003210 <MX_TIM17_Init+0xec>)
 8003178:	f001 fe22 	bl	8004dc0 <HAL_TIM_Base_Init>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8003182:	f7ff f85f 	bl	8002244 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8003186:	4822      	ldr	r0, [pc, #136]	; (8003210 <MX_TIM17_Init+0xec>)
 8003188:	f001 fe71 	bl	8004e6e <HAL_TIM_PWM_Init>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8003192:	f7ff f857 	bl	8002244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003196:	2360      	movs	r3, #96	; 0x60
 8003198:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800319e:	2300      	movs	r3, #0
 80031a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80031a2:	2300      	movs	r3, #0
 80031a4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80031aa:	2300      	movs	r3, #0
 80031ac:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80031ae:	2300      	movs	r3, #0
 80031b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031b6:	2200      	movs	r2, #0
 80031b8:	4619      	mov	r1, r3
 80031ba:	4815      	ldr	r0, [pc, #84]	; (8003210 <MX_TIM17_Init+0xec>)
 80031bc:	f001 feae 	bl	8004f1c <HAL_TIM_PWM_ConfigChannel>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80031c6:	f7ff f83d 	bl	8002244 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80031de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031e8:	2300      	movs	r3, #0
 80031ea:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80031ec:	463b      	mov	r3, r7
 80031ee:	4619      	mov	r1, r3
 80031f0:	4807      	ldr	r0, [pc, #28]	; (8003210 <MX_TIM17_Init+0xec>)
 80031f2:	f002 fbab 	bl	800594c <HAL_TIMEx_ConfigBreakDeadTime>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80031fc:	f7ff f822 	bl	8002244 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 8003200:	4803      	ldr	r0, [pc, #12]	; (8003210 <MX_TIM17_Init+0xec>)
 8003202:	f000 f85b 	bl	80032bc <HAL_TIM_MspPostInit>

}
 8003206:	bf00      	nop
 8003208:	3750      	adds	r7, #80	; 0x50
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000788 	.word	0x20000788
 8003214:	40014800 	.word	0x40014800

08003218 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003228:	d10c      	bne.n	8003244 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800322a:	4b12      	ldr	r3, [pc, #72]	; (8003274 <HAL_TIM_PWM_MspInit+0x5c>)
 800322c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322e:	4a11      	ldr	r2, [pc, #68]	; (8003274 <HAL_TIM_PWM_MspInit+0x5c>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6593      	str	r3, [r2, #88]	; 0x58
 8003236:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <HAL_TIM_PWM_MspInit+0x5c>)
 8003238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003242:	e010      	b.n	8003266 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a0b      	ldr	r2, [pc, #44]	; (8003278 <HAL_TIM_PWM_MspInit+0x60>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d10b      	bne.n	8003266 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800324e:	4b09      	ldr	r3, [pc, #36]	; (8003274 <HAL_TIM_PWM_MspInit+0x5c>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003252:	4a08      	ldr	r2, [pc, #32]	; (8003274 <HAL_TIM_PWM_MspInit+0x5c>)
 8003254:	f043 0302 	orr.w	r3, r3, #2
 8003258:	6593      	str	r3, [r2, #88]	; 0x58
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_TIM_PWM_MspInit+0x5c>)
 800325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
}
 8003266:	bf00      	nop
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
 8003278:	40000400 	.word	0x40000400

0800327c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <HAL_TIM_Base_MspInit+0x38>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d10b      	bne.n	80032a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800328e:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <HAL_TIM_Base_MspInit+0x3c>)
 8003290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003292:	4a09      	ldr	r2, [pc, #36]	; (80032b8 <HAL_TIM_Base_MspInit+0x3c>)
 8003294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003298:	6613      	str	r3, [r2, #96]	; 0x60
 800329a:	4b07      	ldr	r3, [pc, #28]	; (80032b8 <HAL_TIM_Base_MspInit+0x3c>)
 800329c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80032a6:	bf00      	nop
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40014800 	.word	0x40014800
 80032b8:	40021000 	.word	0x40021000

080032bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08c      	sub	sp, #48	; 0x30
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c4:	f107 031c 	add.w	r3, r7, #28
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	60da      	str	r2, [r3, #12]
 80032d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032dc:	d11d      	bne.n	800331a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032de:	4b41      	ldr	r3, [pc, #260]	; (80033e4 <HAL_TIM_MspPostInit+0x128>)
 80032e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e2:	4a40      	ldr	r2, [pc, #256]	; (80033e4 <HAL_TIM_MspPostInit+0x128>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032ea:	4b3e      	ldr	r3, [pc, #248]	; (80033e4 <HAL_TIM_MspPostInit+0x128>)
 80032ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	61bb      	str	r3, [r7, #24]
 80032f4:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = thruster1_pin_Pin|thruster2_pin_Pin|thruster3_pin_Pin|thruster4_pin_Pin;
 80032f6:	230f      	movs	r3, #15
 80032f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fa:	2302      	movs	r3, #2
 80032fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003302:	2300      	movs	r3, #0
 8003304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003306:	2301      	movs	r3, #1
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330a:	f107 031c 	add.w	r3, r7, #28
 800330e:	4619      	mov	r1, r3
 8003310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003314:	f000 fabc 	bl	8003890 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003318:	e05f      	b.n	80033da <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM3)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a32      	ldr	r2, [pc, #200]	; (80033e8 <HAL_TIM_MspPostInit+0x12c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d139      	bne.n	8003398 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003324:	4b2f      	ldr	r3, [pc, #188]	; (80033e4 <HAL_TIM_MspPostInit+0x128>)
 8003326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003328:	4a2e      	ldr	r2, [pc, #184]	; (80033e4 <HAL_TIM_MspPostInit+0x128>)
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003330:	4b2c      	ldr	r3, [pc, #176]	; (80033e4 <HAL_TIM_MspPostInit+0x128>)
 8003332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800333c:	4b29      	ldr	r3, [pc, #164]	; (80033e4 <HAL_TIM_MspPostInit+0x128>)
 800333e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003340:	4a28      	ldr	r2, [pc, #160]	; (80033e4 <HAL_TIM_MspPostInit+0x128>)
 8003342:	f043 0302 	orr.w	r3, r3, #2
 8003346:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003348:	4b26      	ldr	r3, [pc, #152]	; (80033e4 <HAL_TIM_MspPostInit+0x128>)
 800334a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = thruster5_pin_Pin;
 8003354:	2340      	movs	r3, #64	; 0x40
 8003356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003358:	2302      	movs	r3, #2
 800335a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335c:	2300      	movs	r3, #0
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003360:	2300      	movs	r3, #0
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003364:	2302      	movs	r3, #2
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(thruster5_pin_GPIO_Port, &GPIO_InitStruct);
 8003368:	f107 031c 	add.w	r3, r7, #28
 800336c:	4619      	mov	r1, r3
 800336e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003372:	f000 fa8d 	bl	8003890 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = thruster6_pin_Pin;
 8003376:	2301      	movs	r3, #1
 8003378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337a:	2302      	movs	r3, #2
 800337c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003382:	2300      	movs	r3, #0
 8003384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003386:	2302      	movs	r3, #2
 8003388:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(thruster6_pin_GPIO_Port, &GPIO_InitStruct);
 800338a:	f107 031c 	add.w	r3, r7, #28
 800338e:	4619      	mov	r1, r3
 8003390:	4816      	ldr	r0, [pc, #88]	; (80033ec <HAL_TIM_MspPostInit+0x130>)
 8003392:	f000 fa7d 	bl	8003890 <HAL_GPIO_Init>
}
 8003396:	e020      	b.n	80033da <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM17)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a14      	ldr	r2, [pc, #80]	; (80033f0 <HAL_TIM_MspPostInit+0x134>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d11b      	bne.n	80033da <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a2:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <HAL_TIM_MspPostInit+0x128>)
 80033a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a6:	4a0f      	ldr	r2, [pc, #60]	; (80033e4 <HAL_TIM_MspPostInit+0x128>)
 80033a8:	f043 0302 	orr.w	r3, r3, #2
 80033ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033ae:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <HAL_TIM_MspPostInit+0x128>)
 80033b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = bilge_pump_pin_Pin;
 80033ba:	2320      	movs	r3, #32
 80033bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033be:	2302      	movs	r3, #2
 80033c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c6:	2300      	movs	r3, #0
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 80033ca:	230a      	movs	r3, #10
 80033cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(bilge_pump_pin_GPIO_Port, &GPIO_InitStruct);
 80033ce:	f107 031c 	add.w	r3, r7, #28
 80033d2:	4619      	mov	r1, r3
 80033d4:	4805      	ldr	r0, [pc, #20]	; (80033ec <HAL_TIM_MspPostInit+0x130>)
 80033d6:	f000 fa5b 	bl	8003890 <HAL_GPIO_Init>
}
 80033da:	bf00      	nop
 80033dc:	3730      	adds	r7, #48	; 0x30
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40000400 	.word	0x40000400
 80033ec:	48000400 	.word	0x48000400
 80033f0:	40014800 	.word	0x40014800

080033f4 <MX_USART2_Init>:

USART_HandleTypeDef husart2;

/* USART2 init function */
void MX_USART2_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0

  husart2.Instance = USART2;
 80033f8:	4b22      	ldr	r3, [pc, #136]	; (8003484 <MX_USART2_Init+0x90>)
 80033fa:	4a23      	ldr	r2, [pc, #140]	; (8003488 <MX_USART2_Init+0x94>)
 80033fc:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80033fe:	4b21      	ldr	r3, [pc, #132]	; (8003484 <MX_USART2_Init+0x90>)
 8003400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003404:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8003406:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <MX_USART2_Init+0x90>)
 8003408:	2200      	movs	r2, #0
 800340a:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 800340c:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <MX_USART2_Init+0x90>)
 800340e:	2200      	movs	r2, #0
 8003410:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8003412:	4b1c      	ldr	r3, [pc, #112]	; (8003484 <MX_USART2_Init+0x90>)
 8003414:	2200      	movs	r2, #0
 8003416:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8003418:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <MX_USART2_Init+0x90>)
 800341a:	220c      	movs	r2, #12
 800341c:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 800341e:	4b19      	ldr	r3, [pc, #100]	; (8003484 <MX_USART2_Init+0x90>)
 8003420:	2200      	movs	r2, #0
 8003422:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8003424:	4b17      	ldr	r3, [pc, #92]	; (8003484 <MX_USART2_Init+0x90>)
 8003426:	2200      	movs	r2, #0
 8003428:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800342a:	4b16      	ldr	r3, [pc, #88]	; (8003484 <MX_USART2_Init+0x90>)
 800342c:	2200      	movs	r2, #0
 800342e:	621a      	str	r2, [r3, #32]
  husart2.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8003430:	4b14      	ldr	r3, [pc, #80]	; (8003484 <MX_USART2_Init+0x90>)
 8003432:	2200      	movs	r2, #0
 8003434:	625a      	str	r2, [r3, #36]	; 0x24
  husart2.SlaveMode = USART_SLAVEMODE_DISABLE;
 8003436:	4b13      	ldr	r3, [pc, #76]	; (8003484 <MX_USART2_Init+0x90>)
 8003438:	2200      	movs	r2, #0
 800343a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart2) != HAL_OK)
 800343c:	4811      	ldr	r0, [pc, #68]	; (8003484 <MX_USART2_Init+0x90>)
 800343e:	f002 fb25 	bl	8005a8c <HAL_USART_Init>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <MX_USART2_Init+0x58>
  {
    Error_Handler();
 8003448:	f7fe fefc 	bl	8002244 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart2, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800344c:	2100      	movs	r1, #0
 800344e:	480d      	ldr	r0, [pc, #52]	; (8003484 <MX_USART2_Init+0x90>)
 8003450:	f003 f8ae 	bl	80065b0 <HAL_USARTEx_SetTxFifoThreshold>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <MX_USART2_Init+0x6a>
  {
    Error_Handler();
 800345a:	f7fe fef3 	bl	8002244 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart2, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800345e:	2100      	movs	r1, #0
 8003460:	4808      	ldr	r0, [pc, #32]	; (8003484 <MX_USART2_Init+0x90>)
 8003462:	f003 f8e3 	bl	800662c <HAL_USARTEx_SetRxFifoThreshold>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <MX_USART2_Init+0x7c>
  {
    Error_Handler();
 800346c:	f7fe feea 	bl	8002244 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart2) != HAL_OK)
 8003470:	4804      	ldr	r0, [pc, #16]	; (8003484 <MX_USART2_Init+0x90>)
 8003472:	f003 f864 	bl	800653e <HAL_USARTEx_DisableFifoMode>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <MX_USART2_Init+0x8c>
  {
    Error_Handler();
 800347c:	f7fe fee2 	bl	8002244 <Error_Handler>
  }

}
 8003480:	bf00      	nop
 8003482:	bd80      	pop	{r7, pc}
 8003484:	200007d4 	.word	0x200007d4
 8003488:	40004400 	.word	0x40004400

0800348c <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	611a      	str	r2, [r3, #16]
  if(usartHandle->Instance==USART2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a26      	ldr	r2, [pc, #152]	; (8003544 <HAL_USART_MspInit+0xb8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d145      	bne.n	800353a <HAL_USART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034ae:	4b26      	ldr	r3, [pc, #152]	; (8003548 <HAL_USART_MspInit+0xbc>)
 80034b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b2:	4a25      	ldr	r2, [pc, #148]	; (8003548 <HAL_USART_MspInit+0xbc>)
 80034b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b8:	6593      	str	r3, [r2, #88]	; 0x58
 80034ba:	4b23      	ldr	r3, [pc, #140]	; (8003548 <HAL_USART_MspInit+0xbc>)
 80034bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c6:	4b20      	ldr	r3, [pc, #128]	; (8003548 <HAL_USART_MspInit+0xbc>)
 80034c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ca:	4a1f      	ldr	r2, [pc, #124]	; (8003548 <HAL_USART_MspInit+0xbc>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034d2:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <HAL_USART_MspInit+0xbc>)
 80034d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034de:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <HAL_USART_MspInit+0xbc>)
 80034e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e2:	4a19      	ldr	r2, [pc, #100]	; (8003548 <HAL_USART_MspInit+0xbc>)
 80034e4:	f043 0302 	orr.w	r3, r3, #2
 80034e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034ea:	4b17      	ldr	r3, [pc, #92]	; (8003548 <HAL_USART_MspInit+0xbc>)
 80034ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA4     ------> USART2_CK
    PA15     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 80034f6:	f248 0310 	movw	r3, #32784	; 0x8010
 80034fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fc:	2302      	movs	r3, #2
 80034fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003500:	2300      	movs	r3, #0
 8003502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003504:	2300      	movs	r3, #0
 8003506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003508:	2307      	movs	r3, #7
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350c:	f107 0314 	add.w	r3, r7, #20
 8003510:	4619      	mov	r1, r3
 8003512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003516:	f000 f9bb 	bl	8003890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800351a:	2308      	movs	r3, #8
 800351c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351e:	2302      	movs	r3, #2
 8003520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003526:	2300      	movs	r3, #0
 8003528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800352a:	2307      	movs	r3, #7
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352e:	f107 0314 	add.w	r3, r7, #20
 8003532:	4619      	mov	r1, r3
 8003534:	4805      	ldr	r0, [pc, #20]	; (800354c <HAL_USART_MspInit+0xc0>)
 8003536:	f000 f9ab 	bl	8003890 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800353a:	bf00      	nop
 800353c:	3728      	adds	r7, #40	; 0x28
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40004400 	.word	0x40004400
 8003548:	40021000 	.word	0x40021000
 800354c:	48000400 	.word	0x48000400

08003550 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003550:	480d      	ldr	r0, [pc, #52]	; (8003588 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003552:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003554:	480d      	ldr	r0, [pc, #52]	; (800358c <LoopForever+0x6>)
  ldr r1, =_edata
 8003556:	490e      	ldr	r1, [pc, #56]	; (8003590 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003558:	4a0e      	ldr	r2, [pc, #56]	; (8003594 <LoopForever+0xe>)
  movs r3, #0
 800355a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800355c:	e002      	b.n	8003564 <LoopCopyDataInit>

0800355e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800355e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003562:	3304      	adds	r3, #4

08003564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003568:	d3f9      	bcc.n	800355e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800356a:	4a0b      	ldr	r2, [pc, #44]	; (8003598 <LoopForever+0x12>)
  ldr r4, =_ebss
 800356c:	4c0b      	ldr	r4, [pc, #44]	; (800359c <LoopForever+0x16>)
  movs r3, #0
 800356e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003570:	e001      	b.n	8003576 <LoopFillZerobss>

08003572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003574:	3204      	adds	r2, #4

08003576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003578:	d3fb      	bcc.n	8003572 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800357a:	f7ff fcd5 	bl	8002f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800357e:	f005 fe5f 	bl	8009240 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003582:	f7fe fd5b 	bl	800203c <main>

08003586 <LoopForever>:

LoopForever:
    b LoopForever
 8003586:	e7fe      	b.n	8003586 <LoopForever>
  ldr   r0, =_estack
 8003588:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800358c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003590:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003594:	08009868 	.word	0x08009868
  ldr r2, =_sbss
 8003598:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800359c:	20002190 	.word	0x20002190

080035a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80035a0:	e7fe      	b.n	80035a0 <ADC1_2_IRQHandler>

080035a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035ac:	2003      	movs	r0, #3
 80035ae:	f000 f93d 	bl	800382c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035b2:	200f      	movs	r0, #15
 80035b4:	f000 f80e 	bl	80035d4 <HAL_InitTick>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	71fb      	strb	r3, [r7, #7]
 80035c2:	e001      	b.n	80035c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035c4:	f7ff fc06 	bl	8002dd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035c8:	79fb      	ldrb	r3, [r7, #7]

}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80035dc:	2300      	movs	r3, #0
 80035de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80035e0:	4b16      	ldr	r3, [pc, #88]	; (800363c <HAL_InitTick+0x68>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d022      	beq.n	800362e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80035e8:	4b15      	ldr	r3, [pc, #84]	; (8003640 <HAL_InitTick+0x6c>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b13      	ldr	r3, [pc, #76]	; (800363c <HAL_InitTick+0x68>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80035f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80035f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 f93a 	bl	8003876 <HAL_SYSTICK_Config>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10f      	bne.n	8003628 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b0f      	cmp	r3, #15
 800360c:	d809      	bhi.n	8003622 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800360e:	2200      	movs	r2, #0
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003616:	f000 f914 	bl	8003842 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800361a:	4a0a      	ldr	r2, [pc, #40]	; (8003644 <HAL_InitTick+0x70>)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	e007      	b.n	8003632 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	73fb      	strb	r3, [r7, #15]
 8003626:	e004      	b.n	8003632 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
 800362c:	e001      	b.n	8003632 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003632:	7bfb      	ldrb	r3, [r7, #15]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20000018 	.word	0x20000018
 8003640:	20000010 	.word	0x20000010
 8003644:	20000014 	.word	0x20000014

08003648 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_IncTick+0x1c>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_IncTick+0x20>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4413      	add	r3, r2
 8003656:	4a03      	ldr	r2, [pc, #12]	; (8003664 <HAL_IncTick+0x1c>)
 8003658:	6013      	str	r3, [r2, #0]
}
 800365a:	bf00      	nop
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	20002148 	.word	0x20002148
 8003668:	20000018 	.word	0x20000018

0800366c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return uwTick;
 8003670:	4b03      	ldr	r3, [pc, #12]	; (8003680 <HAL_GetTick+0x14>)
 8003672:	681b      	ldr	r3, [r3, #0]
}
 8003674:	4618      	mov	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20002148 	.word	0x20002148

08003684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800368c:	f7ff ffee 	bl	800366c <HAL_GetTick>
 8003690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800369c:	d004      	beq.n	80036a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_Delay+0x40>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4413      	add	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036a8:	bf00      	nop
 80036aa:	f7ff ffdf 	bl	800366c <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d8f7      	bhi.n	80036aa <HAL_Delay+0x26>
  {
  }
}
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000018 	.word	0x20000018

080036c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036d8:	4b0c      	ldr	r3, [pc, #48]	; (800370c <__NVIC_SetPriorityGrouping+0x44>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036e4:	4013      	ands	r3, r2
 80036e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036fa:	4a04      	ldr	r2, [pc, #16]	; (800370c <__NVIC_SetPriorityGrouping+0x44>)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	60d3      	str	r3, [r2, #12]
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	e000ed00 	.word	0xe000ed00

08003710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003714:	4b04      	ldr	r3, [pc, #16]	; (8003728 <__NVIC_GetPriorityGrouping+0x18>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	0a1b      	lsrs	r3, r3, #8
 800371a:	f003 0307 	and.w	r3, r3, #7
}
 800371e:	4618      	mov	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	6039      	str	r1, [r7, #0]
 8003736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373c:	2b00      	cmp	r3, #0
 800373e:	db0a      	blt.n	8003756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	b2da      	uxtb	r2, r3
 8003744:	490c      	ldr	r1, [pc, #48]	; (8003778 <__NVIC_SetPriority+0x4c>)
 8003746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374a:	0112      	lsls	r2, r2, #4
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	440b      	add	r3, r1
 8003750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003754:	e00a      	b.n	800376c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4908      	ldr	r1, [pc, #32]	; (800377c <__NVIC_SetPriority+0x50>)
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	3b04      	subs	r3, #4
 8003764:	0112      	lsls	r2, r2, #4
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	440b      	add	r3, r1
 800376a:	761a      	strb	r2, [r3, #24]
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	e000e100 	.word	0xe000e100
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003780:	b480      	push	{r7}
 8003782:	b089      	sub	sp, #36	; 0x24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f1c3 0307 	rsb	r3, r3, #7
 800379a:	2b04      	cmp	r3, #4
 800379c:	bf28      	it	cs
 800379e:	2304      	movcs	r3, #4
 80037a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d902      	bls.n	80037b0 <NVIC_EncodePriority+0x30>
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3b03      	subs	r3, #3
 80037ae:	e000      	b.n	80037b2 <NVIC_EncodePriority+0x32>
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43da      	mvns	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	401a      	ands	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	fa01 f303 	lsl.w	r3, r1, r3
 80037d2:	43d9      	mvns	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d8:	4313      	orrs	r3, r2
         );
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3724      	adds	r7, #36	; 0x24
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037f8:	d301      	bcc.n	80037fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037fa:	2301      	movs	r3, #1
 80037fc:	e00f      	b.n	800381e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037fe:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <SysTick_Config+0x40>)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3b01      	subs	r3, #1
 8003804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003806:	210f      	movs	r1, #15
 8003808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800380c:	f7ff ff8e 	bl	800372c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <SysTick_Config+0x40>)
 8003812:	2200      	movs	r2, #0
 8003814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003816:	4b04      	ldr	r3, [pc, #16]	; (8003828 <SysTick_Config+0x40>)
 8003818:	2207      	movs	r2, #7
 800381a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	e000e010 	.word	0xe000e010

0800382c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ff47 	bl	80036c8 <__NVIC_SetPriorityGrouping>
}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b086      	sub	sp, #24
 8003846:	af00      	add	r7, sp, #0
 8003848:	4603      	mov	r3, r0
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
 800384e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003850:	f7ff ff5e 	bl	8003710 <__NVIC_GetPriorityGrouping>
 8003854:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	6978      	ldr	r0, [r7, #20]
 800385c:	f7ff ff90 	bl	8003780 <NVIC_EncodePriority>
 8003860:	4602      	mov	r2, r0
 8003862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003866:	4611      	mov	r1, r2
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff ff5f 	bl	800372c <__NVIC_SetPriority>
}
 800386e:	bf00      	nop
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff ffb2 	bl	80037e8 <SysTick_Config>
 8003884:	4603      	mov	r3, r0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800389e:	e15a      	b.n	8003b56 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	2101      	movs	r1, #1
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	fa01 f303 	lsl.w	r3, r1, r3
 80038ac:	4013      	ands	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 814c 	beq.w	8003b50 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d00b      	beq.n	80038d8 <HAL_GPIO_Init+0x48>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d007      	beq.n	80038d8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038cc:	2b11      	cmp	r3, #17
 80038ce:	d003      	beq.n	80038d8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b12      	cmp	r3, #18
 80038d6:	d130      	bne.n	800393a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	2203      	movs	r2, #3
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4013      	ands	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800390e:	2201      	movs	r2, #1
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43db      	mvns	r3, r3
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4013      	ands	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	091b      	lsrs	r3, r3, #4
 8003924:	f003 0201 	and.w	r2, r3, #1
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	2203      	movs	r2, #3
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4013      	ands	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d003      	beq.n	800397a <HAL_GPIO_Init+0xea>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b12      	cmp	r3, #18
 8003978:	d123      	bne.n	80039c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	08da      	lsrs	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3208      	adds	r2, #8
 8003982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003986:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	220f      	movs	r2, #15
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43db      	mvns	r3, r3
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4013      	ands	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	691a      	ldr	r2, [r3, #16]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	08da      	lsrs	r2, r3, #3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3208      	adds	r2, #8
 80039bc:	6939      	ldr	r1, [r7, #16]
 80039be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	2203      	movs	r2, #3
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43db      	mvns	r3, r3
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4013      	ands	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f003 0203 	and.w	r2, r3, #3
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 80a6 	beq.w	8003b50 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a04:	4b5b      	ldr	r3, [pc, #364]	; (8003b74 <HAL_GPIO_Init+0x2e4>)
 8003a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a08:	4a5a      	ldr	r2, [pc, #360]	; (8003b74 <HAL_GPIO_Init+0x2e4>)
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	6613      	str	r3, [r2, #96]	; 0x60
 8003a10:	4b58      	ldr	r3, [pc, #352]	; (8003b74 <HAL_GPIO_Init+0x2e4>)
 8003a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a1c:	4a56      	ldr	r2, [pc, #344]	; (8003b78 <HAL_GPIO_Init+0x2e8>)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	089b      	lsrs	r3, r3, #2
 8003a22:	3302      	adds	r3, #2
 8003a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	220f      	movs	r2, #15
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a46:	d01f      	beq.n	8003a88 <HAL_GPIO_Init+0x1f8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a4c      	ldr	r2, [pc, #304]	; (8003b7c <HAL_GPIO_Init+0x2ec>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d019      	beq.n	8003a84 <HAL_GPIO_Init+0x1f4>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a4b      	ldr	r2, [pc, #300]	; (8003b80 <HAL_GPIO_Init+0x2f0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d013      	beq.n	8003a80 <HAL_GPIO_Init+0x1f0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a4a      	ldr	r2, [pc, #296]	; (8003b84 <HAL_GPIO_Init+0x2f4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00d      	beq.n	8003a7c <HAL_GPIO_Init+0x1ec>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a49      	ldr	r2, [pc, #292]	; (8003b88 <HAL_GPIO_Init+0x2f8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d007      	beq.n	8003a78 <HAL_GPIO_Init+0x1e8>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a48      	ldr	r2, [pc, #288]	; (8003b8c <HAL_GPIO_Init+0x2fc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d101      	bne.n	8003a74 <HAL_GPIO_Init+0x1e4>
 8003a70:	2305      	movs	r3, #5
 8003a72:	e00a      	b.n	8003a8a <HAL_GPIO_Init+0x1fa>
 8003a74:	2306      	movs	r3, #6
 8003a76:	e008      	b.n	8003a8a <HAL_GPIO_Init+0x1fa>
 8003a78:	2304      	movs	r3, #4
 8003a7a:	e006      	b.n	8003a8a <HAL_GPIO_Init+0x1fa>
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e004      	b.n	8003a8a <HAL_GPIO_Init+0x1fa>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e002      	b.n	8003a8a <HAL_GPIO_Init+0x1fa>
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <HAL_GPIO_Init+0x1fa>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	f002 0203 	and.w	r2, r2, #3
 8003a90:	0092      	lsls	r2, r2, #2
 8003a92:	4093      	lsls	r3, r2
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a9a:	4937      	ldr	r1, [pc, #220]	; (8003b78 <HAL_GPIO_Init+0x2e8>)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	089b      	lsrs	r3, r3, #2
 8003aa0:	3302      	adds	r3, #2
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003aa8:	4b39      	ldr	r3, [pc, #228]	; (8003b90 <HAL_GPIO_Init+0x300>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003acc:	4a30      	ldr	r2, [pc, #192]	; (8003b90 <HAL_GPIO_Init+0x300>)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003ad2:	4b2f      	ldr	r3, [pc, #188]	; (8003b90 <HAL_GPIO_Init+0x300>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	43db      	mvns	r3, r3
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003af6:	4a26      	ldr	r2, [pc, #152]	; (8003b90 <HAL_GPIO_Init+0x300>)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003afc:	4b24      	ldr	r3, [pc, #144]	; (8003b90 <HAL_GPIO_Init+0x300>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b20:	4a1b      	ldr	r2, [pc, #108]	; (8003b90 <HAL_GPIO_Init+0x300>)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b26:	4b1a      	ldr	r3, [pc, #104]	; (8003b90 <HAL_GPIO_Init+0x300>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4013      	ands	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b4a:	4a11      	ldr	r2, [pc, #68]	; (8003b90 <HAL_GPIO_Init+0x300>)
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	3301      	adds	r3, #1
 8003b54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f47f ae9d 	bne.w	80038a0 <HAL_GPIO_Init+0x10>
  }
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40010000 	.word	0x40010000
 8003b7c:	48000400 	.word	0x48000400
 8003b80:	48000800 	.word	0x48000800
 8003b84:	48000c00 	.word	0x48000c00
 8003b88:	48001000 	.word	0x48001000
 8003b8c:	48001400 	.word	0x48001400
 8003b90:	40010400 	.word	0x40010400

08003b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	807b      	strh	r3, [r7, #2]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ba4:	787b      	ldrb	r3, [r7, #1]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003baa:	887a      	ldrh	r2, [r7, #2]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bb0:	e002      	b.n	8003bb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e081      	b.n	8003cda <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fd fa1c 	bl	8001028 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2224      	movs	r2, #36	; 0x24
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0201 	bic.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d107      	bne.n	8003c3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c3a:	609a      	str	r2, [r3, #8]
 8003c3c:	e006      	b.n	8003c4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d104      	bne.n	8003c5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6812      	ldr	r2, [r2, #0]
 8003c68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691a      	ldr	r2, [r3, #16]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	ea42 0103 	orr.w	r1, r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	021a      	lsls	r2, r3, #8
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69d9      	ldr	r1, [r3, #28]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1a      	ldr	r2, [r3, #32]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d138      	bne.n	8003d6a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d02:	2302      	movs	r3, #2
 8003d04:	e032      	b.n	8003d6c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2224      	movs	r2, #36	; 0x24
 8003d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0201 	bic.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d34:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6819      	ldr	r1, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	e000      	b.n	8003d6c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d6a:	2302      	movs	r3, #2
  }
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b20      	cmp	r3, #32
 8003d8c:	d139      	bne.n	8003e02 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e033      	b.n	8003e04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2224      	movs	r2, #36	; 0x24
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0201 	bic.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003dca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	021b      	lsls	r3, r3, #8
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0201 	orr.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e000      	b.n	8003e04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e02:	2302      	movs	r3, #2
  }
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d141      	bne.n	8003ea2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e1e:	4b4b      	ldr	r3, [pc, #300]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2a:	d131      	bne.n	8003e90 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e2c:	4b47      	ldr	r3, [pc, #284]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e32:	4a46      	ldr	r2, [pc, #280]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e3c:	4b43      	ldr	r3, [pc, #268]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e44:	4a41      	ldr	r2, [pc, #260]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e4c:	4b40      	ldr	r3, [pc, #256]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2232      	movs	r2, #50	; 0x32
 8003e52:	fb02 f303 	mul.w	r3, r2, r3
 8003e56:	4a3f      	ldr	r2, [pc, #252]	; (8003f54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e58:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5c:	0c9b      	lsrs	r3, r3, #18
 8003e5e:	3301      	adds	r3, #1
 8003e60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e62:	e002      	b.n	8003e6a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e6a:	4b38      	ldr	r3, [pc, #224]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e76:	d102      	bne.n	8003e7e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f2      	bne.n	8003e64 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e7e:	4b33      	ldr	r3, [pc, #204]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e8a:	d158      	bne.n	8003f3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e057      	b.n	8003f40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e90:	4b2e      	ldr	r3, [pc, #184]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e96:	4a2d      	ldr	r2, [pc, #180]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ea0:	e04d      	b.n	8003f3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea8:	d141      	bne.n	8003f2e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003eaa:	4b28      	ldr	r3, [pc, #160]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb6:	d131      	bne.n	8003f1c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003eb8:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ebe:	4a23      	ldr	r2, [pc, #140]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ec8:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ed0:	4a1e      	ldr	r2, [pc, #120]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ed6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ed8:	4b1d      	ldr	r3, [pc, #116]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2232      	movs	r2, #50	; 0x32
 8003ede:	fb02 f303 	mul.w	r3, r2, r3
 8003ee2:	4a1c      	ldr	r2, [pc, #112]	; (8003f54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee8:	0c9b      	lsrs	r3, r3, #18
 8003eea:	3301      	adds	r3, #1
 8003eec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eee:	e002      	b.n	8003ef6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ef6:	4b15      	ldr	r3, [pc, #84]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f02:	d102      	bne.n	8003f0a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f2      	bne.n	8003ef0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f0a:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f16:	d112      	bne.n	8003f3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e011      	b.n	8003f40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f22:	4a0a      	ldr	r2, [pc, #40]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f2c:	e007      	b.n	8003f3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f2e:	4b07      	ldr	r3, [pc, #28]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f36:	4a05      	ldr	r2, [pc, #20]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f3c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	40007000 	.word	0x40007000
 8003f50:	20000010 	.word	0x20000010
 8003f54:	431bde83 	.word	0x431bde83

08003f58 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003f5c:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	4a04      	ldr	r2, [pc, #16]	; (8003f74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f66:	6093      	str	r3, [r2, #8]
}
 8003f68:	bf00      	nop
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40007000 	.word	0x40007000

08003f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e308      	b.n	800459c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d075      	beq.n	8004082 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f96:	4ba3      	ldr	r3, [pc, #652]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fa0:	4ba0      	ldr	r3, [pc, #640]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f003 0303 	and.w	r3, r3, #3
 8003fa8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	2b0c      	cmp	r3, #12
 8003fae:	d102      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x3e>
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d002      	beq.n	8003fbc <HAL_RCC_OscConfig+0x44>
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d10b      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fbc:	4b99      	ldr	r3, [pc, #612]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d05b      	beq.n	8004080 <HAL_RCC_OscConfig+0x108>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d157      	bne.n	8004080 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e2e3      	b.n	800459c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fdc:	d106      	bne.n	8003fec <HAL_RCC_OscConfig+0x74>
 8003fde:	4b91      	ldr	r3, [pc, #580]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a90      	ldr	r2, [pc, #576]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e01d      	b.n	8004028 <HAL_RCC_OscConfig+0xb0>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ff4:	d10c      	bne.n	8004010 <HAL_RCC_OscConfig+0x98>
 8003ff6:	4b8b      	ldr	r3, [pc, #556]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a8a      	ldr	r2, [pc, #552]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8003ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	4b88      	ldr	r3, [pc, #544]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a87      	ldr	r2, [pc, #540]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8004008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	e00b      	b.n	8004028 <HAL_RCC_OscConfig+0xb0>
 8004010:	4b84      	ldr	r3, [pc, #528]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a83      	ldr	r2, [pc, #524]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8004016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	4b81      	ldr	r3, [pc, #516]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a80      	ldr	r2, [pc, #512]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8004022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d013      	beq.n	8004058 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7ff fb1c 	bl	800366c <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004038:	f7ff fb18 	bl	800366c <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b64      	cmp	r3, #100	; 0x64
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e2a8      	b.n	800459c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800404a:	4b76      	ldr	r3, [pc, #472]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCC_OscConfig+0xc0>
 8004056:	e014      	b.n	8004082 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004058:	f7ff fb08 	bl	800366c <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004060:	f7ff fb04 	bl	800366c <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b64      	cmp	r3, #100	; 0x64
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e294      	b.n	800459c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004072:	4b6c      	ldr	r3, [pc, #432]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0xe8>
 800407e:	e000      	b.n	8004082 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d075      	beq.n	800417a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800408e:	4b65      	ldr	r3, [pc, #404]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004098:	4b62      	ldr	r3, [pc, #392]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b0c      	cmp	r3, #12
 80040a6:	d102      	bne.n	80040ae <HAL_RCC_OscConfig+0x136>
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d002      	beq.n	80040b4 <HAL_RCC_OscConfig+0x13c>
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d11f      	bne.n	80040f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040b4:	4b5b      	ldr	r3, [pc, #364]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_OscConfig+0x154>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e267      	b.n	800459c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040cc:	4b55      	ldr	r3, [pc, #340]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	061b      	lsls	r3, r3, #24
 80040da:	4952      	ldr	r1, [pc, #328]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040e0:	4b51      	ldr	r3, [pc, #324]	; (8004228 <HAL_RCC_OscConfig+0x2b0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff fa75 	bl	80035d4 <HAL_InitTick>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d043      	beq.n	8004178 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e253      	b.n	800459c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d023      	beq.n	8004144 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040fc:	4b49      	ldr	r3, [pc, #292]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a48      	ldr	r2, [pc, #288]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8004102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7ff fab0 	bl	800366c <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004110:	f7ff faac 	bl	800366c <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e23c      	b.n	800459c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004122:	4b40      	ldr	r3, [pc, #256]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800412e:	4b3d      	ldr	r3, [pc, #244]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	061b      	lsls	r3, r3, #24
 800413c:	4939      	ldr	r1, [pc, #228]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 800413e:	4313      	orrs	r3, r2
 8004140:	604b      	str	r3, [r1, #4]
 8004142:	e01a      	b.n	800417a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004144:	4b37      	ldr	r3, [pc, #220]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a36      	ldr	r2, [pc, #216]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 800414a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800414e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7ff fa8c 	bl	800366c <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004158:	f7ff fa88 	bl	800366c <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e218      	b.n	800459c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800416a:	4b2e      	ldr	r3, [pc, #184]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0x1e0>
 8004176:	e000      	b.n	800417a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004178:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d03c      	beq.n	8004200 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d01c      	beq.n	80041c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800418e:	4b25      	ldr	r3, [pc, #148]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8004190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004194:	4a23      	ldr	r2, [pc, #140]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8004196:	f043 0301 	orr.w	r3, r3, #1
 800419a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419e:	f7ff fa65 	bl	800366c <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041a6:	f7ff fa61 	bl	800366c <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e1f1      	b.n	800459c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041b8:	4b1a      	ldr	r3, [pc, #104]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 80041ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0ef      	beq.n	80041a6 <HAL_RCC_OscConfig+0x22e>
 80041c6:	e01b      	b.n	8004200 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041c8:	4b16      	ldr	r3, [pc, #88]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 80041ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ce:	4a15      	ldr	r2, [pc, #84]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 80041d0:	f023 0301 	bic.w	r3, r3, #1
 80041d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d8:	f7ff fa48 	bl	800366c <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041e0:	f7ff fa44 	bl	800366c <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e1d4      	b.n	800459c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041f2:	4b0c      	ldr	r3, [pc, #48]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1ef      	bne.n	80041e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80ab 	beq.w	8004364 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800420e:	2300      	movs	r3, #0
 8004210:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004212:	4b04      	ldr	r3, [pc, #16]	; (8004224 <HAL_RCC_OscConfig+0x2ac>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_RCC_OscConfig+0x2b4>
 800421e:	2301      	movs	r3, #1
 8004220:	e005      	b.n	800422e <HAL_RCC_OscConfig+0x2b6>
 8004222:	bf00      	nop
 8004224:	40021000 	.word	0x40021000
 8004228:	20000014 	.word	0x20000014
 800422c:	2300      	movs	r3, #0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00d      	beq.n	800424e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	4baf      	ldr	r3, [pc, #700]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 8004234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004236:	4aae      	ldr	r2, [pc, #696]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 8004238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423c:	6593      	str	r3, [r2, #88]	; 0x58
 800423e:	4bac      	ldr	r3, [pc, #688]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800424a:	2301      	movs	r3, #1
 800424c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800424e:	4ba9      	ldr	r3, [pc, #676]	; (80044f4 <HAL_RCC_OscConfig+0x57c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d118      	bne.n	800428c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800425a:	4ba6      	ldr	r3, [pc, #664]	; (80044f4 <HAL_RCC_OscConfig+0x57c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4aa5      	ldr	r2, [pc, #660]	; (80044f4 <HAL_RCC_OscConfig+0x57c>)
 8004260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004266:	f7ff fa01 	bl	800366c <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426e:	f7ff f9fd 	bl	800366c <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e18d      	b.n	800459c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004280:	4b9c      	ldr	r3, [pc, #624]	; (80044f4 <HAL_RCC_OscConfig+0x57c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d108      	bne.n	80042a6 <HAL_RCC_OscConfig+0x32e>
 8004294:	4b96      	ldr	r3, [pc, #600]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429a:	4a95      	ldr	r2, [pc, #596]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042a4:	e024      	b.n	80042f0 <HAL_RCC_OscConfig+0x378>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b05      	cmp	r3, #5
 80042ac:	d110      	bne.n	80042d0 <HAL_RCC_OscConfig+0x358>
 80042ae:	4b90      	ldr	r3, [pc, #576]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b4:	4a8e      	ldr	r2, [pc, #568]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 80042b6:	f043 0304 	orr.w	r3, r3, #4
 80042ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042be:	4b8c      	ldr	r3, [pc, #560]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 80042c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c4:	4a8a      	ldr	r2, [pc, #552]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042ce:	e00f      	b.n	80042f0 <HAL_RCC_OscConfig+0x378>
 80042d0:	4b87      	ldr	r3, [pc, #540]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d6:	4a86      	ldr	r2, [pc, #536]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 80042d8:	f023 0301 	bic.w	r3, r3, #1
 80042dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042e0:	4b83      	ldr	r3, [pc, #524]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	4a82      	ldr	r2, [pc, #520]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 80042e8:	f023 0304 	bic.w	r3, r3, #4
 80042ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d016      	beq.n	8004326 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f8:	f7ff f9b8 	bl	800366c <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042fe:	e00a      	b.n	8004316 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004300:	f7ff f9b4 	bl	800366c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f241 3288 	movw	r2, #5000	; 0x1388
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e142      	b.n	800459c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004316:	4b76      	ldr	r3, [pc, #472]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 8004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0ed      	beq.n	8004300 <HAL_RCC_OscConfig+0x388>
 8004324:	e015      	b.n	8004352 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004326:	f7ff f9a1 	bl	800366c <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800432c:	e00a      	b.n	8004344 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432e:	f7ff f99d 	bl	800366c <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	f241 3288 	movw	r2, #5000	; 0x1388
 800433c:	4293      	cmp	r3, r2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e12b      	b.n	800459c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004344:	4b6a      	ldr	r3, [pc, #424]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1ed      	bne.n	800432e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004352:	7ffb      	ldrb	r3, [r7, #31]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d105      	bne.n	8004364 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004358:	4b65      	ldr	r3, [pc, #404]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 800435a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435c:	4a64      	ldr	r2, [pc, #400]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 800435e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004362:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0320 	and.w	r3, r3, #32
 800436c:	2b00      	cmp	r3, #0
 800436e:	d03c      	beq.n	80043ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01c      	beq.n	80043b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004378:	4b5d      	ldr	r3, [pc, #372]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 800437a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800437e:	4a5c      	ldr	r2, [pc, #368]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 8004380:	f043 0301 	orr.w	r3, r3, #1
 8004384:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004388:	f7ff f970 	bl	800366c <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004390:	f7ff f96c 	bl	800366c <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e0fc      	b.n	800459c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043a2:	4b53      	ldr	r3, [pc, #332]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 80043a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0ef      	beq.n	8004390 <HAL_RCC_OscConfig+0x418>
 80043b0:	e01b      	b.n	80043ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043b2:	4b4f      	ldr	r3, [pc, #316]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 80043b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043b8:	4a4d      	ldr	r2, [pc, #308]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 80043ba:	f023 0301 	bic.w	r3, r3, #1
 80043be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c2:	f7ff f953 	bl	800366c <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043ca:	f7ff f94f 	bl	800366c <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e0df      	b.n	800459c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043dc:	4b44      	ldr	r3, [pc, #272]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 80043de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1ef      	bne.n	80043ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 80d3 	beq.w	800459a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043f4:	4b3e      	ldr	r3, [pc, #248]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 030c 	and.w	r3, r3, #12
 80043fc:	2b0c      	cmp	r3, #12
 80043fe:	f000 808d 	beq.w	800451c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d15a      	bne.n	80044c0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440a:	4b39      	ldr	r3, [pc, #228]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a38      	ldr	r2, [pc, #224]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 8004410:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004416:	f7ff f929 	bl	800366c <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441e:	f7ff f925 	bl	800366c <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e0b5      	b.n	800459c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004430:	4b2f      	ldr	r3, [pc, #188]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1f0      	bne.n	800441e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800443c:	4b2c      	ldr	r3, [pc, #176]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	4b2d      	ldr	r3, [pc, #180]	; (80044f8 <HAL_RCC_OscConfig+0x580>)
 8004442:	4013      	ands	r3, r2
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6a11      	ldr	r1, [r2, #32]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800444c:	3a01      	subs	r2, #1
 800444e:	0112      	lsls	r2, r2, #4
 8004450:	4311      	orrs	r1, r2
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004456:	0212      	lsls	r2, r2, #8
 8004458:	4311      	orrs	r1, r2
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800445e:	0852      	lsrs	r2, r2, #1
 8004460:	3a01      	subs	r2, #1
 8004462:	0552      	lsls	r2, r2, #21
 8004464:	4311      	orrs	r1, r2
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800446a:	0852      	lsrs	r2, r2, #1
 800446c:	3a01      	subs	r2, #1
 800446e:	0652      	lsls	r2, r2, #25
 8004470:	4311      	orrs	r1, r2
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004476:	06d2      	lsls	r2, r2, #27
 8004478:	430a      	orrs	r2, r1
 800447a:	491d      	ldr	r1, [pc, #116]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 800447c:	4313      	orrs	r3, r2
 800447e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004480:	4b1b      	ldr	r3, [pc, #108]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1a      	ldr	r2, [pc, #104]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 8004486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800448a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800448c:	4b18      	ldr	r3, [pc, #96]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	4a17      	ldr	r2, [pc, #92]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 8004492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004496:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7ff f8e8 	bl	800366c <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a0:	f7ff f8e4 	bl	800366c <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e074      	b.n	800459c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b2:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0x528>
 80044be:	e06c      	b.n	800459a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a0a      	ldr	r2, [pc, #40]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 80044c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80044cc:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	4a07      	ldr	r2, [pc, #28]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 80044d2:	f023 0303 	bic.w	r3, r3, #3
 80044d6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	4a04      	ldr	r2, [pc, #16]	; (80044f0 <HAL_RCC_OscConfig+0x578>)
 80044de:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80044e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e8:	f7ff f8c0 	bl	800366c <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ee:	e00e      	b.n	800450e <HAL_RCC_OscConfig+0x596>
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40007000 	.word	0x40007000
 80044f8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044fc:	f7ff f8b6 	bl	800366c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e046      	b.n	800459c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800450e:	4b25      	ldr	r3, [pc, #148]	; (80045a4 <HAL_RCC_OscConfig+0x62c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x584>
 800451a:	e03e      	b.n	800459a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e039      	b.n	800459c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004528:	4b1e      	ldr	r3, [pc, #120]	; (80045a4 <HAL_RCC_OscConfig+0x62c>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f003 0203 	and.w	r2, r3, #3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	429a      	cmp	r2, r3
 800453a:	d12c      	bne.n	8004596 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	3b01      	subs	r3, #1
 8004548:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454a:	429a      	cmp	r2, r3
 800454c:	d123      	bne.n	8004596 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004558:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800455a:	429a      	cmp	r2, r3
 800455c:	d11b      	bne.n	8004596 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800456a:	429a      	cmp	r2, r3
 800456c:	d113      	bne.n	8004596 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004578:	085b      	lsrs	r3, r3, #1
 800457a:	3b01      	subs	r3, #1
 800457c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800457e:	429a      	cmp	r2, r3
 8004580:	d109      	bne.n	8004596 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458c:	085b      	lsrs	r3, r3, #1
 800458e:	3b01      	subs	r3, #1
 8004590:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004592:	429a      	cmp	r2, r3
 8004594:	d001      	beq.n	800459a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3720      	adds	r7, #32
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40021000 	.word	0x40021000

080045a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e11e      	b.n	80047fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045c0:	4b91      	ldr	r3, [pc, #580]	; (8004808 <HAL_RCC_ClockConfig+0x260>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d910      	bls.n	80045f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ce:	4b8e      	ldr	r3, [pc, #568]	; (8004808 <HAL_RCC_ClockConfig+0x260>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f023 020f 	bic.w	r2, r3, #15
 80045d6:	498c      	ldr	r1, [pc, #560]	; (8004808 <HAL_RCC_ClockConfig+0x260>)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	4313      	orrs	r3, r2
 80045dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045de:	4b8a      	ldr	r3, [pc, #552]	; (8004808 <HAL_RCC_ClockConfig+0x260>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d001      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e106      	b.n	80047fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d073      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b03      	cmp	r3, #3
 8004602:	d129      	bne.n	8004658 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004604:	4b81      	ldr	r3, [pc, #516]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e0f4      	b.n	80047fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004614:	f000 f99e 	bl	8004954 <RCC_GetSysClockFreqFromPLLSource>
 8004618:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	4a7c      	ldr	r2, [pc, #496]	; (8004810 <HAL_RCC_ClockConfig+0x268>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d93f      	bls.n	80046a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004622:	4b7a      	ldr	r3, [pc, #488]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004636:	2b00      	cmp	r3, #0
 8004638:	d033      	beq.n	80046a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800463e:	2b00      	cmp	r3, #0
 8004640:	d12f      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004642:	4b72      	ldr	r3, [pc, #456]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800464a:	4a70      	ldr	r2, [pc, #448]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 800464c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004650:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004652:	2380      	movs	r3, #128	; 0x80
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	e024      	b.n	80046a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d107      	bne.n	8004670 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004660:	4b6a      	ldr	r3, [pc, #424]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d109      	bne.n	8004680 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0c6      	b.n	80047fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004670:	4b66      	ldr	r3, [pc, #408]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e0be      	b.n	80047fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004680:	f000 f8ce 	bl	8004820 <HAL_RCC_GetSysClockFreq>
 8004684:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	4a61      	ldr	r2, [pc, #388]	; (8004810 <HAL_RCC_ClockConfig+0x268>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d909      	bls.n	80046a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800468e:	4b5f      	ldr	r3, [pc, #380]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004696:	4a5d      	ldr	r2, [pc, #372]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 8004698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800469e:	2380      	movs	r3, #128	; 0x80
 80046a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046a2:	4b5a      	ldr	r3, [pc, #360]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f023 0203 	bic.w	r2, r3, #3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	4957      	ldr	r1, [pc, #348]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b4:	f7fe ffda 	bl	800366c <HAL_GetTick>
 80046b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ba:	e00a      	b.n	80046d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046bc:	f7fe ffd6 	bl	800366c <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e095      	b.n	80047fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d2:	4b4e      	ldr	r3, [pc, #312]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 020c 	and.w	r2, r3, #12
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d1eb      	bne.n	80046bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d023      	beq.n	8004738 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046fc:	4b43      	ldr	r3, [pc, #268]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	4a42      	ldr	r2, [pc, #264]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 8004702:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004706:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b00      	cmp	r3, #0
 8004712:	d007      	beq.n	8004724 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004714:	4b3d      	ldr	r3, [pc, #244]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800471c:	4a3b      	ldr	r2, [pc, #236]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 800471e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004722:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004724:	4b39      	ldr	r3, [pc, #228]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	4936      	ldr	r1, [pc, #216]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 8004732:	4313      	orrs	r3, r2
 8004734:	608b      	str	r3, [r1, #8]
 8004736:	e008      	b.n	800474a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2b80      	cmp	r3, #128	; 0x80
 800473c:	d105      	bne.n	800474a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800473e:	4b33      	ldr	r3, [pc, #204]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	4a32      	ldr	r2, [pc, #200]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 8004744:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004748:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800474a:	4b2f      	ldr	r3, [pc, #188]	; (8004808 <HAL_RCC_ClockConfig+0x260>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d21d      	bcs.n	8004794 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004758:	4b2b      	ldr	r3, [pc, #172]	; (8004808 <HAL_RCC_ClockConfig+0x260>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f023 020f 	bic.w	r2, r3, #15
 8004760:	4929      	ldr	r1, [pc, #164]	; (8004808 <HAL_RCC_ClockConfig+0x260>)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	4313      	orrs	r3, r2
 8004766:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004768:	f7fe ff80 	bl	800366c <HAL_GetTick>
 800476c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800476e:	e00a      	b.n	8004786 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004770:	f7fe ff7c 	bl	800366c <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f241 3288 	movw	r2, #5000	; 0x1388
 800477e:	4293      	cmp	r3, r2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e03b      	b.n	80047fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004786:	4b20      	ldr	r3, [pc, #128]	; (8004808 <HAL_RCC_ClockConfig+0x260>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	429a      	cmp	r2, r3
 8004792:	d1ed      	bne.n	8004770 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d008      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047a0:	4b1a      	ldr	r3, [pc, #104]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4917      	ldr	r1, [pc, #92]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d009      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047be:	4b13      	ldr	r3, [pc, #76]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	490f      	ldr	r1, [pc, #60]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047d2:	f000 f825 	bl	8004820 <HAL_RCC_GetSysClockFreq>
 80047d6:	4601      	mov	r1, r0
 80047d8:	4b0c      	ldr	r3, [pc, #48]	; (800480c <HAL_RCC_ClockConfig+0x264>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	4a0c      	ldr	r2, [pc, #48]	; (8004814 <HAL_RCC_ClockConfig+0x26c>)
 80047e4:	5cd3      	ldrb	r3, [r2, r3]
 80047e6:	f003 031f 	and.w	r3, r3, #31
 80047ea:	fa21 f303 	lsr.w	r3, r1, r3
 80047ee:	4a0a      	ldr	r2, [pc, #40]	; (8004818 <HAL_RCC_ClockConfig+0x270>)
 80047f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80047f2:	4b0a      	ldr	r3, [pc, #40]	; (800481c <HAL_RCC_ClockConfig+0x274>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe feec 	bl	80035d4 <HAL_InitTick>
 80047fc:	4603      	mov	r3, r0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40022000 	.word	0x40022000
 800480c:	40021000 	.word	0x40021000
 8004810:	04c4b400 	.word	0x04c4b400
 8004814:	08009844 	.word	0x08009844
 8004818:	20000010 	.word	0x20000010
 800481c:	20000014 	.word	0x20000014

08004820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004826:	4b2c      	ldr	r3, [pc, #176]	; (80048d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 030c 	and.w	r3, r3, #12
 800482e:	2b04      	cmp	r3, #4
 8004830:	d102      	bne.n	8004838 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004832:	4b2a      	ldr	r3, [pc, #168]	; (80048dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004834:	613b      	str	r3, [r7, #16]
 8004836:	e047      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004838:	4b27      	ldr	r3, [pc, #156]	; (80048d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 030c 	and.w	r3, r3, #12
 8004840:	2b08      	cmp	r3, #8
 8004842:	d102      	bne.n	800484a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004844:	4b26      	ldr	r3, [pc, #152]	; (80048e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	e03e      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800484a:	4b23      	ldr	r3, [pc, #140]	; (80048d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 030c 	and.w	r3, r3, #12
 8004852:	2b0c      	cmp	r3, #12
 8004854:	d136      	bne.n	80048c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004856:	4b20      	ldr	r3, [pc, #128]	; (80048d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004860:	4b1d      	ldr	r3, [pc, #116]	; (80048d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	3301      	adds	r3, #1
 800486c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b03      	cmp	r3, #3
 8004872:	d10c      	bne.n	800488e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004874:	4a1a      	ldr	r2, [pc, #104]	; (80048e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	fbb2 f3f3 	udiv	r3, r2, r3
 800487c:	4a16      	ldr	r2, [pc, #88]	; (80048d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800487e:	68d2      	ldr	r2, [r2, #12]
 8004880:	0a12      	lsrs	r2, r2, #8
 8004882:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004886:	fb02 f303 	mul.w	r3, r2, r3
 800488a:	617b      	str	r3, [r7, #20]
      break;
 800488c:	e00c      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800488e:	4a13      	ldr	r2, [pc, #76]	; (80048dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	fbb2 f3f3 	udiv	r3, r2, r3
 8004896:	4a10      	ldr	r2, [pc, #64]	; (80048d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004898:	68d2      	ldr	r2, [r2, #12]
 800489a:	0a12      	lsrs	r2, r2, #8
 800489c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048a0:	fb02 f303 	mul.w	r3, r2, r3
 80048a4:	617b      	str	r3, [r7, #20]
      break;
 80048a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048a8:	4b0b      	ldr	r3, [pc, #44]	; (80048d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	0e5b      	lsrs	r3, r3, #25
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	3301      	adds	r3, #1
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	e001      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80048c8:	693b      	ldr	r3, [r7, #16]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	371c      	adds	r7, #28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40021000 	.word	0x40021000
 80048dc:	00f42400 	.word	0x00f42400
 80048e0:	007a1200 	.word	0x007a1200

080048e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048e8:	4b03      	ldr	r3, [pc, #12]	; (80048f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048ea:	681b      	ldr	r3, [r3, #0]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	20000010 	.word	0x20000010

080048fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004900:	f7ff fff0 	bl	80048e4 <HAL_RCC_GetHCLKFreq>
 8004904:	4601      	mov	r1, r0
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	0a1b      	lsrs	r3, r3, #8
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	4a04      	ldr	r2, [pc, #16]	; (8004924 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004912:	5cd3      	ldrb	r3, [r2, r3]
 8004914:	f003 031f 	and.w	r3, r3, #31
 8004918:	fa21 f303 	lsr.w	r3, r1, r3
}
 800491c:	4618      	mov	r0, r3
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40021000 	.word	0x40021000
 8004924:	08009854 	.word	0x08009854

08004928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800492c:	f7ff ffda 	bl	80048e4 <HAL_RCC_GetHCLKFreq>
 8004930:	4601      	mov	r1, r0
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	0adb      	lsrs	r3, r3, #11
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	4a04      	ldr	r2, [pc, #16]	; (8004950 <HAL_RCC_GetPCLK2Freq+0x28>)
 800493e:	5cd3      	ldrb	r3, [r2, r3]
 8004940:	f003 031f 	and.w	r3, r3, #31
 8004944:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004948:	4618      	mov	r0, r3
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40021000 	.word	0x40021000
 8004950:	08009854 	.word	0x08009854

08004954 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800495a:	4b1e      	ldr	r3, [pc, #120]	; (80049d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004964:	4b1b      	ldr	r3, [pc, #108]	; (80049d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	091b      	lsrs	r3, r3, #4
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	3301      	adds	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	2b03      	cmp	r3, #3
 8004976:	d10c      	bne.n	8004992 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004978:	4a17      	ldr	r2, [pc, #92]	; (80049d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004980:	4a14      	ldr	r2, [pc, #80]	; (80049d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004982:	68d2      	ldr	r2, [r2, #12]
 8004984:	0a12      	lsrs	r2, r2, #8
 8004986:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	617b      	str	r3, [r7, #20]
    break;
 8004990:	e00c      	b.n	80049ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004992:	4a12      	ldr	r2, [pc, #72]	; (80049dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	fbb2 f3f3 	udiv	r3, r2, r3
 800499a:	4a0e      	ldr	r2, [pc, #56]	; (80049d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800499c:	68d2      	ldr	r2, [r2, #12]
 800499e:	0a12      	lsrs	r2, r2, #8
 80049a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049a4:	fb02 f303 	mul.w	r3, r2, r3
 80049a8:	617b      	str	r3, [r7, #20]
    break;
 80049aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049ac:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	0e5b      	lsrs	r3, r3, #25
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	3301      	adds	r3, #1
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80049c6:	687b      	ldr	r3, [r7, #4]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	40021000 	.word	0x40021000
 80049d8:	007a1200 	.word	0x007a1200
 80049dc:	00f42400 	.word	0x00f42400

080049e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049e8:	2300      	movs	r3, #0
 80049ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049ec:	2300      	movs	r3, #0
 80049ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 8098 	beq.w	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049fe:	2300      	movs	r3, #0
 8004a00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a02:	4b43      	ldr	r3, [pc, #268]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10d      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a0e:	4b40      	ldr	r3, [pc, #256]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a12:	4a3f      	ldr	r2, [pc, #252]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a18:	6593      	str	r3, [r2, #88]	; 0x58
 8004a1a:	4b3d      	ldr	r3, [pc, #244]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a22:	60bb      	str	r3, [r7, #8]
 8004a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a26:	2301      	movs	r3, #1
 8004a28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a2a:	4b3a      	ldr	r3, [pc, #232]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a39      	ldr	r2, [pc, #228]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a36:	f7fe fe19 	bl	800366c <HAL_GetTick>
 8004a3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a3c:	e009      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a3e:	f7fe fe15 	bl	800366c <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d902      	bls.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	74fb      	strb	r3, [r7, #19]
        break;
 8004a50:	e005      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a52:	4b30      	ldr	r3, [pc, #192]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0ef      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a5e:	7cfb      	ldrb	r3, [r7, #19]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d159      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a64:	4b2a      	ldr	r3, [pc, #168]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d01e      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d019      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a80:	4b23      	ldr	r3, [pc, #140]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a8c:	4b20      	ldr	r3, [pc, #128]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a92:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a9c:	4b1c      	ldr	r3, [pc, #112]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa2:	4a1b      	ldr	r2, [pc, #108]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004aac:	4a18      	ldr	r2, [pc, #96]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d016      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abe:	f7fe fdd5 	bl	800366c <HAL_GetTick>
 8004ac2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ac4:	e00b      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac6:	f7fe fdd1 	bl	800366c <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d902      	bls.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	74fb      	strb	r3, [r7, #19]
            break;
 8004adc:	e006      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ade:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0ec      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004aec:	7cfb      	ldrb	r3, [r7, #19]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10b      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004af2:	4b07      	ldr	r3, [pc, #28]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	4903      	ldr	r1, [pc, #12]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b08:	e008      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b0a:	7cfb      	ldrb	r3, [r7, #19]
 8004b0c:	74bb      	strb	r3, [r7, #18]
 8004b0e:	e005      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b10:	40021000 	.word	0x40021000
 8004b14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b18:	7cfb      	ldrb	r3, [r7, #19]
 8004b1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b1c:	7c7b      	ldrb	r3, [r7, #17]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d105      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b22:	4ba6      	ldr	r3, [pc, #664]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b26:	4aa5      	ldr	r2, [pc, #660]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b3a:	4ba0      	ldr	r3, [pc, #640]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b40:	f023 0203 	bic.w	r2, r3, #3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	499c      	ldr	r1, [pc, #624]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b5c:	4b97      	ldr	r3, [pc, #604]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b62:	f023 020c 	bic.w	r2, r3, #12
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	4994      	ldr	r1, [pc, #592]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b7e:	4b8f      	ldr	r3, [pc, #572]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	498b      	ldr	r1, [pc, #556]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ba0:	4b86      	ldr	r3, [pc, #536]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	4983      	ldr	r1, [pc, #524]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bc2:	4b7e      	ldr	r3, [pc, #504]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	497a      	ldr	r1, [pc, #488]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004be4:	4b75      	ldr	r3, [pc, #468]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	4972      	ldr	r1, [pc, #456]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c06:	4b6d      	ldr	r3, [pc, #436]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	4969      	ldr	r1, [pc, #420]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c28:	4b64      	ldr	r3, [pc, #400]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	4961      	ldr	r1, [pc, #388]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c4a:	4b5c      	ldr	r3, [pc, #368]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	4958      	ldr	r1, [pc, #352]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d015      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c6c:	4b53      	ldr	r3, [pc, #332]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	4950      	ldr	r1, [pc, #320]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c8a:	d105      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c8c:	4b4b      	ldr	r3, [pc, #300]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4a4a      	ldr	r2, [pc, #296]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d015      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ca4:	4b45      	ldr	r3, [pc, #276]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004caa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	4942      	ldr	r1, [pc, #264]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cc2:	d105      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cc4:	4b3d      	ldr	r3, [pc, #244]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	4a3c      	ldr	r2, [pc, #240]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d015      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004cdc:	4b37      	ldr	r3, [pc, #220]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	4934      	ldr	r1, [pc, #208]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cfa:	d105      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cfc:	4b2f      	ldr	r3, [pc, #188]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	4a2e      	ldr	r2, [pc, #184]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d06:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d015      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d14:	4b29      	ldr	r3, [pc, #164]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d22:	4926      	ldr	r1, [pc, #152]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d32:	d105      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d34:	4b21      	ldr	r3, [pc, #132]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4a20      	ldr	r2, [pc, #128]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d3e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d015      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d4c:	4b1b      	ldr	r3, [pc, #108]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5a:	4918      	ldr	r1, [pc, #96]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d6a:	d105      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d6c:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	4a12      	ldr	r2, [pc, #72]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d76:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d015      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d84:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d92:	490a      	ldr	r1, [pc, #40]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004da2:	d105      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004da4:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	4a04      	ldr	r2, [pc, #16]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004db0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	40021000 	.word	0x40021000

08004dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e049      	b.n	8004e66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d106      	bne.n	8004dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fe fa48 	bl	800327c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4610      	mov	r0, r2
 8004e00:	f000 f99c 	bl	800513c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b082      	sub	sp, #8
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e049      	b.n	8004f14 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d106      	bne.n	8004e9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7fe f9bf 	bl	8003218 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4610      	mov	r0, r2
 8004eae:	f000 f945 	bl	800513c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004f32:	2302      	movs	r3, #2
 8004f34:	e0fd      	b.n	8005132 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b14      	cmp	r3, #20
 8004f42:	f200 80f0 	bhi.w	8005126 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004f46:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4c:	08004fa1 	.word	0x08004fa1
 8004f50:	08005127 	.word	0x08005127
 8004f54:	08005127 	.word	0x08005127
 8004f58:	08005127 	.word	0x08005127
 8004f5c:	08004fe1 	.word	0x08004fe1
 8004f60:	08005127 	.word	0x08005127
 8004f64:	08005127 	.word	0x08005127
 8004f68:	08005127 	.word	0x08005127
 8004f6c:	08005023 	.word	0x08005023
 8004f70:	08005127 	.word	0x08005127
 8004f74:	08005127 	.word	0x08005127
 8004f78:	08005127 	.word	0x08005127
 8004f7c:	08005063 	.word	0x08005063
 8004f80:	08005127 	.word	0x08005127
 8004f84:	08005127 	.word	0x08005127
 8004f88:	08005127 	.word	0x08005127
 8004f8c:	080050a5 	.word	0x080050a5
 8004f90:	08005127 	.word	0x08005127
 8004f94:	08005127 	.word	0x08005127
 8004f98:	08005127 	.word	0x08005127
 8004f9c:	080050e5 	.word	0x080050e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 f958 	bl	800525c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699a      	ldr	r2, [r3, #24]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0208 	orr.w	r2, r2, #8
 8004fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699a      	ldr	r2, [r3, #24]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0204 	bic.w	r2, r2, #4
 8004fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6999      	ldr	r1, [r3, #24]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	619a      	str	r2, [r3, #24]
      break;
 8004fde:	e0a3      	b.n	8005128 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68b9      	ldr	r1, [r7, #8]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 f9c8 	bl	800537c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699a      	ldr	r2, [r3, #24]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699a      	ldr	r2, [r3, #24]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800500a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6999      	ldr	r1, [r3, #24]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	021a      	lsls	r2, r3, #8
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	619a      	str	r2, [r3, #24]
      break;
 8005020:	e082      	b.n	8005128 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68b9      	ldr	r1, [r7, #8]
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fa31 	bl	8005490 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f042 0208 	orr.w	r2, r2, #8
 800503c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69da      	ldr	r2, [r3, #28]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0204 	bic.w	r2, r2, #4
 800504c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69d9      	ldr	r1, [r3, #28]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	691a      	ldr	r2, [r3, #16]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	61da      	str	r2, [r3, #28]
      break;
 8005060:	e062      	b.n	8005128 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fa99 	bl	80055a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800507c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69da      	ldr	r2, [r3, #28]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800508c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69d9      	ldr	r1, [r3, #28]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	021a      	lsls	r2, r3, #8
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	61da      	str	r2, [r3, #28]
      break;
 80050a2:	e041      	b.n	8005128 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fb02 	bl	80056b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0208 	orr.w	r2, r2, #8
 80050be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0204 	bic.w	r2, r2, #4
 80050ce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80050e2:	e021      	b.n	8005128 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fb46 	bl	800577c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800510e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	021a      	lsls	r2, r3, #8
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005124:	e000      	b.n	8005128 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005126:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop

0800513c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a3c      	ldr	r2, [pc, #240]	; (8005240 <TIM_Base_SetConfig+0x104>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00f      	beq.n	8005174 <TIM_Base_SetConfig+0x38>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515a:	d00b      	beq.n	8005174 <TIM_Base_SetConfig+0x38>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a39      	ldr	r2, [pc, #228]	; (8005244 <TIM_Base_SetConfig+0x108>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d007      	beq.n	8005174 <TIM_Base_SetConfig+0x38>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a38      	ldr	r2, [pc, #224]	; (8005248 <TIM_Base_SetConfig+0x10c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d003      	beq.n	8005174 <TIM_Base_SetConfig+0x38>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a37      	ldr	r2, [pc, #220]	; (800524c <TIM_Base_SetConfig+0x110>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d108      	bne.n	8005186 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a2d      	ldr	r2, [pc, #180]	; (8005240 <TIM_Base_SetConfig+0x104>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d01b      	beq.n	80051c6 <TIM_Base_SetConfig+0x8a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005194:	d017      	beq.n	80051c6 <TIM_Base_SetConfig+0x8a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a2a      	ldr	r2, [pc, #168]	; (8005244 <TIM_Base_SetConfig+0x108>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d013      	beq.n	80051c6 <TIM_Base_SetConfig+0x8a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a29      	ldr	r2, [pc, #164]	; (8005248 <TIM_Base_SetConfig+0x10c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00f      	beq.n	80051c6 <TIM_Base_SetConfig+0x8a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a28      	ldr	r2, [pc, #160]	; (800524c <TIM_Base_SetConfig+0x110>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00b      	beq.n	80051c6 <TIM_Base_SetConfig+0x8a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a27      	ldr	r2, [pc, #156]	; (8005250 <TIM_Base_SetConfig+0x114>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d007      	beq.n	80051c6 <TIM_Base_SetConfig+0x8a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a26      	ldr	r2, [pc, #152]	; (8005254 <TIM_Base_SetConfig+0x118>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d003      	beq.n	80051c6 <TIM_Base_SetConfig+0x8a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a25      	ldr	r2, [pc, #148]	; (8005258 <TIM_Base_SetConfig+0x11c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d108      	bne.n	80051d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a10      	ldr	r2, [pc, #64]	; (8005240 <TIM_Base_SetConfig+0x104>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d00f      	beq.n	8005224 <TIM_Base_SetConfig+0xe8>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a11      	ldr	r2, [pc, #68]	; (800524c <TIM_Base_SetConfig+0x110>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00b      	beq.n	8005224 <TIM_Base_SetConfig+0xe8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a10      	ldr	r2, [pc, #64]	; (8005250 <TIM_Base_SetConfig+0x114>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d007      	beq.n	8005224 <TIM_Base_SetConfig+0xe8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a0f      	ldr	r2, [pc, #60]	; (8005254 <TIM_Base_SetConfig+0x118>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d003      	beq.n	8005224 <TIM_Base_SetConfig+0xe8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a0e      	ldr	r2, [pc, #56]	; (8005258 <TIM_Base_SetConfig+0x11c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d103      	bne.n	800522c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	615a      	str	r2, [r3, #20]
}
 8005232:	bf00      	nop
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40012c00 	.word	0x40012c00
 8005244:	40000400 	.word	0x40000400
 8005248:	40000800 	.word	0x40000800
 800524c:	40013400 	.word	0x40013400
 8005250:	40014000 	.word	0x40014000
 8005254:	40014400 	.word	0x40014400
 8005258:	40014800 	.word	0x40014800

0800525c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	f023 0201 	bic.w	r2, r3, #1
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800528a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0303 	bic.w	r3, r3, #3
 8005296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f023 0302 	bic.w	r3, r3, #2
 80052a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a2c      	ldr	r2, [pc, #176]	; (8005368 <TIM_OC1_SetConfig+0x10c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d00f      	beq.n	80052dc <TIM_OC1_SetConfig+0x80>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a2b      	ldr	r2, [pc, #172]	; (800536c <TIM_OC1_SetConfig+0x110>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d00b      	beq.n	80052dc <TIM_OC1_SetConfig+0x80>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a2a      	ldr	r2, [pc, #168]	; (8005370 <TIM_OC1_SetConfig+0x114>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d007      	beq.n	80052dc <TIM_OC1_SetConfig+0x80>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a29      	ldr	r2, [pc, #164]	; (8005374 <TIM_OC1_SetConfig+0x118>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d003      	beq.n	80052dc <TIM_OC1_SetConfig+0x80>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a28      	ldr	r2, [pc, #160]	; (8005378 <TIM_OC1_SetConfig+0x11c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d10c      	bne.n	80052f6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f023 0308 	bic.w	r3, r3, #8
 80052e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f023 0304 	bic.w	r3, r3, #4
 80052f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a1b      	ldr	r2, [pc, #108]	; (8005368 <TIM_OC1_SetConfig+0x10c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00f      	beq.n	800531e <TIM_OC1_SetConfig+0xc2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a1a      	ldr	r2, [pc, #104]	; (800536c <TIM_OC1_SetConfig+0x110>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00b      	beq.n	800531e <TIM_OC1_SetConfig+0xc2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a19      	ldr	r2, [pc, #100]	; (8005370 <TIM_OC1_SetConfig+0x114>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d007      	beq.n	800531e <TIM_OC1_SetConfig+0xc2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a18      	ldr	r2, [pc, #96]	; (8005374 <TIM_OC1_SetConfig+0x118>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d003      	beq.n	800531e <TIM_OC1_SetConfig+0xc2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a17      	ldr	r2, [pc, #92]	; (8005378 <TIM_OC1_SetConfig+0x11c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d111      	bne.n	8005342 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800532c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	4313      	orrs	r3, r2
 8005336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	621a      	str	r2, [r3, #32]
}
 800535c:	bf00      	nop
 800535e:	371c      	adds	r7, #28
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	40012c00 	.word	0x40012c00
 800536c:	40013400 	.word	0x40013400
 8005370:	40014000 	.word	0x40014000
 8005374:	40014400 	.word	0x40014400
 8005378:	40014800 	.word	0x40014800

0800537c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	f023 0210 	bic.w	r2, r3, #16
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f023 0320 	bic.w	r3, r3, #32
 80053ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a28      	ldr	r2, [pc, #160]	; (800547c <TIM_OC2_SetConfig+0x100>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d003      	beq.n	80053e8 <TIM_OC2_SetConfig+0x6c>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a27      	ldr	r2, [pc, #156]	; (8005480 <TIM_OC2_SetConfig+0x104>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d10d      	bne.n	8005404 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005402:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a1d      	ldr	r2, [pc, #116]	; (800547c <TIM_OC2_SetConfig+0x100>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00f      	beq.n	800542c <TIM_OC2_SetConfig+0xb0>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a1c      	ldr	r2, [pc, #112]	; (8005480 <TIM_OC2_SetConfig+0x104>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00b      	beq.n	800542c <TIM_OC2_SetConfig+0xb0>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a1b      	ldr	r2, [pc, #108]	; (8005484 <TIM_OC2_SetConfig+0x108>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d007      	beq.n	800542c <TIM_OC2_SetConfig+0xb0>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a1a      	ldr	r2, [pc, #104]	; (8005488 <TIM_OC2_SetConfig+0x10c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d003      	beq.n	800542c <TIM_OC2_SetConfig+0xb0>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a19      	ldr	r2, [pc, #100]	; (800548c <TIM_OC2_SetConfig+0x110>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d113      	bne.n	8005454 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800543a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	621a      	str	r2, [r3, #32]
}
 800546e:	bf00      	nop
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40012c00 	.word	0x40012c00
 8005480:	40013400 	.word	0x40013400
 8005484:	40014000 	.word	0x40014000
 8005488:	40014400 	.word	0x40014400
 800548c:	40014800 	.word	0x40014800

08005490 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0303 	bic.w	r3, r3, #3
 80054ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	021b      	lsls	r3, r3, #8
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a27      	ldr	r2, [pc, #156]	; (800558c <TIM_OC3_SetConfig+0xfc>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d003      	beq.n	80054fa <TIM_OC3_SetConfig+0x6a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a26      	ldr	r2, [pc, #152]	; (8005590 <TIM_OC3_SetConfig+0x100>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d10d      	bne.n	8005516 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005500:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	021b      	lsls	r3, r3, #8
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	4313      	orrs	r3, r2
 800550c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a1c      	ldr	r2, [pc, #112]	; (800558c <TIM_OC3_SetConfig+0xfc>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00f      	beq.n	800553e <TIM_OC3_SetConfig+0xae>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a1b      	ldr	r2, [pc, #108]	; (8005590 <TIM_OC3_SetConfig+0x100>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00b      	beq.n	800553e <TIM_OC3_SetConfig+0xae>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a1a      	ldr	r2, [pc, #104]	; (8005594 <TIM_OC3_SetConfig+0x104>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d007      	beq.n	800553e <TIM_OC3_SetConfig+0xae>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a19      	ldr	r2, [pc, #100]	; (8005598 <TIM_OC3_SetConfig+0x108>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d003      	beq.n	800553e <TIM_OC3_SetConfig+0xae>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a18      	ldr	r2, [pc, #96]	; (800559c <TIM_OC3_SetConfig+0x10c>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d113      	bne.n	8005566 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800554c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	011b      	lsls	r3, r3, #4
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	4313      	orrs	r3, r2
 8005564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	621a      	str	r2, [r3, #32]
}
 8005580:	bf00      	nop
 8005582:	371c      	adds	r7, #28
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	40012c00 	.word	0x40012c00
 8005590:	40013400 	.word	0x40013400
 8005594:	40014000 	.word	0x40014000
 8005598:	40014400 	.word	0x40014400
 800559c:	40014800 	.word	0x40014800

080055a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	021b      	lsls	r3, r3, #8
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	031b      	lsls	r3, r3, #12
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a28      	ldr	r2, [pc, #160]	; (80056a0 <TIM_OC4_SetConfig+0x100>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_OC4_SetConfig+0x6c>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a27      	ldr	r2, [pc, #156]	; (80056a4 <TIM_OC4_SetConfig+0x104>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d10d      	bne.n	8005628 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	031b      	lsls	r3, r3, #12
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005626:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a1d      	ldr	r2, [pc, #116]	; (80056a0 <TIM_OC4_SetConfig+0x100>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00f      	beq.n	8005650 <TIM_OC4_SetConfig+0xb0>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a1c      	ldr	r2, [pc, #112]	; (80056a4 <TIM_OC4_SetConfig+0x104>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00b      	beq.n	8005650 <TIM_OC4_SetConfig+0xb0>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a1b      	ldr	r2, [pc, #108]	; (80056a8 <TIM_OC4_SetConfig+0x108>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d007      	beq.n	8005650 <TIM_OC4_SetConfig+0xb0>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a1a      	ldr	r2, [pc, #104]	; (80056ac <TIM_OC4_SetConfig+0x10c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d003      	beq.n	8005650 <TIM_OC4_SetConfig+0xb0>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a19      	ldr	r2, [pc, #100]	; (80056b0 <TIM_OC4_SetConfig+0x110>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d113      	bne.n	8005678 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005656:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800565e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	019b      	lsls	r3, r3, #6
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	019b      	lsls	r3, r3, #6
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40012c00 	.word	0x40012c00
 80056a4:	40013400 	.word	0x40013400
 80056a8:	40014000 	.word	0x40014000
 80056ac:	40014400 	.word	0x40014400
 80056b0:	40014800 	.word	0x40014800

080056b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	041b      	lsls	r3, r3, #16
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a17      	ldr	r2, [pc, #92]	; (8005768 <TIM_OC5_SetConfig+0xb4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00f      	beq.n	800572e <TIM_OC5_SetConfig+0x7a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a16      	ldr	r2, [pc, #88]	; (800576c <TIM_OC5_SetConfig+0xb8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00b      	beq.n	800572e <TIM_OC5_SetConfig+0x7a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a15      	ldr	r2, [pc, #84]	; (8005770 <TIM_OC5_SetConfig+0xbc>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d007      	beq.n	800572e <TIM_OC5_SetConfig+0x7a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a14      	ldr	r2, [pc, #80]	; (8005774 <TIM_OC5_SetConfig+0xc0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <TIM_OC5_SetConfig+0x7a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a13      	ldr	r2, [pc, #76]	; (8005778 <TIM_OC5_SetConfig+0xc4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d109      	bne.n	8005742 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005734:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	021b      	lsls	r3, r3, #8
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	621a      	str	r2, [r3, #32]
}
 800575c:	bf00      	nop
 800575e:	371c      	adds	r7, #28
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	40012c00 	.word	0x40012c00
 800576c:	40013400 	.word	0x40013400
 8005770:	40014000 	.word	0x40014000
 8005774:	40014400 	.word	0x40014400
 8005778:	40014800 	.word	0x40014800

0800577c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	021b      	lsls	r3, r3, #8
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	051b      	lsls	r3, r3, #20
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a18      	ldr	r2, [pc, #96]	; (8005834 <TIM_OC6_SetConfig+0xb8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00f      	beq.n	80057f8 <TIM_OC6_SetConfig+0x7c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a17      	ldr	r2, [pc, #92]	; (8005838 <TIM_OC6_SetConfig+0xbc>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00b      	beq.n	80057f8 <TIM_OC6_SetConfig+0x7c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a16      	ldr	r2, [pc, #88]	; (800583c <TIM_OC6_SetConfig+0xc0>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d007      	beq.n	80057f8 <TIM_OC6_SetConfig+0x7c>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a15      	ldr	r2, [pc, #84]	; (8005840 <TIM_OC6_SetConfig+0xc4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d003      	beq.n	80057f8 <TIM_OC6_SetConfig+0x7c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a14      	ldr	r2, [pc, #80]	; (8005844 <TIM_OC6_SetConfig+0xc8>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d109      	bne.n	800580c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	029b      	lsls	r3, r3, #10
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	40012c00 	.word	0x40012c00
 8005838:	40013400 	.word	0x40013400
 800583c:	40014000 	.word	0x40014000
 8005840:	40014400 	.word	0x40014400
 8005844:	40014800 	.word	0x40014800

08005848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800585c:	2302      	movs	r3, #2
 800585e:	e065      	b.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a2c      	ldr	r2, [pc, #176]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d004      	beq.n	8005894 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a2b      	ldr	r2, [pc, #172]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d108      	bne.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800589a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80058ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1b      	ldr	r2, [pc, #108]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d018      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d6:	d013      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a18      	ldr	r2, [pc, #96]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00e      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a17      	ldr	r2, [pc, #92]	; (8005944 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d009      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a12      	ldr	r2, [pc, #72]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d004      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a13      	ldr	r2, [pc, #76]	; (8005948 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d10c      	bne.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005906:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	4313      	orrs	r3, r2
 8005910:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	40012c00 	.word	0x40012c00
 800593c:	40013400 	.word	0x40013400
 8005940:	40000400 	.word	0x40000400
 8005944:	40000800 	.word	0x40000800
 8005948:	40014000 	.word	0x40014000

0800594c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005964:	2302      	movs	r3, #2
 8005966:	e087      	b.n	8005a78 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	4313      	orrs	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	041b      	lsls	r3, r3, #16
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a27      	ldr	r2, [pc, #156]	; (8005a84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d004      	beq.n	80059f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a25      	ldr	r2, [pc, #148]	; (8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d106      	bne.n	8005a04 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a1e      	ldr	r2, [pc, #120]	; (8005a84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d004      	beq.n	8005a18 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a1d      	ldr	r2, [pc, #116]	; (8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d126      	bne.n	8005a66 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a22:	051b      	lsls	r3, r3, #20
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a0e      	ldr	r2, [pc, #56]	; (8005a84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d004      	beq.n	8005a58 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a0d      	ldr	r2, [pc, #52]	; (8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d106      	bne.n	8005a66 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	40012c00 	.word	0x40012c00
 8005a88:	40013400 	.word	0x40013400

08005a8c <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e03c      	b.n	8005b18 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d106      	bne.n	8005ab8 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7fd fcea 	bl	800348c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0201 	bic.w	r2, r2, #1
 8005ace:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f9ed 	bl	8005eb0 <USART_SetConfig>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e01b      	b.n	8005b18 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005aee:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005afe:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f042 0201 	orr.w	r2, r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fcd1 	bl	80064b8 <USART_CheckIdleState>
 8005b16:	4603      	mov	r3, r0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08a      	sub	sp, #40	; 0x28
 8005b24:	af02      	add	r7, sp, #8
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	f040 8095 	bne.w	8005c68 <HAL_USART_Transmit+0x148>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <HAL_USART_Transmit+0x2a>
 8005b44:	88fb      	ldrh	r3, [r7, #6]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e08d      	b.n	8005c6a <HAL_USART_Transmit+0x14a>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <HAL_USART_Transmit+0x3c>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e086      	b.n	8005c6a <HAL_USART_Transmit+0x14a>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2212      	movs	r2, #18
 8005b6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b72:	f7fd fd7b 	bl	800366c <HAL_GetTick>
 8005b76:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	88fa      	ldrh	r2, [r7, #6]
 8005b7c:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	88fa      	ldrh	r2, [r7, #6]
 8005b82:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8c:	d108      	bne.n	8005ba0 <HAL_USART_Transmit+0x80>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d104      	bne.n	8005ba0 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	61bb      	str	r3, [r7, #24]
 8005b9e:	e003      	b.n	8005ba8 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8005ba8:	e02a      	b.n	8005c00 <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2180      	movs	r1, #128	; 0x80
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f945 	bl	8005e44 <USART_WaitOnFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e052      	b.n	8005c6a <HAL_USART_Transmit+0x14a>
      }
      if (ptxdata8bits == NULL)
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10b      	bne.n	8005be2 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bd8:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	3302      	adds	r3, #2
 8005bde:	61bb      	str	r3, [r7, #24]
 8005be0:	e007      	b.n	8005bf2 <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	781a      	ldrb	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1cf      	bne.n	8005baa <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2200      	movs	r2, #0
 8005c12:	2140      	movs	r1, #64	; 0x40
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f915 	bl	8005e44 <USART_WaitOnFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e022      	b.n	8005c6a <HAL_USART_Transmit+0x14a>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2240      	movs	r2, #64	; 0x40
 8005c2a:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2208      	movs	r2, #8
 8005c32:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0208 	orr.w	r2, r2, #8
 8005c42:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699a      	ldr	r2, [r3, #24]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0210 	orr.w	r2, r2, #16
 8005c52:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_OK;
 8005c64:	2300      	movs	r3, #0
 8005c66:	e000      	b.n	8005c6a <HAL_USART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005c68:	2302      	movs	r3, #2
  }
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3720      	adds	r7, #32
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_USART_Receive>:
  * @param Size Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b08a      	sub	sp, #40	; 0x28
 8005c76:	af02      	add	r7, sp, #8
 8005c78:	60f8      	str	r0, [r7, #12]
 8005c7a:	60b9      	str	r1, [r7, #8]
 8005c7c:	603b      	str	r3, [r7, #0]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *prxdata8bits;
  uint16_t *prxdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	f040 80d5 	bne.w	8005e3a <HAL_USART_Receive+0x1c8>
  {
    if ((pRxData == NULL) || (Size == 0U))
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <HAL_USART_Receive+0x2a>
 8005c96:	88fb      	ldrh	r3, [r7, #6]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <HAL_USART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e0cd      	b.n	8005e3c <HAL_USART_Receive+0x1ca>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d101      	bne.n	8005cae <HAL_USART_Receive+0x3c>
 8005caa:	2302      	movs	r3, #2
 8005cac:	e0c6      	b.n	8005e3c <HAL_USART_Receive+0x1ca>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_RX;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2222      	movs	r2, #34	; 0x22
 8005cc0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cc4:	f7fd fcd2 	bl	800366c <HAL_GetTick>
 8005cc8:	6178      	str	r0, [r7, #20]

    husart->RxXferSize = Size;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	88fa      	ldrh	r2, [r7, #6]
 8005cce:	869a      	strh	r2, [r3, #52]	; 0x34
    husart->RxXferCount = Size;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	88fa      	ldrh	r2, [r7, #6]
 8005cd4:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Computation of USART mask to apply to RDR register */
    USART_MASK_COMPUTATION(husart);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cde:	d10c      	bne.n	8005cfa <HAL_USART_Receive+0x88>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d104      	bne.n	8005cf2 <HAL_USART_Receive+0x80>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005cee:	871a      	strh	r2, [r3, #56]	; 0x38
 8005cf0:	e027      	b.n	8005d42 <HAL_USART_Receive+0xd0>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	22ff      	movs	r2, #255	; 0xff
 8005cf6:	871a      	strh	r2, [r3, #56]	; 0x38
 8005cf8:	e023      	b.n	8005d42 <HAL_USART_Receive+0xd0>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10b      	bne.n	8005d1a <HAL_USART_Receive+0xa8>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <HAL_USART_Receive+0xa0>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	22ff      	movs	r2, #255	; 0xff
 8005d0e:	871a      	strh	r2, [r3, #56]	; 0x38
 8005d10:	e017      	b.n	8005d42 <HAL_USART_Receive+0xd0>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	227f      	movs	r2, #127	; 0x7f
 8005d16:	871a      	strh	r2, [r3, #56]	; 0x38
 8005d18:	e013      	b.n	8005d42 <HAL_USART_Receive+0xd0>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d22:	d10b      	bne.n	8005d3c <HAL_USART_Receive+0xca>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d103      	bne.n	8005d34 <HAL_USART_Receive+0xc2>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	227f      	movs	r2, #127	; 0x7f
 8005d30:	871a      	strh	r2, [r3, #56]	; 0x38
 8005d32:	e006      	b.n	8005d42 <HAL_USART_Receive+0xd0>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	223f      	movs	r2, #63	; 0x3f
 8005d38:	871a      	strh	r2, [r3, #56]	; 0x38
 8005d3a:	e002      	b.n	8005d42 <HAL_USART_Receive+0xd0>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	871a      	strh	r2, [r3, #56]	; 0x38
    uhMask = husart->Mask;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005d46:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d50:	d108      	bne.n	8005d64 <HAL_USART_Receive+0xf2>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d104      	bne.n	8005d64 <HAL_USART_Receive+0xf2>
    {
      prxdata8bits  = NULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	61fb      	str	r3, [r7, #28]
      prxdata16bits = (uint16_t *) pRxData;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	61bb      	str	r3, [r7, #24]
 8005d62:	e003      	b.n	8005d6c <HAL_USART_Receive+0xfa>
    }
    else
    {
      prxdata8bits  = pRxData;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	61fb      	str	r3, [r7, #28]
      prxdata16bits = NULL;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (husart->RxXferCount > 0U)
 8005d6c:	e045      	b.n	8005dfa <HAL_USART_Receive+0x188>
    {
      if (husart->SlaveMode == USART_SLAVEMODE_DISABLE)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d110      	bne.n	8005d98 <HAL_USART_Receive+0x126>
      {
        /* Wait until TXE flag is set to send dummy byte in order to generate the
        * clock for the slave to send data.
        * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
        * can be written for all the cases. */
        if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	2180      	movs	r1, #128	; 0x80
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 f85f 	bl	8005e44 <USART_WaitOnFlagUntilTimeout>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <HAL_USART_Receive+0x11e>
        {
          return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e055      	b.n	8005e3c <HAL_USART_Receive+0x1ca>
        }
        husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x0FF);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	22ff      	movs	r2, #255	; 0xff
 8005d96:	629a      	str	r2, [r3, #40]	; 0x28
      }

      /* Wait for RXNE Flag */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	2120      	movs	r1, #32
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 f84e 	bl	8005e44 <USART_WaitOnFlagUntilTimeout>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <HAL_USART_Receive+0x140>
      {
        return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e044      	b.n	8005e3c <HAL_USART_Receive+0x1ca>
      }

      if (prxdata8bits == NULL)
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10c      	bne.n	8005dd2 <HAL_USART_Receive+0x160>
      {
        *prxdata16bits = (uint16_t)(husart->Instance->RDR & uhMask);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	8a7b      	ldrh	r3, [r7, #18]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	801a      	strh	r2, [r3, #0]
        prxdata16bits++;
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	3302      	adds	r3, #2
 8005dce:	61bb      	str	r3, [r7, #24]
 8005dd0:	e00c      	b.n	8005dec <HAL_USART_Receive+0x17a>
      }
      else
      {
        *prxdata8bits = (uint8_t)(husart->Instance->RDR & (uint8_t)(uhMask & 0xFFU));
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	8a7b      	ldrh	r3, [r7, #18]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	4013      	ands	r3, r2
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	701a      	strb	r2, [r3, #0]
        prxdata8bits++;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	3301      	adds	r3, #1
 8005dea:	61fb      	str	r3, [r7, #28]
      }

      husart->RxXferCount--;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	86da      	strh	r2, [r3, #54]	; 0x36
    while (husart->RxXferCount > 0U)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1b4      	bne.n	8005d6e <HAL_USART_Receive+0xfc>

    }

    /* Clear SPI slave underrun flag and discard transmit data */
    if (husart->SlaveMode == USART_SLAVEMODE_ENABLE)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d10c      	bne.n	8005e26 <HAL_USART_Receive+0x1b4>
    {
      __HAL_USART_CLEAR_UDRFLAG(husart);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e14:	621a      	str	r2, [r3, #32]
      __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	699a      	ldr	r2, [r3, #24]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f042 0210 	orr.w	r2, r2, #16
 8005e24:	619a      	str	r2, [r3, #24]
    }

    /* At end of Rx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	e000      	b.n	8005e3c <HAL_USART_Receive+0x1ca>
  }
  else
  {
    return HAL_BUSY;
 8005e3a:	2302      	movs	r3, #2
  }
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3720      	adds	r7, #32
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	4613      	mov	r3, r2
 8005e52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005e54:	e018      	b.n	8005e88 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e5c:	d014      	beq.n	8005e88 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e5e:	f7fd fc05 	bl	800366c <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d302      	bcc.n	8005e74 <USART_WaitOnFlagUntilTimeout+0x30>
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d109      	bne.n	8005e88 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e00f      	b.n	8005ea8 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69da      	ldr	r2, [r3, #28]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	4013      	ands	r3, r2
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	bf0c      	ite	eq
 8005e98:	2301      	moveq	r3, #1
 8005e9a:	2300      	movne	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	79fb      	ldrb	r3, [r7, #7]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d0d7      	beq.n	8005e56 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	4b98      	ldr	r3, [pc, #608]	; (8006140 <USART_SetConfig+0x290>)
 8005ede:	4013      	ands	r3, r2
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6812      	ldr	r2, [r2, #0]
 8005ee4:	6979      	ldr	r1, [r7, #20]
 8005ee6:	430b      	orrs	r3, r1
 8005ee8:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8005eea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005eee:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699a      	ldr	r2, [r3, #24]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005f1e:	f023 0309 	bic.w	r3, r3, #9
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6812      	ldr	r2, [r2, #0]
 8005f26:	6979      	ldr	r1, [r7, #20]
 8005f28:	430b      	orrs	r3, r1
 8005f2a:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f32:	f023 010f 	bic.w	r1, r3, #15
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a7f      	ldr	r2, [pc, #508]	; (8006144 <USART_SetConfig+0x294>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d121      	bne.n	8005f90 <USART_SetConfig+0xe0>
 8005f4c:	4b7e      	ldr	r3, [pc, #504]	; (8006148 <USART_SetConfig+0x298>)
 8005f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f52:	f003 0303 	and.w	r3, r3, #3
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d816      	bhi.n	8005f88 <USART_SetConfig+0xd8>
 8005f5a:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <USART_SetConfig+0xb0>)
 8005f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f60:	08005f71 	.word	0x08005f71
 8005f64:	08005f7d 	.word	0x08005f7d
 8005f68:	08005f77 	.word	0x08005f77
 8005f6c:	08005f83 	.word	0x08005f83
 8005f70:	2301      	movs	r3, #1
 8005f72:	77fb      	strb	r3, [r7, #31]
 8005f74:	e06e      	b.n	8006054 <USART_SetConfig+0x1a4>
 8005f76:	2302      	movs	r3, #2
 8005f78:	77fb      	strb	r3, [r7, #31]
 8005f7a:	e06b      	b.n	8006054 <USART_SetConfig+0x1a4>
 8005f7c:	2304      	movs	r3, #4
 8005f7e:	77fb      	strb	r3, [r7, #31]
 8005f80:	e068      	b.n	8006054 <USART_SetConfig+0x1a4>
 8005f82:	2308      	movs	r3, #8
 8005f84:	77fb      	strb	r3, [r7, #31]
 8005f86:	e065      	b.n	8006054 <USART_SetConfig+0x1a4>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	77fb      	strb	r3, [r7, #31]
 8005f8c:	bf00      	nop
 8005f8e:	e061      	b.n	8006054 <USART_SetConfig+0x1a4>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a6d      	ldr	r2, [pc, #436]	; (800614c <USART_SetConfig+0x29c>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d134      	bne.n	8006004 <USART_SetConfig+0x154>
 8005f9a:	4b6b      	ldr	r3, [pc, #428]	; (8006148 <USART_SetConfig+0x298>)
 8005f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa0:	f003 030c 	and.w	r3, r3, #12
 8005fa4:	2b0c      	cmp	r3, #12
 8005fa6:	d829      	bhi.n	8005ffc <USART_SetConfig+0x14c>
 8005fa8:	a201      	add	r2, pc, #4	; (adr r2, 8005fb0 <USART_SetConfig+0x100>)
 8005faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fae:	bf00      	nop
 8005fb0:	08005fe5 	.word	0x08005fe5
 8005fb4:	08005ffd 	.word	0x08005ffd
 8005fb8:	08005ffd 	.word	0x08005ffd
 8005fbc:	08005ffd 	.word	0x08005ffd
 8005fc0:	08005ff1 	.word	0x08005ff1
 8005fc4:	08005ffd 	.word	0x08005ffd
 8005fc8:	08005ffd 	.word	0x08005ffd
 8005fcc:	08005ffd 	.word	0x08005ffd
 8005fd0:	08005feb 	.word	0x08005feb
 8005fd4:	08005ffd 	.word	0x08005ffd
 8005fd8:	08005ffd 	.word	0x08005ffd
 8005fdc:	08005ffd 	.word	0x08005ffd
 8005fe0:	08005ff7 	.word	0x08005ff7
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	77fb      	strb	r3, [r7, #31]
 8005fe8:	e034      	b.n	8006054 <USART_SetConfig+0x1a4>
 8005fea:	2302      	movs	r3, #2
 8005fec:	77fb      	strb	r3, [r7, #31]
 8005fee:	e031      	b.n	8006054 <USART_SetConfig+0x1a4>
 8005ff0:	2304      	movs	r3, #4
 8005ff2:	77fb      	strb	r3, [r7, #31]
 8005ff4:	e02e      	b.n	8006054 <USART_SetConfig+0x1a4>
 8005ff6:	2308      	movs	r3, #8
 8005ff8:	77fb      	strb	r3, [r7, #31]
 8005ffa:	e02b      	b.n	8006054 <USART_SetConfig+0x1a4>
 8005ffc:	2310      	movs	r3, #16
 8005ffe:	77fb      	strb	r3, [r7, #31]
 8006000:	bf00      	nop
 8006002:	e027      	b.n	8006054 <USART_SetConfig+0x1a4>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a51      	ldr	r2, [pc, #324]	; (8006150 <USART_SetConfig+0x2a0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d120      	bne.n	8006050 <USART_SetConfig+0x1a0>
 800600e:	4b4e      	ldr	r3, [pc, #312]	; (8006148 <USART_SetConfig+0x298>)
 8006010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006014:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006018:	2b10      	cmp	r3, #16
 800601a:	d00f      	beq.n	800603c <USART_SetConfig+0x18c>
 800601c:	2b10      	cmp	r3, #16
 800601e:	d802      	bhi.n	8006026 <USART_SetConfig+0x176>
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <USART_SetConfig+0x180>
 8006024:	e010      	b.n	8006048 <USART_SetConfig+0x198>
 8006026:	2b20      	cmp	r3, #32
 8006028:	d005      	beq.n	8006036 <USART_SetConfig+0x186>
 800602a:	2b30      	cmp	r3, #48	; 0x30
 800602c:	d009      	beq.n	8006042 <USART_SetConfig+0x192>
 800602e:	e00b      	b.n	8006048 <USART_SetConfig+0x198>
 8006030:	2300      	movs	r3, #0
 8006032:	77fb      	strb	r3, [r7, #31]
 8006034:	e00e      	b.n	8006054 <USART_SetConfig+0x1a4>
 8006036:	2302      	movs	r3, #2
 8006038:	77fb      	strb	r3, [r7, #31]
 800603a:	e00b      	b.n	8006054 <USART_SetConfig+0x1a4>
 800603c:	2304      	movs	r3, #4
 800603e:	77fb      	strb	r3, [r7, #31]
 8006040:	e008      	b.n	8006054 <USART_SetConfig+0x1a4>
 8006042:	2308      	movs	r3, #8
 8006044:	77fb      	strb	r3, [r7, #31]
 8006046:	e005      	b.n	8006054 <USART_SetConfig+0x1a4>
 8006048:	2310      	movs	r3, #16
 800604a:	77fb      	strb	r3, [r7, #31]
 800604c:	bf00      	nop
 800604e:	e001      	b.n	8006054 <USART_SetConfig+0x1a4>
 8006050:	2310      	movs	r3, #16
 8006052:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8006054:	7ffb      	ldrb	r3, [r7, #31]
 8006056:	2b08      	cmp	r3, #8
 8006058:	f200 81e5 	bhi.w	8006426 <USART_SetConfig+0x576>
 800605c:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <USART_SetConfig+0x1b4>)
 800605e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006062:	bf00      	nop
 8006064:	08006089 	.word	0x08006089
 8006068:	08006155 	.word	0x08006155
 800606c:	0800620b 	.word	0x0800620b
 8006070:	08006427 	.word	0x08006427
 8006074:	080062b1 	.word	0x080062b1
 8006078:	08006427 	.word	0x08006427
 800607c:	08006427 	.word	0x08006427
 8006080:	08006427 	.word	0x08006427
 8006084:	08006367 	.word	0x08006367
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8006088:	f7fe fc38 	bl	80048fc <HAL_RCC_GetPCLK1Freq>
 800608c:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006092:	2b00      	cmp	r3, #0
 8006094:	d044      	beq.n	8006120 <USART_SetConfig+0x270>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609a:	2b01      	cmp	r3, #1
 800609c:	d03e      	beq.n	800611c <USART_SetConfig+0x26c>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d038      	beq.n	8006118 <USART_SetConfig+0x268>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d032      	beq.n	8006114 <USART_SetConfig+0x264>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	d02c      	beq.n	8006110 <USART_SetConfig+0x260>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	2b05      	cmp	r3, #5
 80060bc:	d026      	beq.n	800610c <USART_SetConfig+0x25c>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	2b06      	cmp	r3, #6
 80060c4:	d020      	beq.n	8006108 <USART_SetConfig+0x258>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	2b07      	cmp	r3, #7
 80060cc:	d01a      	beq.n	8006104 <USART_SetConfig+0x254>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	2b08      	cmp	r3, #8
 80060d4:	d014      	beq.n	8006100 <USART_SetConfig+0x250>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	2b09      	cmp	r3, #9
 80060dc:	d00e      	beq.n	80060fc <USART_SetConfig+0x24c>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	2b0a      	cmp	r3, #10
 80060e4:	d008      	beq.n	80060f8 <USART_SetConfig+0x248>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	2b0b      	cmp	r3, #11
 80060ec:	d102      	bne.n	80060f4 <USART_SetConfig+0x244>
 80060ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060f2:	e016      	b.n	8006122 <USART_SetConfig+0x272>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e014      	b.n	8006122 <USART_SetConfig+0x272>
 80060f8:	2380      	movs	r3, #128	; 0x80
 80060fa:	e012      	b.n	8006122 <USART_SetConfig+0x272>
 80060fc:	2340      	movs	r3, #64	; 0x40
 80060fe:	e010      	b.n	8006122 <USART_SetConfig+0x272>
 8006100:	2320      	movs	r3, #32
 8006102:	e00e      	b.n	8006122 <USART_SetConfig+0x272>
 8006104:	2310      	movs	r3, #16
 8006106:	e00c      	b.n	8006122 <USART_SetConfig+0x272>
 8006108:	230c      	movs	r3, #12
 800610a:	e00a      	b.n	8006122 <USART_SetConfig+0x272>
 800610c:	230a      	movs	r3, #10
 800610e:	e008      	b.n	8006122 <USART_SetConfig+0x272>
 8006110:	2308      	movs	r3, #8
 8006112:	e006      	b.n	8006122 <USART_SetConfig+0x272>
 8006114:	2306      	movs	r3, #6
 8006116:	e004      	b.n	8006122 <USART_SetConfig+0x272>
 8006118:	2304      	movs	r3, #4
 800611a:	e002      	b.n	8006122 <USART_SetConfig+0x272>
 800611c:	2302      	movs	r3, #2
 800611e:	e000      	b.n	8006122 <USART_SetConfig+0x272>
 8006120:	2301      	movs	r3, #1
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	fbb2 f3f3 	udiv	r3, r2, r3
 8006128:	005a      	lsls	r2, r3, #1
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	085b      	lsrs	r3, r3, #1
 8006130:	441a      	add	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	fbb2 f3f3 	udiv	r3, r2, r3
 800613a:	61bb      	str	r3, [r7, #24]
      break;
 800613c:	e176      	b.n	800642c <USART_SetConfig+0x57c>
 800613e:	bf00      	nop
 8006140:	cfff69f3 	.word	0xcfff69f3
 8006144:	40013800 	.word	0x40013800
 8006148:	40021000 	.word	0x40021000
 800614c:	40004400 	.word	0x40004400
 8006150:	40004800 	.word	0x40004800
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8006154:	f7fe fbe8 	bl	8004928 <HAL_RCC_GetPCLK2Freq>
 8006158:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615e:	2b00      	cmp	r3, #0
 8006160:	d044      	beq.n	80061ec <USART_SetConfig+0x33c>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	2b01      	cmp	r3, #1
 8006168:	d03e      	beq.n	80061e8 <USART_SetConfig+0x338>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	2b02      	cmp	r3, #2
 8006170:	d038      	beq.n	80061e4 <USART_SetConfig+0x334>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006176:	2b03      	cmp	r3, #3
 8006178:	d032      	beq.n	80061e0 <USART_SetConfig+0x330>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	2b04      	cmp	r3, #4
 8006180:	d02c      	beq.n	80061dc <USART_SetConfig+0x32c>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	2b05      	cmp	r3, #5
 8006188:	d026      	beq.n	80061d8 <USART_SetConfig+0x328>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	2b06      	cmp	r3, #6
 8006190:	d020      	beq.n	80061d4 <USART_SetConfig+0x324>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	2b07      	cmp	r3, #7
 8006198:	d01a      	beq.n	80061d0 <USART_SetConfig+0x320>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	2b08      	cmp	r3, #8
 80061a0:	d014      	beq.n	80061cc <USART_SetConfig+0x31c>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	2b09      	cmp	r3, #9
 80061a8:	d00e      	beq.n	80061c8 <USART_SetConfig+0x318>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	2b0a      	cmp	r3, #10
 80061b0:	d008      	beq.n	80061c4 <USART_SetConfig+0x314>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	2b0b      	cmp	r3, #11
 80061b8:	d102      	bne.n	80061c0 <USART_SetConfig+0x310>
 80061ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061be:	e016      	b.n	80061ee <USART_SetConfig+0x33e>
 80061c0:	2301      	movs	r3, #1
 80061c2:	e014      	b.n	80061ee <USART_SetConfig+0x33e>
 80061c4:	2380      	movs	r3, #128	; 0x80
 80061c6:	e012      	b.n	80061ee <USART_SetConfig+0x33e>
 80061c8:	2340      	movs	r3, #64	; 0x40
 80061ca:	e010      	b.n	80061ee <USART_SetConfig+0x33e>
 80061cc:	2320      	movs	r3, #32
 80061ce:	e00e      	b.n	80061ee <USART_SetConfig+0x33e>
 80061d0:	2310      	movs	r3, #16
 80061d2:	e00c      	b.n	80061ee <USART_SetConfig+0x33e>
 80061d4:	230c      	movs	r3, #12
 80061d6:	e00a      	b.n	80061ee <USART_SetConfig+0x33e>
 80061d8:	230a      	movs	r3, #10
 80061da:	e008      	b.n	80061ee <USART_SetConfig+0x33e>
 80061dc:	2308      	movs	r3, #8
 80061de:	e006      	b.n	80061ee <USART_SetConfig+0x33e>
 80061e0:	2306      	movs	r3, #6
 80061e2:	e004      	b.n	80061ee <USART_SetConfig+0x33e>
 80061e4:	2304      	movs	r3, #4
 80061e6:	e002      	b.n	80061ee <USART_SetConfig+0x33e>
 80061e8:	2302      	movs	r3, #2
 80061ea:	e000      	b.n	80061ee <USART_SetConfig+0x33e>
 80061ec:	2301      	movs	r3, #1
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f4:	005a      	lsls	r2, r3, #1
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	085b      	lsrs	r3, r3, #1
 80061fc:	441a      	add	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	fbb2 f3f3 	udiv	r3, r2, r3
 8006206:	61bb      	str	r3, [r7, #24]
      break;
 8006208:	e110      	b.n	800642c <USART_SetConfig+0x57c>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	2b00      	cmp	r3, #0
 8006210:	d043      	beq.n	800629a <USART_SetConfig+0x3ea>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006216:	2b01      	cmp	r3, #1
 8006218:	d03d      	beq.n	8006296 <USART_SetConfig+0x3e6>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	2b02      	cmp	r3, #2
 8006220:	d037      	beq.n	8006292 <USART_SetConfig+0x3e2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	2b03      	cmp	r3, #3
 8006228:	d031      	beq.n	800628e <USART_SetConfig+0x3de>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	2b04      	cmp	r3, #4
 8006230:	d02b      	beq.n	800628a <USART_SetConfig+0x3da>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	2b05      	cmp	r3, #5
 8006238:	d025      	beq.n	8006286 <USART_SetConfig+0x3d6>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	2b06      	cmp	r3, #6
 8006240:	d01f      	beq.n	8006282 <USART_SetConfig+0x3d2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	2b07      	cmp	r3, #7
 8006248:	d019      	beq.n	800627e <USART_SetConfig+0x3ce>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	2b08      	cmp	r3, #8
 8006250:	d013      	beq.n	800627a <USART_SetConfig+0x3ca>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	2b09      	cmp	r3, #9
 8006258:	d00d      	beq.n	8006276 <USART_SetConfig+0x3c6>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	2b0a      	cmp	r3, #10
 8006260:	d007      	beq.n	8006272 <USART_SetConfig+0x3c2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	2b0b      	cmp	r3, #11
 8006268:	d101      	bne.n	800626e <USART_SetConfig+0x3be>
 800626a:	4b87      	ldr	r3, [pc, #540]	; (8006488 <USART_SetConfig+0x5d8>)
 800626c:	e016      	b.n	800629c <USART_SetConfig+0x3ec>
 800626e:	4b87      	ldr	r3, [pc, #540]	; (800648c <USART_SetConfig+0x5dc>)
 8006270:	e014      	b.n	800629c <USART_SetConfig+0x3ec>
 8006272:	4b87      	ldr	r3, [pc, #540]	; (8006490 <USART_SetConfig+0x5e0>)
 8006274:	e012      	b.n	800629c <USART_SetConfig+0x3ec>
 8006276:	4b87      	ldr	r3, [pc, #540]	; (8006494 <USART_SetConfig+0x5e4>)
 8006278:	e010      	b.n	800629c <USART_SetConfig+0x3ec>
 800627a:	4b87      	ldr	r3, [pc, #540]	; (8006498 <USART_SetConfig+0x5e8>)
 800627c:	e00e      	b.n	800629c <USART_SetConfig+0x3ec>
 800627e:	4b87      	ldr	r3, [pc, #540]	; (800649c <USART_SetConfig+0x5ec>)
 8006280:	e00c      	b.n	800629c <USART_SetConfig+0x3ec>
 8006282:	4b87      	ldr	r3, [pc, #540]	; (80064a0 <USART_SetConfig+0x5f0>)
 8006284:	e00a      	b.n	800629c <USART_SetConfig+0x3ec>
 8006286:	4b87      	ldr	r3, [pc, #540]	; (80064a4 <USART_SetConfig+0x5f4>)
 8006288:	e008      	b.n	800629c <USART_SetConfig+0x3ec>
 800628a:	4b87      	ldr	r3, [pc, #540]	; (80064a8 <USART_SetConfig+0x5f8>)
 800628c:	e006      	b.n	800629c <USART_SetConfig+0x3ec>
 800628e:	4b87      	ldr	r3, [pc, #540]	; (80064ac <USART_SetConfig+0x5fc>)
 8006290:	e004      	b.n	800629c <USART_SetConfig+0x3ec>
 8006292:	4b87      	ldr	r3, [pc, #540]	; (80064b0 <USART_SetConfig+0x600>)
 8006294:	e002      	b.n	800629c <USART_SetConfig+0x3ec>
 8006296:	4b87      	ldr	r3, [pc, #540]	; (80064b4 <USART_SetConfig+0x604>)
 8006298:	e000      	b.n	800629c <USART_SetConfig+0x3ec>
 800629a:	4b7c      	ldr	r3, [pc, #496]	; (800648c <USART_SetConfig+0x5dc>)
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6852      	ldr	r2, [r2, #4]
 80062a0:	0852      	lsrs	r2, r2, #1
 80062a2:	441a      	add	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ac:	61bb      	str	r3, [r7, #24]
      break;
 80062ae:	e0bd      	b.n	800642c <USART_SetConfig+0x57c>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80062b0:	f7fe fab6 	bl	8004820 <HAL_RCC_GetSysClockFreq>
 80062b4:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d044      	beq.n	8006348 <USART_SetConfig+0x498>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d03e      	beq.n	8006344 <USART_SetConfig+0x494>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d038      	beq.n	8006340 <USART_SetConfig+0x490>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d032      	beq.n	800633c <USART_SetConfig+0x48c>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d02c      	beq.n	8006338 <USART_SetConfig+0x488>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	2b05      	cmp	r3, #5
 80062e4:	d026      	beq.n	8006334 <USART_SetConfig+0x484>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	2b06      	cmp	r3, #6
 80062ec:	d020      	beq.n	8006330 <USART_SetConfig+0x480>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	2b07      	cmp	r3, #7
 80062f4:	d01a      	beq.n	800632c <USART_SetConfig+0x47c>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fa:	2b08      	cmp	r3, #8
 80062fc:	d014      	beq.n	8006328 <USART_SetConfig+0x478>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	2b09      	cmp	r3, #9
 8006304:	d00e      	beq.n	8006324 <USART_SetConfig+0x474>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	2b0a      	cmp	r3, #10
 800630c:	d008      	beq.n	8006320 <USART_SetConfig+0x470>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006312:	2b0b      	cmp	r3, #11
 8006314:	d102      	bne.n	800631c <USART_SetConfig+0x46c>
 8006316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800631a:	e016      	b.n	800634a <USART_SetConfig+0x49a>
 800631c:	2301      	movs	r3, #1
 800631e:	e014      	b.n	800634a <USART_SetConfig+0x49a>
 8006320:	2380      	movs	r3, #128	; 0x80
 8006322:	e012      	b.n	800634a <USART_SetConfig+0x49a>
 8006324:	2340      	movs	r3, #64	; 0x40
 8006326:	e010      	b.n	800634a <USART_SetConfig+0x49a>
 8006328:	2320      	movs	r3, #32
 800632a:	e00e      	b.n	800634a <USART_SetConfig+0x49a>
 800632c:	2310      	movs	r3, #16
 800632e:	e00c      	b.n	800634a <USART_SetConfig+0x49a>
 8006330:	230c      	movs	r3, #12
 8006332:	e00a      	b.n	800634a <USART_SetConfig+0x49a>
 8006334:	230a      	movs	r3, #10
 8006336:	e008      	b.n	800634a <USART_SetConfig+0x49a>
 8006338:	2308      	movs	r3, #8
 800633a:	e006      	b.n	800634a <USART_SetConfig+0x49a>
 800633c:	2306      	movs	r3, #6
 800633e:	e004      	b.n	800634a <USART_SetConfig+0x49a>
 8006340:	2304      	movs	r3, #4
 8006342:	e002      	b.n	800634a <USART_SetConfig+0x49a>
 8006344:	2302      	movs	r3, #2
 8006346:	e000      	b.n	800634a <USART_SetConfig+0x49a>
 8006348:	2301      	movs	r3, #1
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006350:	005a      	lsls	r2, r3, #1
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	085b      	lsrs	r3, r3, #1
 8006358:	441a      	add	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006362:	61bb      	str	r3, [r7, #24]
      break;
 8006364:	e062      	b.n	800642c <USART_SetConfig+0x57c>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	2b00      	cmp	r3, #0
 800636c:	d04f      	beq.n	800640e <USART_SetConfig+0x55e>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	2b01      	cmp	r3, #1
 8006374:	d048      	beq.n	8006408 <USART_SetConfig+0x558>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	2b02      	cmp	r3, #2
 800637c:	d041      	beq.n	8006402 <USART_SetConfig+0x552>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	2b03      	cmp	r3, #3
 8006384:	d03a      	beq.n	80063fc <USART_SetConfig+0x54c>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	2b04      	cmp	r3, #4
 800638c:	d033      	beq.n	80063f6 <USART_SetConfig+0x546>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006392:	2b05      	cmp	r3, #5
 8006394:	d02c      	beq.n	80063f0 <USART_SetConfig+0x540>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	2b06      	cmp	r3, #6
 800639c:	d025      	beq.n	80063ea <USART_SetConfig+0x53a>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a2:	2b07      	cmp	r3, #7
 80063a4:	d01e      	beq.n	80063e4 <USART_SetConfig+0x534>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	2b08      	cmp	r3, #8
 80063ac:	d017      	beq.n	80063de <USART_SetConfig+0x52e>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	2b09      	cmp	r3, #9
 80063b4:	d010      	beq.n	80063d8 <USART_SetConfig+0x528>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	2b0a      	cmp	r3, #10
 80063bc:	d009      	beq.n	80063d2 <USART_SetConfig+0x522>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	2b0b      	cmp	r3, #11
 80063c4:	d102      	bne.n	80063cc <USART_SetConfig+0x51c>
 80063c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063ca:	e022      	b.n	8006412 <USART_SetConfig+0x562>
 80063cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80063d0:	e01f      	b.n	8006412 <USART_SetConfig+0x562>
 80063d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063d6:	e01c      	b.n	8006412 <USART_SetConfig+0x562>
 80063d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063dc:	e019      	b.n	8006412 <USART_SetConfig+0x562>
 80063de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063e2:	e016      	b.n	8006412 <USART_SetConfig+0x562>
 80063e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063e8:	e013      	b.n	8006412 <USART_SetConfig+0x562>
 80063ea:	f241 5354 	movw	r3, #5460	; 0x1554
 80063ee:	e010      	b.n	8006412 <USART_SetConfig+0x562>
 80063f0:	f641 1398 	movw	r3, #6552	; 0x1998
 80063f4:	e00d      	b.n	8006412 <USART_SetConfig+0x562>
 80063f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063fa:	e00a      	b.n	8006412 <USART_SetConfig+0x562>
 80063fc:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8006400:	e007      	b.n	8006412 <USART_SetConfig+0x562>
 8006402:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006406:	e004      	b.n	8006412 <USART_SetConfig+0x562>
 8006408:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800640c:	e001      	b.n	8006412 <USART_SetConfig+0x562>
 800640e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6852      	ldr	r2, [r2, #4]
 8006416:	0852      	lsrs	r2, r2, #1
 8006418:	441a      	add	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006422:	61bb      	str	r3, [r7, #24]
      break;
 8006424:	e002      	b.n	800642c <USART_SetConfig+0x57c>
    default:
      ret = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	77bb      	strb	r3, [r7, #30]
      break;
 800642a:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	2b0f      	cmp	r3, #15
 8006430:	d916      	bls.n	8006460 <USART_SetConfig+0x5b0>
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006438:	d212      	bcs.n	8006460 <USART_SetConfig+0x5b0>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	b29b      	uxth	r3, r3
 800643e:	f023 030f 	bic.w	r3, r3, #15
 8006442:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	085b      	lsrs	r3, r3, #1
 8006448:	b29b      	uxth	r3, r3
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	b29a      	uxth	r2, r3
 8006450:	89fb      	ldrh	r3, [r7, #14]
 8006452:	4313      	orrs	r3, r2
 8006454:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	89fa      	ldrh	r2, [r7, #14]
 800645c:	60da      	str	r2, [r3, #12]
 800645e:	e001      	b.n	8006464 <USART_SetConfig+0x5b4>
  }
  else
  {
    ret = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	77bb      	strb	r3, [r7, #30]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800647c:	7fbb      	ldrb	r3, [r7, #30]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3720      	adds	r7, #32
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	0001e848 	.word	0x0001e848
 800648c:	01e84800 	.word	0x01e84800
 8006490:	0003d090 	.word	0x0003d090
 8006494:	0007a120 	.word	0x0007a120
 8006498:	000f4240 	.word	0x000f4240
 800649c:	001e8480 	.word	0x001e8480
 80064a0:	0028b0aa 	.word	0x0028b0aa
 80064a4:	0030d400 	.word	0x0030d400
 80064a8:	003d0900 	.word	0x003d0900
 80064ac:	00516154 	.word	0x00516154
 80064b0:	007a1200 	.word	0x007a1200
 80064b4:	00f42400 	.word	0x00f42400

080064b8 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af02      	add	r7, sp, #8
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064c6:	f7fd f8d1 	bl	800366c <HAL_GetTick>
 80064ca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0308 	and.w	r3, r3, #8
 80064d6:	2b08      	cmp	r3, #8
 80064d8:	d10e      	bne.n	80064f8 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80064da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7ff fcab 	bl	8005e44 <USART_WaitOnFlagUntilTimeout>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e01e      	b.n	8006536 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0304 	and.w	r3, r3, #4
 8006502:	2b04      	cmp	r3, #4
 8006504:	d10e      	bne.n	8006524 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8006506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7ff fc95 	bl	8005e44 <USART_WaitOnFlagUntilTimeout>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e008      	b.n	8006536 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800653e:	b480      	push	{r7}
 8006540:	b085      	sub	sp, #20
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800654c:	2b01      	cmp	r3, #1
 800654e:	d101      	bne.n	8006554 <HAL_USARTEx_DisableFifoMode+0x16>
 8006550:	2302      	movs	r3, #2
 8006552:	e027      	b.n	80065a4 <HAL_USARTEx_DisableFifoMode+0x66>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 0201 	bic.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006582:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d101      	bne.n	80065c8 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 80065c4:	2302      	movs	r3, #2
 80065c6:	e02d      	b.n	8006624 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0201 	bic.w	r2, r2, #1
 80065ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f84f 	bl	80066a8 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8006640:	2302      	movs	r3, #2
 8006642:	e02d      	b.n	80066a0 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 0201 	bic.w	r2, r2, #1
 800666a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f811 	bl	80066a8 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b089      	sub	sp, #36	; 0x24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80066b0:	4a2d      	ldr	r2, [pc, #180]	; (8006768 <USARTEx_SetNbDataToProcess+0xc0>)
 80066b2:	f107 0314 	add.w	r3, r7, #20
 80066b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066ba:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80066be:	4a2b      	ldr	r2, [pc, #172]	; (800676c <USARTEx_SetNbDataToProcess+0xc4>)
 80066c0:	f107 030c 	add.w	r3, r7, #12
 80066c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066c8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d106      	bne.n	80066e2 <USARTEx_SetNbDataToProcess+0x3a>
  {
    husart->NbTxDataToProcess = 1U;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066e0:	e03b      	b.n	800675a <USARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066e2:	2308      	movs	r3, #8
 80066e4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066e6:	2308      	movs	r3, #8
 80066e8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 80066f0:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8006700:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8006702:	b2db      	uxtb	r3, r3
 8006704:	f003 0307 	and.w	r3, r3, #7
 8006708:	773b      	strb	r3, [r7, #28]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800670a:	7fbb      	ldrb	r3, [r7, #30]
 800670c:	7f3a      	ldrb	r2, [r7, #28]
 800670e:	f107 0120 	add.w	r1, r7, #32
 8006712:	440a      	add	r2, r1
 8006714:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006718:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800671c:	7f3a      	ldrb	r2, [r7, #28]
 800671e:	f107 0120 	add.w	r1, r7, #32
 8006722:	440a      	add	r2, r1
 8006724:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006728:	fb93 f3f2 	sdiv	r3, r3, r2
 800672c:	b29a      	uxth	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006732:	7ffb      	ldrb	r3, [r7, #31]
 8006734:	7f7a      	ldrb	r2, [r7, #29]
 8006736:	f107 0120 	add.w	r1, r7, #32
 800673a:	440a      	add	r2, r1
 800673c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006740:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 8006744:	7f7a      	ldrb	r2, [r7, #29]
 8006746:	f107 0120 	add.w	r1, r7, #32
 800674a:	440a      	add	r2, r1
 800674c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006750:	fb93 f3f2 	sdiv	r3, r3, r2
 8006754:	b29a      	uxth	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 800675a:	bf00      	nop
 800675c:	3724      	adds	r7, #36	; 0x24
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	080096c0 	.word	0x080096c0
 800676c:	080096c8 	.word	0x080096c8

08006770 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006774:	bf00      	nop
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
	...

08006780 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006786:	f3ef 8305 	mrs	r3, IPSR
 800678a:	60bb      	str	r3, [r7, #8]
  return(result);
 800678c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10f      	bne.n	80067b2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006792:	f3ef 8310 	mrs	r3, PRIMASK
 8006796:	607b      	str	r3, [r7, #4]
  return(result);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d105      	bne.n	80067aa <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800679e:	f3ef 8311 	mrs	r3, BASEPRI
 80067a2:	603b      	str	r3, [r7, #0]
  return(result);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d007      	beq.n	80067ba <osKernelInitialize+0x3a>
 80067aa:	4b0e      	ldr	r3, [pc, #56]	; (80067e4 <osKernelInitialize+0x64>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d103      	bne.n	80067ba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80067b2:	f06f 0305 	mvn.w	r3, #5
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	e00c      	b.n	80067d4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80067ba:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <osKernelInitialize+0x64>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d105      	bne.n	80067ce <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80067c2:	4b08      	ldr	r3, [pc, #32]	; (80067e4 <osKernelInitialize+0x64>)
 80067c4:	2201      	movs	r2, #1
 80067c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80067c8:	2300      	movs	r3, #0
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	e002      	b.n	80067d4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80067ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80067d4:	68fb      	ldr	r3, [r7, #12]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	20000838 	.word	0x20000838

080067e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067ee:	f3ef 8305 	mrs	r3, IPSR
 80067f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80067f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10f      	bne.n	800681a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067fa:	f3ef 8310 	mrs	r3, PRIMASK
 80067fe:	607b      	str	r3, [r7, #4]
  return(result);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d105      	bne.n	8006812 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006806:	f3ef 8311 	mrs	r3, BASEPRI
 800680a:	603b      	str	r3, [r7, #0]
  return(result);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d007      	beq.n	8006822 <osKernelStart+0x3a>
 8006812:	4b0f      	ldr	r3, [pc, #60]	; (8006850 <osKernelStart+0x68>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b02      	cmp	r3, #2
 8006818:	d103      	bne.n	8006822 <osKernelStart+0x3a>
    stat = osErrorISR;
 800681a:	f06f 0305 	mvn.w	r3, #5
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	e010      	b.n	8006844 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006822:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <osKernelStart+0x68>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d109      	bne.n	800683e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800682a:	f7ff ffa1 	bl	8006770 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800682e:	4b08      	ldr	r3, [pc, #32]	; (8006850 <osKernelStart+0x68>)
 8006830:	2202      	movs	r2, #2
 8006832:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006834:	f001 f870 	bl	8007918 <vTaskStartScheduler>
      stat = osOK;
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	e002      	b.n	8006844 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800683e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006842:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006844:	68fb      	ldr	r3, [r7, #12]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	20000838 	.word	0x20000838

08006854 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006854:	b580      	push	{r7, lr}
 8006856:	b090      	sub	sp, #64	; 0x40
 8006858:	af04      	add	r7, sp, #16
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006860:	2300      	movs	r3, #0
 8006862:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006864:	f3ef 8305 	mrs	r3, IPSR
 8006868:	61fb      	str	r3, [r7, #28]
  return(result);
 800686a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800686c:	2b00      	cmp	r3, #0
 800686e:	f040 808f 	bne.w	8006990 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006872:	f3ef 8310 	mrs	r3, PRIMASK
 8006876:	61bb      	str	r3, [r7, #24]
  return(result);
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d105      	bne.n	800688a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800687e:	f3ef 8311 	mrs	r3, BASEPRI
 8006882:	617b      	str	r3, [r7, #20]
  return(result);
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <osThreadNew+0x3e>
 800688a:	4b44      	ldr	r3, [pc, #272]	; (800699c <osThreadNew+0x148>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b02      	cmp	r3, #2
 8006890:	d07e      	beq.n	8006990 <osThreadNew+0x13c>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d07b      	beq.n	8006990 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006898:	2380      	movs	r3, #128	; 0x80
 800689a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800689c:	2318      	movs	r3, #24
 800689e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80068a0:	2300      	movs	r3, #0
 80068a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80068a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068a8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d045      	beq.n	800693c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <osThreadNew+0x6a>
        name = attr->name;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d008      	beq.n	80068e4 <osThreadNew+0x90>
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	2b38      	cmp	r3, #56	; 0x38
 80068d6:	d805      	bhi.n	80068e4 <osThreadNew+0x90>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <osThreadNew+0x94>
        return (NULL);
 80068e4:	2300      	movs	r3, #0
 80068e6:	e054      	b.n	8006992 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	089b      	lsrs	r3, r3, #2
 80068f6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00e      	beq.n	800691e <osThreadNew+0xca>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	2b5b      	cmp	r3, #91	; 0x5b
 8006906:	d90a      	bls.n	800691e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800690c:	2b00      	cmp	r3, #0
 800690e:	d006      	beq.n	800691e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <osThreadNew+0xca>
        mem = 1;
 8006918:	2301      	movs	r3, #1
 800691a:	623b      	str	r3, [r7, #32]
 800691c:	e010      	b.n	8006940 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10c      	bne.n	8006940 <osThreadNew+0xec>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d108      	bne.n	8006940 <osThreadNew+0xec>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d104      	bne.n	8006940 <osThreadNew+0xec>
          mem = 0;
 8006936:	2300      	movs	r3, #0
 8006938:	623b      	str	r3, [r7, #32]
 800693a:	e001      	b.n	8006940 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d110      	bne.n	8006968 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800694e:	9202      	str	r2, [sp, #8]
 8006950:	9301      	str	r3, [sp, #4]
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800695a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 fe09 	bl	8007574 <xTaskCreateStatic>
 8006962:	4603      	mov	r3, r0
 8006964:	613b      	str	r3, [r7, #16]
 8006966:	e013      	b.n	8006990 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006968:	6a3b      	ldr	r3, [r7, #32]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d110      	bne.n	8006990 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006970:	b29a      	uxth	r2, r3
 8006972:	f107 0310 	add.w	r3, r7, #16
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 fe51 	bl	8007628 <xTaskCreate>
 8006986:	4603      	mov	r3, r0
 8006988:	2b01      	cmp	r3, #1
 800698a:	d001      	beq.n	8006990 <osThreadNew+0x13c>
          hTask = NULL;
 800698c:	2300      	movs	r3, #0
 800698e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006990:	693b      	ldr	r3, [r7, #16]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3730      	adds	r7, #48	; 0x30
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20000838 	.word	0x20000838

080069a0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069a8:	f3ef 8305 	mrs	r3, IPSR
 80069ac:	613b      	str	r3, [r7, #16]
  return(result);
 80069ae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10f      	bne.n	80069d4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069b4:	f3ef 8310 	mrs	r3, PRIMASK
 80069b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d105      	bne.n	80069cc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069c0:	f3ef 8311 	mrs	r3, BASEPRI
 80069c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d007      	beq.n	80069dc <osDelay+0x3c>
 80069cc:	4b0a      	ldr	r3, [pc, #40]	; (80069f8 <osDelay+0x58>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d103      	bne.n	80069dc <osDelay+0x3c>
    stat = osErrorISR;
 80069d4:	f06f 0305 	mvn.w	r3, #5
 80069d8:	617b      	str	r3, [r7, #20]
 80069da:	e007      	b.n	80069ec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80069dc:	2300      	movs	r3, #0
 80069de:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <osDelay+0x4c>
      vTaskDelay(ticks);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 ff62 	bl	80078b0 <vTaskDelay>
    }
  }

  return (stat);
 80069ec:	697b      	ldr	r3, [r7, #20]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20000838 	.word	0x20000838

080069fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4a07      	ldr	r2, [pc, #28]	; (8006a28 <vApplicationGetIdleTaskMemory+0x2c>)
 8006a0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	4a06      	ldr	r2, [pc, #24]	; (8006a2c <vApplicationGetIdleTaskMemory+0x30>)
 8006a12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2280      	movs	r2, #128	; 0x80
 8006a18:	601a      	str	r2, [r3, #0]
}
 8006a1a:	bf00      	nop
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	2000083c 	.word	0x2000083c
 8006a2c:	20000898 	.word	0x20000898

08006a30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4a07      	ldr	r2, [pc, #28]	; (8006a5c <vApplicationGetTimerTaskMemory+0x2c>)
 8006a40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	4a06      	ldr	r2, [pc, #24]	; (8006a60 <vApplicationGetTimerTaskMemory+0x30>)
 8006a46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a4e:	601a      	str	r2, [r3, #0]
}
 8006a50:	bf00      	nop
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	20000a98 	.word	0x20000a98
 8006a60:	20000af4 	.word	0x20000af4

08006a64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f103 0208 	add.w	r2, r3, #8
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f103 0208 	add.w	r2, r3, #8
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f103 0208 	add.w	r2, r3, #8
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ab2:	bf00      	nop
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b085      	sub	sp, #20
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	601a      	str	r2, [r3, #0]
}
 8006afa:	bf00      	nop
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b06:	b480      	push	{r7}
 8006b08:	b085      	sub	sp, #20
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b1c:	d103      	bne.n	8006b26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	e00c      	b.n	8006b40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	3308      	adds	r3, #8
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	e002      	b.n	8006b34 <vListInsert+0x2e>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	60fb      	str	r3, [r7, #12]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d2f6      	bcs.n	8006b2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	601a      	str	r2, [r3, #0]
}
 8006b6c:	bf00      	nop
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6892      	ldr	r2, [r2, #8]
 8006b8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6852      	ldr	r2, [r2, #4]
 8006b98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d103      	bne.n	8006bac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	1e5a      	subs	r2, r3, #1
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d109      	bne.n	8006bf4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	60bb      	str	r3, [r7, #8]
 8006bf2:	e7fe      	b.n	8006bf2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006bf4:	f002 f812 	bl	8008c1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c00:	68f9      	ldr	r1, [r7, #12]
 8006c02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c04:	fb01 f303 	mul.w	r3, r1, r3
 8006c08:	441a      	add	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c24:	3b01      	subs	r3, #1
 8006c26:	68f9      	ldr	r1, [r7, #12]
 8006c28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c2a:	fb01 f303 	mul.w	r3, r1, r3
 8006c2e:	441a      	add	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	22ff      	movs	r2, #255	; 0xff
 8006c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	22ff      	movs	r2, #255	; 0xff
 8006c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d114      	bne.n	8006c74 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d01a      	beq.n	8006c88 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	3310      	adds	r3, #16
 8006c56:	4618      	mov	r0, r3
 8006c58:	f001 f8de 	bl	8007e18 <xTaskRemoveFromEventList>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d012      	beq.n	8006c88 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c62:	4b0d      	ldr	r3, [pc, #52]	; (8006c98 <xQueueGenericReset+0xcc>)
 8006c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c68:	601a      	str	r2, [r3, #0]
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	e009      	b.n	8006c88 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3310      	adds	r3, #16
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff fef3 	bl	8006a64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3324      	adds	r3, #36	; 0x24
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7ff feee 	bl	8006a64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c88:	f001 fff6 	bl	8008c78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c8c:	2301      	movs	r3, #1
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	e000ed04 	.word	0xe000ed04

08006c9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08e      	sub	sp, #56	; 0x38
 8006ca0:	af02      	add	r7, sp, #8
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d109      	bne.n	8006cc4 <xQueueGenericCreateStatic+0x28>
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cc2:	e7fe      	b.n	8006cc2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d109      	bne.n	8006cde <xQueueGenericCreateStatic+0x42>
 8006cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cce:	f383 8811 	msr	BASEPRI, r3
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	627b      	str	r3, [r7, #36]	; 0x24
 8006cdc:	e7fe      	b.n	8006cdc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <xQueueGenericCreateStatic+0x4e>
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <xQueueGenericCreateStatic+0x52>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e000      	b.n	8006cf0 <xQueueGenericCreateStatic+0x54>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d109      	bne.n	8006d08 <xQueueGenericCreateStatic+0x6c>
 8006cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	623b      	str	r3, [r7, #32]
 8006d06:	e7fe      	b.n	8006d06 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d102      	bne.n	8006d14 <xQueueGenericCreateStatic+0x78>
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <xQueueGenericCreateStatic+0x7c>
 8006d14:	2301      	movs	r3, #1
 8006d16:	e000      	b.n	8006d1a <xQueueGenericCreateStatic+0x7e>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d109      	bne.n	8006d32 <xQueueGenericCreateStatic+0x96>
 8006d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	61fb      	str	r3, [r7, #28]
 8006d30:	e7fe      	b.n	8006d30 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006d32:	2350      	movs	r3, #80	; 0x50
 8006d34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	2b50      	cmp	r3, #80	; 0x50
 8006d3a:	d009      	beq.n	8006d50 <xQueueGenericCreateStatic+0xb4>
 8006d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	61bb      	str	r3, [r7, #24]
 8006d4e:	e7fe      	b.n	8006d4e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00d      	beq.n	8006d78 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d64:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	68b9      	ldr	r1, [r7, #8]
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f000 f805 	bl	8006d82 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3730      	adds	r7, #48	; 0x30
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	607a      	str	r2, [r7, #4]
 8006d8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d103      	bne.n	8006d9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	e002      	b.n	8006da4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006db0:	2101      	movs	r1, #1
 8006db2:	69b8      	ldr	r0, [r7, #24]
 8006db4:	f7ff ff0a 	bl	8006bcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	78fa      	ldrb	r2, [r7, #3]
 8006dbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006dc0:	bf00      	nop
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08e      	sub	sp, #56	; 0x38
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d109      	bne.n	8006df8 <xQueueGenericSend+0x30>
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006df6:	e7fe      	b.n	8006df6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d103      	bne.n	8006e06 <xQueueGenericSend+0x3e>
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d101      	bne.n	8006e0a <xQueueGenericSend+0x42>
 8006e06:	2301      	movs	r3, #1
 8006e08:	e000      	b.n	8006e0c <xQueueGenericSend+0x44>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d109      	bne.n	8006e24 <xQueueGenericSend+0x5c>
 8006e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
 8006e22:	e7fe      	b.n	8006e22 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d103      	bne.n	8006e32 <xQueueGenericSend+0x6a>
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d101      	bne.n	8006e36 <xQueueGenericSend+0x6e>
 8006e32:	2301      	movs	r3, #1
 8006e34:	e000      	b.n	8006e38 <xQueueGenericSend+0x70>
 8006e36:	2300      	movs	r3, #0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d109      	bne.n	8006e50 <xQueueGenericSend+0x88>
 8006e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	623b      	str	r3, [r7, #32]
 8006e4e:	e7fe      	b.n	8006e4e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e50:	f001 f998 	bl	8008184 <xTaskGetSchedulerState>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d102      	bne.n	8006e60 <xQueueGenericSend+0x98>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <xQueueGenericSend+0x9c>
 8006e60:	2301      	movs	r3, #1
 8006e62:	e000      	b.n	8006e66 <xQueueGenericSend+0x9e>
 8006e64:	2300      	movs	r3, #0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d109      	bne.n	8006e7e <xQueueGenericSend+0xb6>
 8006e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	61fb      	str	r3, [r7, #28]
 8006e7c:	e7fe      	b.n	8006e7c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e7e:	f001 fecd 	bl	8008c1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d302      	bcc.n	8006e94 <xQueueGenericSend+0xcc>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d129      	bne.n	8006ee8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	68b9      	ldr	r1, [r7, #8]
 8006e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e9a:	f000 f9ff 	bl	800729c <prvCopyDataToQueue>
 8006e9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d010      	beq.n	8006eca <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eaa:	3324      	adds	r3, #36	; 0x24
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 ffb3 	bl	8007e18 <xTaskRemoveFromEventList>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d013      	beq.n	8006ee0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006eb8:	4b3f      	ldr	r3, [pc, #252]	; (8006fb8 <xQueueGenericSend+0x1f0>)
 8006eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	e00a      	b.n	8006ee0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d007      	beq.n	8006ee0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ed0:	4b39      	ldr	r3, [pc, #228]	; (8006fb8 <xQueueGenericSend+0x1f0>)
 8006ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ee0:	f001 feca 	bl	8008c78 <vPortExitCritical>
				return pdPASS;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e063      	b.n	8006fb0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d103      	bne.n	8006ef6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006eee:	f001 fec3 	bl	8008c78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	e05c      	b.n	8006fb0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d106      	bne.n	8006f0a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006efc:	f107 0314 	add.w	r3, r7, #20
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 ffeb 	bl	8007edc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f06:	2301      	movs	r3, #1
 8006f08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f0a:	f001 feb5 	bl	8008c78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f0e:	f000 fd67 	bl	80079e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f12:	f001 fe83 	bl	8008c1c <vPortEnterCritical>
 8006f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f1c:	b25b      	sxtb	r3, r3
 8006f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f22:	d103      	bne.n	8006f2c <xQueueGenericSend+0x164>
 8006f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f32:	b25b      	sxtb	r3, r3
 8006f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f38:	d103      	bne.n	8006f42 <xQueueGenericSend+0x17a>
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f42:	f001 fe99 	bl	8008c78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f46:	1d3a      	adds	r2, r7, #4
 8006f48:	f107 0314 	add.w	r3, r7, #20
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f000 ffda 	bl	8007f08 <xTaskCheckForTimeOut>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d124      	bne.n	8006fa4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f5c:	f000 fa96 	bl	800748c <prvIsQueueFull>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d018      	beq.n	8006f98 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	3310      	adds	r3, #16
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	4611      	mov	r1, r2
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 ff04 	bl	8007d7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f76:	f000 fa21 	bl	80073bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f7a:	f000 fd3f 	bl	80079fc <xTaskResumeAll>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f47f af7c 	bne.w	8006e7e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006f86:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <xQueueGenericSend+0x1f0>)
 8006f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	e772      	b.n	8006e7e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f9a:	f000 fa0f 	bl	80073bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f9e:	f000 fd2d 	bl	80079fc <xTaskResumeAll>
 8006fa2:	e76c      	b.n	8006e7e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fa6:	f000 fa09 	bl	80073bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006faa:	f000 fd27 	bl	80079fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006fae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3738      	adds	r7, #56	; 0x38
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	e000ed04 	.word	0xe000ed04

08006fbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08e      	sub	sp, #56	; 0x38
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
 8006fc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d109      	bne.n	8006fe8 <xQueueGenericSendFromISR+0x2c>
 8006fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8006fe6:	e7fe      	b.n	8006fe6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d103      	bne.n	8006ff6 <xQueueGenericSendFromISR+0x3a>
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <xQueueGenericSendFromISR+0x3e>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e000      	b.n	8006ffc <xQueueGenericSendFromISR+0x40>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d109      	bne.n	8007014 <xQueueGenericSendFromISR+0x58>
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	623b      	str	r3, [r7, #32]
 8007012:	e7fe      	b.n	8007012 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	2b02      	cmp	r3, #2
 8007018:	d103      	bne.n	8007022 <xQueueGenericSendFromISR+0x66>
 800701a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701e:	2b01      	cmp	r3, #1
 8007020:	d101      	bne.n	8007026 <xQueueGenericSendFromISR+0x6a>
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <xQueueGenericSendFromISR+0x6c>
 8007026:	2300      	movs	r3, #0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d109      	bne.n	8007040 <xQueueGenericSendFromISR+0x84>
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	61fb      	str	r3, [r7, #28]
 800703e:	e7fe      	b.n	800703e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007040:	f001 fec8 	bl	8008dd4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007044:	f3ef 8211 	mrs	r2, BASEPRI
 8007048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	61ba      	str	r2, [r7, #24]
 800705a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800705c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800705e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007068:	429a      	cmp	r2, r3
 800706a:	d302      	bcc.n	8007072 <xQueueGenericSendFromISR+0xb6>
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2b02      	cmp	r3, #2
 8007070:	d12c      	bne.n	80070cc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007078:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	68b9      	ldr	r1, [r7, #8]
 8007080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007082:	f000 f90b 	bl	800729c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007086:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800708a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800708e:	d112      	bne.n	80070b6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	2b00      	cmp	r3, #0
 8007096:	d016      	beq.n	80070c6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709a:	3324      	adds	r3, #36	; 0x24
 800709c:	4618      	mov	r0, r3
 800709e:	f000 febb 	bl	8007e18 <xTaskRemoveFromEventList>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00e      	beq.n	80070c6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00b      	beq.n	80070c6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	e007      	b.n	80070c6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80070b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070ba:	3301      	adds	r3, #1
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	b25a      	sxtb	r2, r3
 80070c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80070c6:	2301      	movs	r3, #1
 80070c8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80070ca:	e001      	b.n	80070d0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80070cc:	2300      	movs	r3, #0
 80070ce:	637b      	str	r3, [r7, #52]	; 0x34
 80070d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3738      	adds	r7, #56	; 0x38
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08c      	sub	sp, #48	; 0x30
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80070f0:	2300      	movs	r3, #0
 80070f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d109      	bne.n	8007112 <xQueueReceive+0x2e>
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	623b      	str	r3, [r7, #32]
 8007110:	e7fe      	b.n	8007110 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d103      	bne.n	8007120 <xQueueReceive+0x3c>
 8007118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <xQueueReceive+0x40>
 8007120:	2301      	movs	r3, #1
 8007122:	e000      	b.n	8007126 <xQueueReceive+0x42>
 8007124:	2300      	movs	r3, #0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d109      	bne.n	800713e <xQueueReceive+0x5a>
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	61fb      	str	r3, [r7, #28]
 800713c:	e7fe      	b.n	800713c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800713e:	f001 f821 	bl	8008184 <xTaskGetSchedulerState>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d102      	bne.n	800714e <xQueueReceive+0x6a>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <xQueueReceive+0x6e>
 800714e:	2301      	movs	r3, #1
 8007150:	e000      	b.n	8007154 <xQueueReceive+0x70>
 8007152:	2300      	movs	r3, #0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d109      	bne.n	800716c <xQueueReceive+0x88>
 8007158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715c:	f383 8811 	msr	BASEPRI, r3
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	61bb      	str	r3, [r7, #24]
 800716a:	e7fe      	b.n	800716a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800716c:	f001 fd56 	bl	8008c1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007174:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	2b00      	cmp	r3, #0
 800717a:	d01f      	beq.n	80071bc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800717c:	68b9      	ldr	r1, [r7, #8]
 800717e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007180:	f000 f8f6 	bl	8007370 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	1e5a      	subs	r2, r3, #1
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800718c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00f      	beq.n	80071b4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	3310      	adds	r3, #16
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fe3d 	bl	8007e18 <xTaskRemoveFromEventList>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d007      	beq.n	80071b4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80071a4:	4b3c      	ldr	r3, [pc, #240]	; (8007298 <xQueueReceive+0x1b4>)
 80071a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071b4:	f001 fd60 	bl	8008c78 <vPortExitCritical>
				return pdPASS;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e069      	b.n	8007290 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d103      	bne.n	80071ca <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071c2:	f001 fd59 	bl	8008c78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80071c6:	2300      	movs	r3, #0
 80071c8:	e062      	b.n	8007290 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d106      	bne.n	80071de <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071d0:	f107 0310 	add.w	r3, r7, #16
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 fe81 	bl	8007edc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071da:	2301      	movs	r3, #1
 80071dc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071de:	f001 fd4b 	bl	8008c78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071e2:	f000 fbfd 	bl	80079e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071e6:	f001 fd19 	bl	8008c1c <vPortEnterCritical>
 80071ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071f0:	b25b      	sxtb	r3, r3
 80071f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071f6:	d103      	bne.n	8007200 <xQueueReceive+0x11c>
 80071f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007202:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007206:	b25b      	sxtb	r3, r3
 8007208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800720c:	d103      	bne.n	8007216 <xQueueReceive+0x132>
 800720e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007216:	f001 fd2f 	bl	8008c78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800721a:	1d3a      	adds	r2, r7, #4
 800721c:	f107 0310 	add.w	r3, r7, #16
 8007220:	4611      	mov	r1, r2
 8007222:	4618      	mov	r0, r3
 8007224:	f000 fe70 	bl	8007f08 <xTaskCheckForTimeOut>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d123      	bne.n	8007276 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800722e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007230:	f000 f916 	bl	8007460 <prvIsQueueEmpty>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d017      	beq.n	800726a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800723a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723c:	3324      	adds	r3, #36	; 0x24
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	4611      	mov	r1, r2
 8007242:	4618      	mov	r0, r3
 8007244:	f000 fd9a 	bl	8007d7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800724a:	f000 f8b7 	bl	80073bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800724e:	f000 fbd5 	bl	80079fc <xTaskResumeAll>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d189      	bne.n	800716c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007258:	4b0f      	ldr	r3, [pc, #60]	; (8007298 <xQueueReceive+0x1b4>)
 800725a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	e780      	b.n	800716c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800726a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800726c:	f000 f8a6 	bl	80073bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007270:	f000 fbc4 	bl	80079fc <xTaskResumeAll>
 8007274:	e77a      	b.n	800716c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007278:	f000 f8a0 	bl	80073bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800727c:	f000 fbbe 	bl	80079fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007282:	f000 f8ed 	bl	8007460 <prvIsQueueEmpty>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	f43f af6f 	beq.w	800716c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800728e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007290:	4618      	mov	r0, r3
 8007292:	3730      	adds	r7, #48	; 0x30
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	e000ed04 	.word	0xe000ed04

0800729c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80072a8:	2300      	movs	r3, #0
 80072aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10d      	bne.n	80072d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d14d      	bne.n	800735e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 ff7a 	bl	80081c0 <xTaskPriorityDisinherit>
 80072cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	609a      	str	r2, [r3, #8]
 80072d4:	e043      	b.n	800735e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d119      	bne.n	8007310 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6858      	ldr	r0, [r3, #4]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e4:	461a      	mov	r2, r3
 80072e6:	68b9      	ldr	r1, [r7, #8]
 80072e8:	f001 ffce 	bl	8009288 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f4:	441a      	add	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	429a      	cmp	r2, r3
 8007304:	d32b      	bcc.n	800735e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	605a      	str	r2, [r3, #4]
 800730e:	e026      	b.n	800735e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	68d8      	ldr	r0, [r3, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007318:	461a      	mov	r2, r3
 800731a:	68b9      	ldr	r1, [r7, #8]
 800731c:	f001 ffb4 	bl	8009288 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007328:	425b      	negs	r3, r3
 800732a:	441a      	add	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	68da      	ldr	r2, [r3, #12]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	429a      	cmp	r2, r3
 800733a:	d207      	bcs.n	800734c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007344:	425b      	negs	r3, r3
 8007346:	441a      	add	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b02      	cmp	r3, #2
 8007350:	d105      	bne.n	800735e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	3b01      	subs	r3, #1
 800735c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007366:	697b      	ldr	r3, [r7, #20]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737e:	2b00      	cmp	r3, #0
 8007380:	d018      	beq.n	80073b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68da      	ldr	r2, [r3, #12]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738a:	441a      	add	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	429a      	cmp	r2, r3
 800739a:	d303      	bcc.n	80073a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68d9      	ldr	r1, [r3, #12]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ac:	461a      	mov	r2, r3
 80073ae:	6838      	ldr	r0, [r7, #0]
 80073b0:	f001 ff6a 	bl	8009288 <memcpy>
	}
}
 80073b4:	bf00      	nop
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80073c4:	f001 fc2a 	bl	8008c1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073d0:	e011      	b.n	80073f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d012      	beq.n	8007400 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	3324      	adds	r3, #36	; 0x24
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 fd1a 	bl	8007e18 <xTaskRemoveFromEventList>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80073ea:	f000 fded 	bl	8007fc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	dce9      	bgt.n	80073d2 <prvUnlockQueue+0x16>
 80073fe:	e000      	b.n	8007402 <prvUnlockQueue+0x46>
					break;
 8007400:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	22ff      	movs	r2, #255	; 0xff
 8007406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800740a:	f001 fc35 	bl	8008c78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800740e:	f001 fc05 	bl	8008c1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007418:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800741a:	e011      	b.n	8007440 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d012      	beq.n	800744a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	3310      	adds	r3, #16
 8007428:	4618      	mov	r0, r3
 800742a:	f000 fcf5 	bl	8007e18 <xTaskRemoveFromEventList>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007434:	f000 fdc8 	bl	8007fc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	3b01      	subs	r3, #1
 800743c:	b2db      	uxtb	r3, r3
 800743e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007440:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007444:	2b00      	cmp	r3, #0
 8007446:	dce9      	bgt.n	800741c <prvUnlockQueue+0x60>
 8007448:	e000      	b.n	800744c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800744a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	22ff      	movs	r2, #255	; 0xff
 8007450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007454:	f001 fc10 	bl	8008c78 <vPortExitCritical>
}
 8007458:	bf00      	nop
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007468:	f001 fbd8 	bl	8008c1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007470:	2b00      	cmp	r3, #0
 8007472:	d102      	bne.n	800747a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007474:	2301      	movs	r3, #1
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	e001      	b.n	800747e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800747a:	2300      	movs	r3, #0
 800747c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800747e:	f001 fbfb 	bl	8008c78 <vPortExitCritical>

	return xReturn;
 8007482:	68fb      	ldr	r3, [r7, #12]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007494:	f001 fbc2 	bl	8008c1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d102      	bne.n	80074aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80074a4:	2301      	movs	r3, #1
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	e001      	b.n	80074ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074ae:	f001 fbe3 	bl	8008c78 <vPortExitCritical>

	return xReturn;
 80074b2:	68fb      	ldr	r3, [r7, #12]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074c6:	2300      	movs	r3, #0
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	e014      	b.n	80074f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80074cc:	4a0e      	ldr	r2, [pc, #56]	; (8007508 <vQueueAddToRegistry+0x4c>)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10b      	bne.n	80074f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80074d8:	490b      	ldr	r1, [pc, #44]	; (8007508 <vQueueAddToRegistry+0x4c>)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80074e2:	4a09      	ldr	r2, [pc, #36]	; (8007508 <vQueueAddToRegistry+0x4c>)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	00db      	lsls	r3, r3, #3
 80074e8:	4413      	add	r3, r2
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80074ee:	e005      	b.n	80074fc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3301      	adds	r3, #1
 80074f4:	60fb      	str	r3, [r7, #12]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2b07      	cmp	r3, #7
 80074fa:	d9e7      	bls.n	80074cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80074fc:	bf00      	nop
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	2000214c 	.word	0x2000214c

0800750c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800751c:	f001 fb7e 	bl	8008c1c <vPortEnterCritical>
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007526:	b25b      	sxtb	r3, r3
 8007528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800752c:	d103      	bne.n	8007536 <vQueueWaitForMessageRestricted+0x2a>
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800753c:	b25b      	sxtb	r3, r3
 800753e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007542:	d103      	bne.n	800754c <vQueueWaitForMessageRestricted+0x40>
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800754c:	f001 fb94 	bl	8008c78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007554:	2b00      	cmp	r3, #0
 8007556:	d106      	bne.n	8007566 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	3324      	adds	r3, #36	; 0x24
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	68b9      	ldr	r1, [r7, #8]
 8007560:	4618      	mov	r0, r3
 8007562:	f000 fc2f 	bl	8007dc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007566:	6978      	ldr	r0, [r7, #20]
 8007568:	f7ff ff28 	bl	80073bc <prvUnlockQueue>
	}
 800756c:	bf00      	nop
 800756e:	3718      	adds	r7, #24
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007574:	b580      	push	{r7, lr}
 8007576:	b08e      	sub	sp, #56	; 0x38
 8007578:	af04      	add	r7, sp, #16
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
 8007580:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007584:	2b00      	cmp	r3, #0
 8007586:	d109      	bne.n	800759c <xTaskCreateStatic+0x28>
 8007588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	623b      	str	r3, [r7, #32]
 800759a:	e7fe      	b.n	800759a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800759c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d109      	bne.n	80075b6 <xTaskCreateStatic+0x42>
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	61fb      	str	r3, [r7, #28]
 80075b4:	e7fe      	b.n	80075b4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80075b6:	235c      	movs	r3, #92	; 0x5c
 80075b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	2b5c      	cmp	r3, #92	; 0x5c
 80075be:	d009      	beq.n	80075d4 <xTaskCreateStatic+0x60>
 80075c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	61bb      	str	r3, [r7, #24]
 80075d2:	e7fe      	b.n	80075d2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80075d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80075d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d01e      	beq.n	800761a <xTaskCreateStatic+0xa6>
 80075dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d01b      	beq.n	800761a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075ea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80075ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80075f4:	2300      	movs	r3, #0
 80075f6:	9303      	str	r3, [sp, #12]
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	9302      	str	r3, [sp, #8]
 80075fc:	f107 0314 	add.w	r3, r7, #20
 8007600:	9301      	str	r3, [sp, #4]
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	68b9      	ldr	r1, [r7, #8]
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 f850 	bl	80076b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007612:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007614:	f000 f8dc 	bl	80077d0 <prvAddNewTaskToReadyList>
 8007618:	e001      	b.n	800761e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800761a:	2300      	movs	r3, #0
 800761c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800761e:	697b      	ldr	r3, [r7, #20]
	}
 8007620:	4618      	mov	r0, r3
 8007622:	3728      	adds	r7, #40	; 0x28
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08c      	sub	sp, #48	; 0x30
 800762c:	af04      	add	r7, sp, #16
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	603b      	str	r3, [r7, #0]
 8007634:	4613      	mov	r3, r2
 8007636:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007638:	88fb      	ldrh	r3, [r7, #6]
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4618      	mov	r0, r3
 800763e:	f001 fc07 	bl	8008e50 <pvPortMalloc>
 8007642:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00e      	beq.n	8007668 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800764a:	205c      	movs	r0, #92	; 0x5c
 800764c:	f001 fc00 	bl	8008e50 <pvPortMalloc>
 8007650:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d003      	beq.n	8007660 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	631a      	str	r2, [r3, #48]	; 0x30
 800765e:	e005      	b.n	800766c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007660:	6978      	ldr	r0, [r7, #20]
 8007662:	f001 fcb7 	bl	8008fd4 <vPortFree>
 8007666:	e001      	b.n	800766c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007668:	2300      	movs	r3, #0
 800766a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d017      	beq.n	80076a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800767a:	88fa      	ldrh	r2, [r7, #6]
 800767c:	2300      	movs	r3, #0
 800767e:	9303      	str	r3, [sp, #12]
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	9302      	str	r3, [sp, #8]
 8007684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007686:	9301      	str	r3, [sp, #4]
 8007688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	68b9      	ldr	r1, [r7, #8]
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 f80e 	bl	80076b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007696:	69f8      	ldr	r0, [r7, #28]
 8007698:	f000 f89a 	bl	80077d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800769c:	2301      	movs	r3, #1
 800769e:	61bb      	str	r3, [r7, #24]
 80076a0:	e002      	b.n	80076a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80076a8:	69bb      	ldr	r3, [r7, #24]
	}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3720      	adds	r7, #32
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b088      	sub	sp, #32
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	607a      	str	r2, [r7, #4]
 80076be:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80076c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	461a      	mov	r2, r3
 80076ca:	21a5      	movs	r1, #165	; 0xa5
 80076cc:	f001 fde7 	bl	800929e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80076d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076da:	3b01      	subs	r3, #1
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	f023 0307 	bic.w	r3, r3, #7
 80076e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	f003 0307 	and.w	r3, r3, #7
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d009      	beq.n	8007708 <prvInitialiseNewTask+0x56>
 80076f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	617b      	str	r3, [r7, #20]
 8007706:	e7fe      	b.n	8007706 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d01f      	beq.n	800774e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800770e:	2300      	movs	r3, #0
 8007710:	61fb      	str	r3, [r7, #28]
 8007712:	e012      	b.n	800773a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	4413      	add	r3, r2
 800771a:	7819      	ldrb	r1, [r3, #0]
 800771c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	4413      	add	r3, r2
 8007722:	3334      	adds	r3, #52	; 0x34
 8007724:	460a      	mov	r2, r1
 8007726:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	4413      	add	r3, r2
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d006      	beq.n	8007742 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	3301      	adds	r3, #1
 8007738:	61fb      	str	r3, [r7, #28]
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	2b0f      	cmp	r3, #15
 800773e:	d9e9      	bls.n	8007714 <prvInitialiseNewTask+0x62>
 8007740:	e000      	b.n	8007744 <prvInitialiseNewTask+0x92>
			{
				break;
 8007742:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800774c:	e003      	b.n	8007756 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	2b37      	cmp	r3, #55	; 0x37
 800775a:	d901      	bls.n	8007760 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800775c:	2337      	movs	r3, #55	; 0x37
 800775e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007764:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800776a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800776c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776e:	2200      	movs	r2, #0
 8007770:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007774:	3304      	adds	r3, #4
 8007776:	4618      	mov	r0, r3
 8007778:	f7ff f994 	bl	8006aa4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800777c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777e:	3318      	adds	r3, #24
 8007780:	4618      	mov	r0, r3
 8007782:	f7ff f98f 	bl	8006aa4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800778a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800778c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800779a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800779c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779e:	2200      	movs	r2, #0
 80077a0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	68f9      	ldr	r1, [r7, #12]
 80077ae:	69b8      	ldr	r0, [r7, #24]
 80077b0:	f001 f90c 	bl	80089cc <pxPortInitialiseStack>
 80077b4:	4602      	mov	r2, r0
 80077b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80077ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d002      	beq.n	80077c6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077c6:	bf00      	nop
 80077c8:	3720      	adds	r7, #32
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80077d8:	f001 fa20 	bl	8008c1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077dc:	4b2d      	ldr	r3, [pc, #180]	; (8007894 <prvAddNewTaskToReadyList+0xc4>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3301      	adds	r3, #1
 80077e2:	4a2c      	ldr	r2, [pc, #176]	; (8007894 <prvAddNewTaskToReadyList+0xc4>)
 80077e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80077e6:	4b2c      	ldr	r3, [pc, #176]	; (8007898 <prvAddNewTaskToReadyList+0xc8>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d109      	bne.n	8007802 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077ee:	4a2a      	ldr	r2, [pc, #168]	; (8007898 <prvAddNewTaskToReadyList+0xc8>)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077f4:	4b27      	ldr	r3, [pc, #156]	; (8007894 <prvAddNewTaskToReadyList+0xc4>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d110      	bne.n	800781e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077fc:	f000 fc08 	bl	8008010 <prvInitialiseTaskLists>
 8007800:	e00d      	b.n	800781e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007802:	4b26      	ldr	r3, [pc, #152]	; (800789c <prvAddNewTaskToReadyList+0xcc>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d109      	bne.n	800781e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800780a:	4b23      	ldr	r3, [pc, #140]	; (8007898 <prvAddNewTaskToReadyList+0xc8>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	429a      	cmp	r2, r3
 8007816:	d802      	bhi.n	800781e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007818:	4a1f      	ldr	r2, [pc, #124]	; (8007898 <prvAddNewTaskToReadyList+0xc8>)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800781e:	4b20      	ldr	r3, [pc, #128]	; (80078a0 <prvAddNewTaskToReadyList+0xd0>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3301      	adds	r3, #1
 8007824:	4a1e      	ldr	r2, [pc, #120]	; (80078a0 <prvAddNewTaskToReadyList+0xd0>)
 8007826:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007828:	4b1d      	ldr	r3, [pc, #116]	; (80078a0 <prvAddNewTaskToReadyList+0xd0>)
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007834:	4b1b      	ldr	r3, [pc, #108]	; (80078a4 <prvAddNewTaskToReadyList+0xd4>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	429a      	cmp	r2, r3
 800783a:	d903      	bls.n	8007844 <prvAddNewTaskToReadyList+0x74>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007840:	4a18      	ldr	r2, [pc, #96]	; (80078a4 <prvAddNewTaskToReadyList+0xd4>)
 8007842:	6013      	str	r3, [r2, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007848:	4613      	mov	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4a15      	ldr	r2, [pc, #84]	; (80078a8 <prvAddNewTaskToReadyList+0xd8>)
 8007852:	441a      	add	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	3304      	adds	r3, #4
 8007858:	4619      	mov	r1, r3
 800785a:	4610      	mov	r0, r2
 800785c:	f7ff f92f 	bl	8006abe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007860:	f001 fa0a 	bl	8008c78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007864:	4b0d      	ldr	r3, [pc, #52]	; (800789c <prvAddNewTaskToReadyList+0xcc>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00e      	beq.n	800788a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800786c:	4b0a      	ldr	r3, [pc, #40]	; (8007898 <prvAddNewTaskToReadyList+0xc8>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007876:	429a      	cmp	r2, r3
 8007878:	d207      	bcs.n	800788a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800787a:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <prvAddNewTaskToReadyList+0xdc>)
 800787c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007880:	601a      	str	r2, [r3, #0]
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800788a:	bf00      	nop
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	200013c8 	.word	0x200013c8
 8007898:	20000ef4 	.word	0x20000ef4
 800789c:	200013d4 	.word	0x200013d4
 80078a0:	200013e4 	.word	0x200013e4
 80078a4:	200013d0 	.word	0x200013d0
 80078a8:	20000ef8 	.word	0x20000ef8
 80078ac:	e000ed04 	.word	0xe000ed04

080078b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80078b8:	2300      	movs	r3, #0
 80078ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d016      	beq.n	80078f0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80078c2:	4b13      	ldr	r3, [pc, #76]	; (8007910 <vTaskDelay+0x60>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d009      	beq.n	80078de <vTaskDelay+0x2e>
 80078ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	60bb      	str	r3, [r7, #8]
 80078dc:	e7fe      	b.n	80078dc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80078de:	f000 f87f 	bl	80079e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80078e2:	2100      	movs	r1, #0
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fcd7 	bl	8008298 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80078ea:	f000 f887 	bl	80079fc <xTaskResumeAll>
 80078ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d107      	bne.n	8007906 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80078f6:	4b07      	ldr	r3, [pc, #28]	; (8007914 <vTaskDelay+0x64>)
 80078f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007906:	bf00      	nop
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	200013f0 	.word	0x200013f0
 8007914:	e000ed04 	.word	0xe000ed04

08007918 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b08a      	sub	sp, #40	; 0x28
 800791c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800791e:	2300      	movs	r3, #0
 8007920:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007922:	2300      	movs	r3, #0
 8007924:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007926:	463a      	mov	r2, r7
 8007928:	1d39      	adds	r1, r7, #4
 800792a:	f107 0308 	add.w	r3, r7, #8
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff f864 	bl	80069fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	9202      	str	r2, [sp, #8]
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	2300      	movs	r3, #0
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	2300      	movs	r3, #0
 8007944:	460a      	mov	r2, r1
 8007946:	4920      	ldr	r1, [pc, #128]	; (80079c8 <vTaskStartScheduler+0xb0>)
 8007948:	4820      	ldr	r0, [pc, #128]	; (80079cc <vTaskStartScheduler+0xb4>)
 800794a:	f7ff fe13 	bl	8007574 <xTaskCreateStatic>
 800794e:	4602      	mov	r2, r0
 8007950:	4b1f      	ldr	r3, [pc, #124]	; (80079d0 <vTaskStartScheduler+0xb8>)
 8007952:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007954:	4b1e      	ldr	r3, [pc, #120]	; (80079d0 <vTaskStartScheduler+0xb8>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800795c:	2301      	movs	r3, #1
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	e001      	b.n	8007966 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007962:	2300      	movs	r3, #0
 8007964:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d102      	bne.n	8007972 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800796c:	f000 fce8 	bl	8008340 <xTimerCreateTimerTask>
 8007970:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d115      	bne.n	80079a4 <vTaskStartScheduler+0x8c>
 8007978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800798a:	4b12      	ldr	r3, [pc, #72]	; (80079d4 <vTaskStartScheduler+0xbc>)
 800798c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007990:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007992:	4b11      	ldr	r3, [pc, #68]	; (80079d8 <vTaskStartScheduler+0xc0>)
 8007994:	2201      	movs	r2, #1
 8007996:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007998:	4b10      	ldr	r3, [pc, #64]	; (80079dc <vTaskStartScheduler+0xc4>)
 800799a:	2200      	movs	r2, #0
 800799c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800799e:	f001 f89f 	bl	8008ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80079a2:	e00d      	b.n	80079c0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079aa:	d109      	bne.n	80079c0 <vTaskStartScheduler+0xa8>
 80079ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	60fb      	str	r3, [r7, #12]
 80079be:	e7fe      	b.n	80079be <vTaskStartScheduler+0xa6>
}
 80079c0:	bf00      	nop
 80079c2:	3718      	adds	r7, #24
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	080096d0 	.word	0x080096d0
 80079cc:	08007fe1 	.word	0x08007fe1
 80079d0:	200013ec 	.word	0x200013ec
 80079d4:	200013e8 	.word	0x200013e8
 80079d8:	200013d4 	.word	0x200013d4
 80079dc:	200013cc 	.word	0x200013cc

080079e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80079e0:	b480      	push	{r7}
 80079e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80079e4:	4b04      	ldr	r3, [pc, #16]	; (80079f8 <vTaskSuspendAll+0x18>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3301      	adds	r3, #1
 80079ea:	4a03      	ldr	r2, [pc, #12]	; (80079f8 <vTaskSuspendAll+0x18>)
 80079ec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80079ee:	bf00      	nop
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	200013f0 	.word	0x200013f0

080079fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a02:	2300      	movs	r3, #0
 8007a04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a06:	2300      	movs	r3, #0
 8007a08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a0a:	4b41      	ldr	r3, [pc, #260]	; (8007b10 <xTaskResumeAll+0x114>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d109      	bne.n	8007a26 <xTaskResumeAll+0x2a>
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	603b      	str	r3, [r7, #0]
 8007a24:	e7fe      	b.n	8007a24 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a26:	f001 f8f9 	bl	8008c1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a2a:	4b39      	ldr	r3, [pc, #228]	; (8007b10 <xTaskResumeAll+0x114>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	4a37      	ldr	r2, [pc, #220]	; (8007b10 <xTaskResumeAll+0x114>)
 8007a32:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a34:	4b36      	ldr	r3, [pc, #216]	; (8007b10 <xTaskResumeAll+0x114>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d162      	bne.n	8007b02 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a3c:	4b35      	ldr	r3, [pc, #212]	; (8007b14 <xTaskResumeAll+0x118>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d05e      	beq.n	8007b02 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a44:	e02f      	b.n	8007aa6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a46:	4b34      	ldr	r3, [pc, #208]	; (8007b18 <xTaskResumeAll+0x11c>)
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3318      	adds	r3, #24
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7ff f890 	bl	8006b78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7ff f88b 	bl	8006b78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a66:	4b2d      	ldr	r3, [pc, #180]	; (8007b1c <xTaskResumeAll+0x120>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d903      	bls.n	8007a76 <xTaskResumeAll+0x7a>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a72:	4a2a      	ldr	r2, [pc, #168]	; (8007b1c <xTaskResumeAll+0x120>)
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4a27      	ldr	r2, [pc, #156]	; (8007b20 <xTaskResumeAll+0x124>)
 8007a84:	441a      	add	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	f7ff f816 	bl	8006abe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a96:	4b23      	ldr	r3, [pc, #140]	; (8007b24 <xTaskResumeAll+0x128>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d302      	bcc.n	8007aa6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007aa0:	4b21      	ldr	r3, [pc, #132]	; (8007b28 <xTaskResumeAll+0x12c>)
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007aa6:	4b1c      	ldr	r3, [pc, #112]	; (8007b18 <xTaskResumeAll+0x11c>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1cb      	bne.n	8007a46 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ab4:	f000 fb46 	bl	8008144 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007ab8:	4b1c      	ldr	r3, [pc, #112]	; (8007b2c <xTaskResumeAll+0x130>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d010      	beq.n	8007ae6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ac4:	f000 f846 	bl	8007b54 <xTaskIncrementTick>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007ace:	4b16      	ldr	r3, [pc, #88]	; (8007b28 <xTaskResumeAll+0x12c>)
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1f1      	bne.n	8007ac4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007ae0:	4b12      	ldr	r3, [pc, #72]	; (8007b2c <xTaskResumeAll+0x130>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ae6:	4b10      	ldr	r3, [pc, #64]	; (8007b28 <xTaskResumeAll+0x12c>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d009      	beq.n	8007b02 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007aee:	2301      	movs	r3, #1
 8007af0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007af2:	4b0f      	ldr	r3, [pc, #60]	; (8007b30 <xTaskResumeAll+0x134>)
 8007af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007af8:	601a      	str	r2, [r3, #0]
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b02:	f001 f8b9 	bl	8008c78 <vPortExitCritical>

	return xAlreadyYielded;
 8007b06:	68bb      	ldr	r3, [r7, #8]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	200013f0 	.word	0x200013f0
 8007b14:	200013c8 	.word	0x200013c8
 8007b18:	20001388 	.word	0x20001388
 8007b1c:	200013d0 	.word	0x200013d0
 8007b20:	20000ef8 	.word	0x20000ef8
 8007b24:	20000ef4 	.word	0x20000ef4
 8007b28:	200013dc 	.word	0x200013dc
 8007b2c:	200013d8 	.word	0x200013d8
 8007b30:	e000ed04 	.word	0xe000ed04

08007b34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007b3a:	4b05      	ldr	r3, [pc, #20]	; (8007b50 <xTaskGetTickCount+0x1c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007b40:	687b      	ldr	r3, [r7, #4]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	200013cc 	.word	0x200013cc

08007b54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b5e:	4b4e      	ldr	r3, [pc, #312]	; (8007c98 <xTaskIncrementTick+0x144>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f040 8088 	bne.w	8007c78 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b68:	4b4c      	ldr	r3, [pc, #304]	; (8007c9c <xTaskIncrementTick+0x148>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b70:	4a4a      	ldr	r2, [pc, #296]	; (8007c9c <xTaskIncrementTick+0x148>)
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d11f      	bne.n	8007bbc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b7c:	4b48      	ldr	r3, [pc, #288]	; (8007ca0 <xTaskIncrementTick+0x14c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d009      	beq.n	8007b9a <xTaskIncrementTick+0x46>
 8007b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	603b      	str	r3, [r7, #0]
 8007b98:	e7fe      	b.n	8007b98 <xTaskIncrementTick+0x44>
 8007b9a:	4b41      	ldr	r3, [pc, #260]	; (8007ca0 <xTaskIncrementTick+0x14c>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	60fb      	str	r3, [r7, #12]
 8007ba0:	4b40      	ldr	r3, [pc, #256]	; (8007ca4 <xTaskIncrementTick+0x150>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a3e      	ldr	r2, [pc, #248]	; (8007ca0 <xTaskIncrementTick+0x14c>)
 8007ba6:	6013      	str	r3, [r2, #0]
 8007ba8:	4a3e      	ldr	r2, [pc, #248]	; (8007ca4 <xTaskIncrementTick+0x150>)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6013      	str	r3, [r2, #0]
 8007bae:	4b3e      	ldr	r3, [pc, #248]	; (8007ca8 <xTaskIncrementTick+0x154>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	4a3c      	ldr	r2, [pc, #240]	; (8007ca8 <xTaskIncrementTick+0x154>)
 8007bb6:	6013      	str	r3, [r2, #0]
 8007bb8:	f000 fac4 	bl	8008144 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007bbc:	4b3b      	ldr	r3, [pc, #236]	; (8007cac <xTaskIncrementTick+0x158>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d349      	bcc.n	8007c5a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bc6:	4b36      	ldr	r3, [pc, #216]	; (8007ca0 <xTaskIncrementTick+0x14c>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d104      	bne.n	8007bda <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bd0:	4b36      	ldr	r3, [pc, #216]	; (8007cac <xTaskIncrementTick+0x158>)
 8007bd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bd6:	601a      	str	r2, [r3, #0]
					break;
 8007bd8:	e03f      	b.n	8007c5a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bda:	4b31      	ldr	r3, [pc, #196]	; (8007ca0 <xTaskIncrementTick+0x14c>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d203      	bcs.n	8007bfa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bf2:	4a2e      	ldr	r2, [pc, #184]	; (8007cac <xTaskIncrementTick+0x158>)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007bf8:	e02f      	b.n	8007c5a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fe ffba 	bl	8006b78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d004      	beq.n	8007c16 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	3318      	adds	r3, #24
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fe ffb1 	bl	8006b78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c1a:	4b25      	ldr	r3, [pc, #148]	; (8007cb0 <xTaskIncrementTick+0x15c>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d903      	bls.n	8007c2a <xTaskIncrementTick+0xd6>
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c26:	4a22      	ldr	r2, [pc, #136]	; (8007cb0 <xTaskIncrementTick+0x15c>)
 8007c28:	6013      	str	r3, [r2, #0]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2e:	4613      	mov	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4a1f      	ldr	r2, [pc, #124]	; (8007cb4 <xTaskIncrementTick+0x160>)
 8007c38:	441a      	add	r2, r3
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4610      	mov	r0, r2
 8007c42:	f7fe ff3c 	bl	8006abe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c4a:	4b1b      	ldr	r3, [pc, #108]	; (8007cb8 <xTaskIncrementTick+0x164>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d3b8      	bcc.n	8007bc6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007c54:	2301      	movs	r3, #1
 8007c56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c58:	e7b5      	b.n	8007bc6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c5a:	4b17      	ldr	r3, [pc, #92]	; (8007cb8 <xTaskIncrementTick+0x164>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c60:	4914      	ldr	r1, [pc, #80]	; (8007cb4 <xTaskIncrementTick+0x160>)
 8007c62:	4613      	mov	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	440b      	add	r3, r1
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d907      	bls.n	8007c82 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8007c72:	2301      	movs	r3, #1
 8007c74:	617b      	str	r3, [r7, #20]
 8007c76:	e004      	b.n	8007c82 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007c78:	4b10      	ldr	r3, [pc, #64]	; (8007cbc <xTaskIncrementTick+0x168>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	4a0f      	ldr	r2, [pc, #60]	; (8007cbc <xTaskIncrementTick+0x168>)
 8007c80:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007c82:	4b0f      	ldr	r3, [pc, #60]	; (8007cc0 <xTaskIncrementTick+0x16c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007c8e:	697b      	ldr	r3, [r7, #20]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	200013f0 	.word	0x200013f0
 8007c9c:	200013cc 	.word	0x200013cc
 8007ca0:	20001380 	.word	0x20001380
 8007ca4:	20001384 	.word	0x20001384
 8007ca8:	200013e0 	.word	0x200013e0
 8007cac:	200013e8 	.word	0x200013e8
 8007cb0:	200013d0 	.word	0x200013d0
 8007cb4:	20000ef8 	.word	0x20000ef8
 8007cb8:	20000ef4 	.word	0x20000ef4
 8007cbc:	200013d8 	.word	0x200013d8
 8007cc0:	200013dc 	.word	0x200013dc

08007cc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007cca:	4b27      	ldr	r3, [pc, #156]	; (8007d68 <vTaskSwitchContext+0xa4>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007cd2:	4b26      	ldr	r3, [pc, #152]	; (8007d6c <vTaskSwitchContext+0xa8>)
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007cd8:	e040      	b.n	8007d5c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007cda:	4b24      	ldr	r3, [pc, #144]	; (8007d6c <vTaskSwitchContext+0xa8>)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ce0:	4b23      	ldr	r3, [pc, #140]	; (8007d70 <vTaskSwitchContext+0xac>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	e00f      	b.n	8007d08 <vTaskSwitchContext+0x44>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d109      	bne.n	8007d02 <vTaskSwitchContext+0x3e>
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	607b      	str	r3, [r7, #4]
 8007d00:	e7fe      	b.n	8007d00 <vTaskSwitchContext+0x3c>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3b01      	subs	r3, #1
 8007d06:	60fb      	str	r3, [r7, #12]
 8007d08:	491a      	ldr	r1, [pc, #104]	; (8007d74 <vTaskSwitchContext+0xb0>)
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	440b      	add	r3, r1
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d0e5      	beq.n	8007ce8 <vTaskSwitchContext+0x24>
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4a13      	ldr	r2, [pc, #76]	; (8007d74 <vTaskSwitchContext+0xb0>)
 8007d28:	4413      	add	r3, r2
 8007d2a:	60bb      	str	r3, [r7, #8]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	605a      	str	r2, [r3, #4]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	685a      	ldr	r2, [r3, #4]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	3308      	adds	r3, #8
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d104      	bne.n	8007d4c <vTaskSwitchContext+0x88>
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	685a      	ldr	r2, [r3, #4]
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	605a      	str	r2, [r3, #4]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	4a09      	ldr	r2, [pc, #36]	; (8007d78 <vTaskSwitchContext+0xb4>)
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	4a06      	ldr	r2, [pc, #24]	; (8007d70 <vTaskSwitchContext+0xac>)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6013      	str	r3, [r2, #0]
}
 8007d5c:	bf00      	nop
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	200013f0 	.word	0x200013f0
 8007d6c:	200013dc 	.word	0x200013dc
 8007d70:	200013d0 	.word	0x200013d0
 8007d74:	20000ef8 	.word	0x20000ef8
 8007d78:	20000ef4 	.word	0x20000ef4

08007d7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d109      	bne.n	8007da0 <vTaskPlaceOnEventList+0x24>
 8007d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	60fb      	str	r3, [r7, #12]
 8007d9e:	e7fe      	b.n	8007d9e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007da0:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <vTaskPlaceOnEventList+0x44>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3318      	adds	r3, #24
 8007da6:	4619      	mov	r1, r3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7fe feac 	bl	8006b06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007dae:	2101      	movs	r1, #1
 8007db0:	6838      	ldr	r0, [r7, #0]
 8007db2:	f000 fa71 	bl	8008298 <prvAddCurrentTaskToDelayedList>
}
 8007db6:	bf00      	nop
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20000ef4 	.word	0x20000ef4

08007dc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d109      	bne.n	8007dea <vTaskPlaceOnEventListRestricted+0x26>
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	617b      	str	r3, [r7, #20]
 8007de8:	e7fe      	b.n	8007de8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dea:	4b0a      	ldr	r3, [pc, #40]	; (8007e14 <vTaskPlaceOnEventListRestricted+0x50>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3318      	adds	r3, #24
 8007df0:	4619      	mov	r1, r3
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f7fe fe63 	bl	8006abe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d002      	beq.n	8007e04 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e02:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e04:	6879      	ldr	r1, [r7, #4]
 8007e06:	68b8      	ldr	r0, [r7, #8]
 8007e08:	f000 fa46 	bl	8008298 <prvAddCurrentTaskToDelayedList>
	}
 8007e0c:	bf00      	nop
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	20000ef4 	.word	0x20000ef4

08007e18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d109      	bne.n	8007e42 <xTaskRemoveFromEventList+0x2a>
 8007e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	e7fe      	b.n	8007e40 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	3318      	adds	r3, #24
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fe fe96 	bl	8006b78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e4c:	4b1d      	ldr	r3, [pc, #116]	; (8007ec4 <xTaskRemoveFromEventList+0xac>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d11d      	bne.n	8007e90 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	3304      	adds	r3, #4
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fe fe8d 	bl	8006b78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e62:	4b19      	ldr	r3, [pc, #100]	; (8007ec8 <xTaskRemoveFromEventList+0xb0>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d903      	bls.n	8007e72 <xTaskRemoveFromEventList+0x5a>
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6e:	4a16      	ldr	r2, [pc, #88]	; (8007ec8 <xTaskRemoveFromEventList+0xb0>)
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e76:	4613      	mov	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4a13      	ldr	r2, [pc, #76]	; (8007ecc <xTaskRemoveFromEventList+0xb4>)
 8007e80:	441a      	add	r2, r3
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	3304      	adds	r3, #4
 8007e86:	4619      	mov	r1, r3
 8007e88:	4610      	mov	r0, r2
 8007e8a:	f7fe fe18 	bl	8006abe <vListInsertEnd>
 8007e8e:	e005      	b.n	8007e9c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	3318      	adds	r3, #24
 8007e94:	4619      	mov	r1, r3
 8007e96:	480e      	ldr	r0, [pc, #56]	; (8007ed0 <xTaskRemoveFromEventList+0xb8>)
 8007e98:	f7fe fe11 	bl	8006abe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea0:	4b0c      	ldr	r3, [pc, #48]	; (8007ed4 <xTaskRemoveFromEventList+0xbc>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d905      	bls.n	8007eb6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007eae:	4b0a      	ldr	r3, [pc, #40]	; (8007ed8 <xTaskRemoveFromEventList+0xc0>)
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	e001      	b.n	8007eba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007eba:	697b      	ldr	r3, [r7, #20]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3718      	adds	r7, #24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	200013f0 	.word	0x200013f0
 8007ec8:	200013d0 	.word	0x200013d0
 8007ecc:	20000ef8 	.word	0x20000ef8
 8007ed0:	20001388 	.word	0x20001388
 8007ed4:	20000ef4 	.word	0x20000ef4
 8007ed8:	200013dc 	.word	0x200013dc

08007edc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ee4:	4b06      	ldr	r3, [pc, #24]	; (8007f00 <vTaskInternalSetTimeOutState+0x24>)
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007eec:	4b05      	ldr	r3, [pc, #20]	; (8007f04 <vTaskInternalSetTimeOutState+0x28>)
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	605a      	str	r2, [r3, #4]
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	200013e0 	.word	0x200013e0
 8007f04:	200013cc 	.word	0x200013cc

08007f08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b088      	sub	sp, #32
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d109      	bne.n	8007f2c <xTaskCheckForTimeOut+0x24>
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	613b      	str	r3, [r7, #16]
 8007f2a:	e7fe      	b.n	8007f2a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d109      	bne.n	8007f46 <xTaskCheckForTimeOut+0x3e>
 8007f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	60fb      	str	r3, [r7, #12]
 8007f44:	e7fe      	b.n	8007f44 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007f46:	f000 fe69 	bl	8008c1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f4a:	4b1d      	ldr	r3, [pc, #116]	; (8007fc0 <xTaskCheckForTimeOut+0xb8>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	69ba      	ldr	r2, [r7, #24]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f62:	d102      	bne.n	8007f6a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f64:	2300      	movs	r3, #0
 8007f66:	61fb      	str	r3, [r7, #28]
 8007f68:	e023      	b.n	8007fb2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	4b15      	ldr	r3, [pc, #84]	; (8007fc4 <xTaskCheckForTimeOut+0xbc>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d007      	beq.n	8007f86 <xTaskCheckForTimeOut+0x7e>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	69ba      	ldr	r2, [r7, #24]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d302      	bcc.n	8007f86 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f80:	2301      	movs	r3, #1
 8007f82:	61fb      	str	r3, [r7, #28]
 8007f84:	e015      	b.n	8007fb2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d20b      	bcs.n	8007fa8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	1ad2      	subs	r2, r2, r3
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff ff9d 	bl	8007edc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	61fb      	str	r3, [r7, #28]
 8007fa6:	e004      	b.n	8007fb2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007fb2:	f000 fe61 	bl	8008c78 <vPortExitCritical>

	return xReturn;
 8007fb6:	69fb      	ldr	r3, [r7, #28]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3720      	adds	r7, #32
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	200013cc 	.word	0x200013cc
 8007fc4:	200013e0 	.word	0x200013e0

08007fc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fc8:	b480      	push	{r7}
 8007fca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fcc:	4b03      	ldr	r3, [pc, #12]	; (8007fdc <vTaskMissedYield+0x14>)
 8007fce:	2201      	movs	r2, #1
 8007fd0:	601a      	str	r2, [r3, #0]
}
 8007fd2:	bf00      	nop
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	200013dc 	.word	0x200013dc

08007fe0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fe8:	f000 f852 	bl	8008090 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fec:	4b06      	ldr	r3, [pc, #24]	; (8008008 <prvIdleTask+0x28>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d9f9      	bls.n	8007fe8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ff4:	4b05      	ldr	r3, [pc, #20]	; (800800c <prvIdleTask+0x2c>)
 8007ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008004:	e7f0      	b.n	8007fe8 <prvIdleTask+0x8>
 8008006:	bf00      	nop
 8008008:	20000ef8 	.word	0x20000ef8
 800800c:	e000ed04 	.word	0xe000ed04

08008010 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008016:	2300      	movs	r3, #0
 8008018:	607b      	str	r3, [r7, #4]
 800801a:	e00c      	b.n	8008036 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	4613      	mov	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4413      	add	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4a12      	ldr	r2, [pc, #72]	; (8008070 <prvInitialiseTaskLists+0x60>)
 8008028:	4413      	add	r3, r2
 800802a:	4618      	mov	r0, r3
 800802c:	f7fe fd1a 	bl	8006a64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	3301      	adds	r3, #1
 8008034:	607b      	str	r3, [r7, #4]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2b37      	cmp	r3, #55	; 0x37
 800803a:	d9ef      	bls.n	800801c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800803c:	480d      	ldr	r0, [pc, #52]	; (8008074 <prvInitialiseTaskLists+0x64>)
 800803e:	f7fe fd11 	bl	8006a64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008042:	480d      	ldr	r0, [pc, #52]	; (8008078 <prvInitialiseTaskLists+0x68>)
 8008044:	f7fe fd0e 	bl	8006a64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008048:	480c      	ldr	r0, [pc, #48]	; (800807c <prvInitialiseTaskLists+0x6c>)
 800804a:	f7fe fd0b 	bl	8006a64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800804e:	480c      	ldr	r0, [pc, #48]	; (8008080 <prvInitialiseTaskLists+0x70>)
 8008050:	f7fe fd08 	bl	8006a64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008054:	480b      	ldr	r0, [pc, #44]	; (8008084 <prvInitialiseTaskLists+0x74>)
 8008056:	f7fe fd05 	bl	8006a64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800805a:	4b0b      	ldr	r3, [pc, #44]	; (8008088 <prvInitialiseTaskLists+0x78>)
 800805c:	4a05      	ldr	r2, [pc, #20]	; (8008074 <prvInitialiseTaskLists+0x64>)
 800805e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008060:	4b0a      	ldr	r3, [pc, #40]	; (800808c <prvInitialiseTaskLists+0x7c>)
 8008062:	4a05      	ldr	r2, [pc, #20]	; (8008078 <prvInitialiseTaskLists+0x68>)
 8008064:	601a      	str	r2, [r3, #0]
}
 8008066:	bf00      	nop
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20000ef8 	.word	0x20000ef8
 8008074:	20001358 	.word	0x20001358
 8008078:	2000136c 	.word	0x2000136c
 800807c:	20001388 	.word	0x20001388
 8008080:	2000139c 	.word	0x2000139c
 8008084:	200013b4 	.word	0x200013b4
 8008088:	20001380 	.word	0x20001380
 800808c:	20001384 	.word	0x20001384

08008090 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008096:	e019      	b.n	80080cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008098:	f000 fdc0 	bl	8008c1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800809c:	4b0f      	ldr	r3, [pc, #60]	; (80080dc <prvCheckTasksWaitingTermination+0x4c>)
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	3304      	adds	r3, #4
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fe fd65 	bl	8006b78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080ae:	4b0c      	ldr	r3, [pc, #48]	; (80080e0 <prvCheckTasksWaitingTermination+0x50>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3b01      	subs	r3, #1
 80080b4:	4a0a      	ldr	r2, [pc, #40]	; (80080e0 <prvCheckTasksWaitingTermination+0x50>)
 80080b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080b8:	4b0a      	ldr	r3, [pc, #40]	; (80080e4 <prvCheckTasksWaitingTermination+0x54>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3b01      	subs	r3, #1
 80080be:	4a09      	ldr	r2, [pc, #36]	; (80080e4 <prvCheckTasksWaitingTermination+0x54>)
 80080c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080c2:	f000 fdd9 	bl	8008c78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f80e 	bl	80080e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080cc:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <prvCheckTasksWaitingTermination+0x54>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e1      	bne.n	8008098 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080d4:	bf00      	nop
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	2000139c 	.word	0x2000139c
 80080e0:	200013c8 	.word	0x200013c8
 80080e4:	200013b0 	.word	0x200013b0

080080e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d108      	bne.n	800810c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 ff68 	bl	8008fd4 <vPortFree>
				vPortFree( pxTCB );
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 ff65 	bl	8008fd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800810a:	e017      	b.n	800813c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008112:	2b01      	cmp	r3, #1
 8008114:	d103      	bne.n	800811e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 ff5c 	bl	8008fd4 <vPortFree>
	}
 800811c:	e00e      	b.n	800813c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008124:	2b02      	cmp	r3, #2
 8008126:	d009      	beq.n	800813c <prvDeleteTCB+0x54>
 8008128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812c:	f383 8811 	msr	BASEPRI, r3
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	60fb      	str	r3, [r7, #12]
 800813a:	e7fe      	b.n	800813a <prvDeleteTCB+0x52>
	}
 800813c:	bf00      	nop
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800814a:	4b0c      	ldr	r3, [pc, #48]	; (800817c <prvResetNextTaskUnblockTime+0x38>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d104      	bne.n	800815e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008154:	4b0a      	ldr	r3, [pc, #40]	; (8008180 <prvResetNextTaskUnblockTime+0x3c>)
 8008156:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800815a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800815c:	e008      	b.n	8008170 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800815e:	4b07      	ldr	r3, [pc, #28]	; (800817c <prvResetNextTaskUnblockTime+0x38>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	4a04      	ldr	r2, [pc, #16]	; (8008180 <prvResetNextTaskUnblockTime+0x3c>)
 800816e:	6013      	str	r3, [r2, #0]
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	20001380 	.word	0x20001380
 8008180:	200013e8 	.word	0x200013e8

08008184 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800818a:	4b0b      	ldr	r3, [pc, #44]	; (80081b8 <xTaskGetSchedulerState+0x34>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d102      	bne.n	8008198 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008192:	2301      	movs	r3, #1
 8008194:	607b      	str	r3, [r7, #4]
 8008196:	e008      	b.n	80081aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008198:	4b08      	ldr	r3, [pc, #32]	; (80081bc <xTaskGetSchedulerState+0x38>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d102      	bne.n	80081a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081a0:	2302      	movs	r3, #2
 80081a2:	607b      	str	r3, [r7, #4]
 80081a4:	e001      	b.n	80081aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081a6:	2300      	movs	r3, #0
 80081a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081aa:	687b      	ldr	r3, [r7, #4]
	}
 80081ac:	4618      	mov	r0, r3
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	200013d4 	.word	0x200013d4
 80081bc:	200013f0 	.word	0x200013f0

080081c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081cc:	2300      	movs	r3, #0
 80081ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d054      	beq.n	8008280 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081d6:	4b2d      	ldr	r3, [pc, #180]	; (800828c <xTaskPriorityDisinherit+0xcc>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d009      	beq.n	80081f4 <xTaskPriorityDisinherit+0x34>
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	e7fe      	b.n	80081f2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d109      	bne.n	8008210 <xTaskPriorityDisinherit+0x50>
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	60bb      	str	r3, [r7, #8]
 800820e:	e7fe      	b.n	800820e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008214:	1e5a      	subs	r2, r3, #1
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008222:	429a      	cmp	r2, r3
 8008224:	d02c      	beq.n	8008280 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822a:	2b00      	cmp	r3, #0
 800822c:	d128      	bne.n	8008280 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	3304      	adds	r3, #4
 8008232:	4618      	mov	r0, r3
 8008234:	f7fe fca0 	bl	8006b78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008250:	4b0f      	ldr	r3, [pc, #60]	; (8008290 <xTaskPriorityDisinherit+0xd0>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	429a      	cmp	r2, r3
 8008256:	d903      	bls.n	8008260 <xTaskPriorityDisinherit+0xa0>
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	4a0c      	ldr	r2, [pc, #48]	; (8008290 <xTaskPriorityDisinherit+0xd0>)
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008264:	4613      	mov	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4a09      	ldr	r2, [pc, #36]	; (8008294 <xTaskPriorityDisinherit+0xd4>)
 800826e:	441a      	add	r2, r3
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	3304      	adds	r3, #4
 8008274:	4619      	mov	r1, r3
 8008276:	4610      	mov	r0, r2
 8008278:	f7fe fc21 	bl	8006abe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800827c:	2301      	movs	r3, #1
 800827e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008280:	697b      	ldr	r3, [r7, #20]
	}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20000ef4 	.word	0x20000ef4
 8008290:	200013d0 	.word	0x200013d0
 8008294:	20000ef8 	.word	0x20000ef8

08008298 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082a2:	4b21      	ldr	r3, [pc, #132]	; (8008328 <prvAddCurrentTaskToDelayedList+0x90>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082a8:	4b20      	ldr	r3, [pc, #128]	; (800832c <prvAddCurrentTaskToDelayedList+0x94>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	3304      	adds	r3, #4
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fe fc62 	bl	8006b78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082ba:	d10a      	bne.n	80082d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d007      	beq.n	80082d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082c2:	4b1a      	ldr	r3, [pc, #104]	; (800832c <prvAddCurrentTaskToDelayedList+0x94>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3304      	adds	r3, #4
 80082c8:	4619      	mov	r1, r3
 80082ca:	4819      	ldr	r0, [pc, #100]	; (8008330 <prvAddCurrentTaskToDelayedList+0x98>)
 80082cc:	f7fe fbf7 	bl	8006abe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082d0:	e026      	b.n	8008320 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4413      	add	r3, r2
 80082d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082da:	4b14      	ldr	r3, [pc, #80]	; (800832c <prvAddCurrentTaskToDelayedList+0x94>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d209      	bcs.n	80082fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082ea:	4b12      	ldr	r3, [pc, #72]	; (8008334 <prvAddCurrentTaskToDelayedList+0x9c>)
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	4b0f      	ldr	r3, [pc, #60]	; (800832c <prvAddCurrentTaskToDelayedList+0x94>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	3304      	adds	r3, #4
 80082f4:	4619      	mov	r1, r3
 80082f6:	4610      	mov	r0, r2
 80082f8:	f7fe fc05 	bl	8006b06 <vListInsert>
}
 80082fc:	e010      	b.n	8008320 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082fe:	4b0e      	ldr	r3, [pc, #56]	; (8008338 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	4b0a      	ldr	r3, [pc, #40]	; (800832c <prvAddCurrentTaskToDelayedList+0x94>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3304      	adds	r3, #4
 8008308:	4619      	mov	r1, r3
 800830a:	4610      	mov	r0, r2
 800830c:	f7fe fbfb 	bl	8006b06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008310:	4b0a      	ldr	r3, [pc, #40]	; (800833c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	429a      	cmp	r2, r3
 8008318:	d202      	bcs.n	8008320 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800831a:	4a08      	ldr	r2, [pc, #32]	; (800833c <prvAddCurrentTaskToDelayedList+0xa4>)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	6013      	str	r3, [r2, #0]
}
 8008320:	bf00      	nop
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	200013cc 	.word	0x200013cc
 800832c:	20000ef4 	.word	0x20000ef4
 8008330:	200013b4 	.word	0x200013b4
 8008334:	20001384 	.word	0x20001384
 8008338:	20001380 	.word	0x20001380
 800833c:	200013e8 	.word	0x200013e8

08008340 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b08a      	sub	sp, #40	; 0x28
 8008344:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008346:	2300      	movs	r3, #0
 8008348:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800834a:	f000 faff 	bl	800894c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800834e:	4b1c      	ldr	r3, [pc, #112]	; (80083c0 <xTimerCreateTimerTask+0x80>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d021      	beq.n	800839a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008356:	2300      	movs	r3, #0
 8008358:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800835a:	2300      	movs	r3, #0
 800835c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800835e:	1d3a      	adds	r2, r7, #4
 8008360:	f107 0108 	add.w	r1, r7, #8
 8008364:	f107 030c 	add.w	r3, r7, #12
 8008368:	4618      	mov	r0, r3
 800836a:	f7fe fb61 	bl	8006a30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	9202      	str	r2, [sp, #8]
 8008376:	9301      	str	r3, [sp, #4]
 8008378:	2302      	movs	r3, #2
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	2300      	movs	r3, #0
 800837e:	460a      	mov	r2, r1
 8008380:	4910      	ldr	r1, [pc, #64]	; (80083c4 <xTimerCreateTimerTask+0x84>)
 8008382:	4811      	ldr	r0, [pc, #68]	; (80083c8 <xTimerCreateTimerTask+0x88>)
 8008384:	f7ff f8f6 	bl	8007574 <xTaskCreateStatic>
 8008388:	4602      	mov	r2, r0
 800838a:	4b10      	ldr	r3, [pc, #64]	; (80083cc <xTimerCreateTimerTask+0x8c>)
 800838c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800838e:	4b0f      	ldr	r3, [pc, #60]	; (80083cc <xTimerCreateTimerTask+0x8c>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008396:	2301      	movs	r3, #1
 8008398:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d109      	bne.n	80083b4 <xTimerCreateTimerTask+0x74>
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	613b      	str	r3, [r7, #16]
 80083b2:	e7fe      	b.n	80083b2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80083b4:	697b      	ldr	r3, [r7, #20]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3718      	adds	r7, #24
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	20001424 	.word	0x20001424
 80083c4:	080096d8 	.word	0x080096d8
 80083c8:	08008501 	.word	0x08008501
 80083cc:	20001428 	.word	0x20001428

080083d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b08a      	sub	sp, #40	; 0x28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
 80083dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083de:	2300      	movs	r3, #0
 80083e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d109      	bne.n	80083fc <xTimerGenericCommand+0x2c>
 80083e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	623b      	str	r3, [r7, #32]
 80083fa:	e7fe      	b.n	80083fa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083fc:	4b19      	ldr	r3, [pc, #100]	; (8008464 <xTimerGenericCommand+0x94>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d02a      	beq.n	800845a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	2b05      	cmp	r3, #5
 8008414:	dc18      	bgt.n	8008448 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008416:	f7ff feb5 	bl	8008184 <xTaskGetSchedulerState>
 800841a:	4603      	mov	r3, r0
 800841c:	2b02      	cmp	r3, #2
 800841e:	d109      	bne.n	8008434 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008420:	4b10      	ldr	r3, [pc, #64]	; (8008464 <xTimerGenericCommand+0x94>)
 8008422:	6818      	ldr	r0, [r3, #0]
 8008424:	f107 0110 	add.w	r1, r7, #16
 8008428:	2300      	movs	r3, #0
 800842a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800842c:	f7fe fccc 	bl	8006dc8 <xQueueGenericSend>
 8008430:	6278      	str	r0, [r7, #36]	; 0x24
 8008432:	e012      	b.n	800845a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008434:	4b0b      	ldr	r3, [pc, #44]	; (8008464 <xTimerGenericCommand+0x94>)
 8008436:	6818      	ldr	r0, [r3, #0]
 8008438:	f107 0110 	add.w	r1, r7, #16
 800843c:	2300      	movs	r3, #0
 800843e:	2200      	movs	r2, #0
 8008440:	f7fe fcc2 	bl	8006dc8 <xQueueGenericSend>
 8008444:	6278      	str	r0, [r7, #36]	; 0x24
 8008446:	e008      	b.n	800845a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008448:	4b06      	ldr	r3, [pc, #24]	; (8008464 <xTimerGenericCommand+0x94>)
 800844a:	6818      	ldr	r0, [r3, #0]
 800844c:	f107 0110 	add.w	r1, r7, #16
 8008450:	2300      	movs	r3, #0
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	f7fe fdb2 	bl	8006fbc <xQueueGenericSendFromISR>
 8008458:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800845c:	4618      	mov	r0, r3
 800845e:	3728      	adds	r7, #40	; 0x28
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	20001424 	.word	0x20001424

08008468 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b088      	sub	sp, #32
 800846c:	af02      	add	r7, sp, #8
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008472:	4b22      	ldr	r3, [pc, #136]	; (80084fc <prvProcessExpiredTimer+0x94>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	3304      	adds	r3, #4
 8008480:	4618      	mov	r0, r3
 8008482:	f7fe fb79 	bl	8006b78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800848c:	f003 0304 	and.w	r3, r3, #4
 8008490:	2b00      	cmp	r3, #0
 8008492:	d021      	beq.n	80084d8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	699a      	ldr	r2, [r3, #24]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	18d1      	adds	r1, r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	6978      	ldr	r0, [r7, #20]
 80084a2:	f000 f8d1 	bl	8008648 <prvInsertTimerInActiveList>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d01e      	beq.n	80084ea <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084ac:	2300      	movs	r3, #0
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	2300      	movs	r3, #0
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	2100      	movs	r1, #0
 80084b6:	6978      	ldr	r0, [r7, #20]
 80084b8:	f7ff ff8a 	bl	80083d0 <xTimerGenericCommand>
 80084bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d112      	bne.n	80084ea <prvProcessExpiredTimer+0x82>
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	60fb      	str	r3, [r7, #12]
 80084d6:	e7fe      	b.n	80084d6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084de:	f023 0301 	bic.w	r3, r3, #1
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	6978      	ldr	r0, [r7, #20]
 80084f0:	4798      	blx	r3
}
 80084f2:	bf00      	nop
 80084f4:	3718      	adds	r7, #24
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	2000141c 	.word	0x2000141c

08008500 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008508:	f107 0308 	add.w	r3, r7, #8
 800850c:	4618      	mov	r0, r3
 800850e:	f000 f857 	bl	80085c0 <prvGetNextExpireTime>
 8008512:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	4619      	mov	r1, r3
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f000 f803 	bl	8008524 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800851e:	f000 f8d5 	bl	80086cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008522:	e7f1      	b.n	8008508 <prvTimerTask+0x8>

08008524 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800852e:	f7ff fa57 	bl	80079e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008532:	f107 0308 	add.w	r3, r7, #8
 8008536:	4618      	mov	r0, r3
 8008538:	f000 f866 	bl	8008608 <prvSampleTimeNow>
 800853c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d130      	bne.n	80085a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10a      	bne.n	8008560 <prvProcessTimerOrBlockTask+0x3c>
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	429a      	cmp	r2, r3
 8008550:	d806      	bhi.n	8008560 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008552:	f7ff fa53 	bl	80079fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008556:	68f9      	ldr	r1, [r7, #12]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7ff ff85 	bl	8008468 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800855e:	e024      	b.n	80085aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d008      	beq.n	8008578 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008566:	4b13      	ldr	r3, [pc, #76]	; (80085b4 <prvProcessTimerOrBlockTask+0x90>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <prvProcessTimerOrBlockTask+0x50>
 8008570:	2301      	movs	r3, #1
 8008572:	e000      	b.n	8008576 <prvProcessTimerOrBlockTask+0x52>
 8008574:	2300      	movs	r3, #0
 8008576:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008578:	4b0f      	ldr	r3, [pc, #60]	; (80085b8 <prvProcessTimerOrBlockTask+0x94>)
 800857a:	6818      	ldr	r0, [r3, #0]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	4619      	mov	r1, r3
 8008586:	f7fe ffc1 	bl	800750c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800858a:	f7ff fa37 	bl	80079fc <xTaskResumeAll>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10a      	bne.n	80085aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008594:	4b09      	ldr	r3, [pc, #36]	; (80085bc <prvProcessTimerOrBlockTask+0x98>)
 8008596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	f3bf 8f6f 	isb	sy
}
 80085a4:	e001      	b.n	80085aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80085a6:	f7ff fa29 	bl	80079fc <xTaskResumeAll>
}
 80085aa:	bf00      	nop
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	20001420 	.word	0x20001420
 80085b8:	20001424 	.word	0x20001424
 80085bc:	e000ed04 	.word	0xe000ed04

080085c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085c8:	4b0e      	ldr	r3, [pc, #56]	; (8008604 <prvGetNextExpireTime+0x44>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d101      	bne.n	80085d6 <prvGetNextExpireTime+0x16>
 80085d2:	2201      	movs	r2, #1
 80085d4:	e000      	b.n	80085d8 <prvGetNextExpireTime+0x18>
 80085d6:	2200      	movs	r2, #0
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d105      	bne.n	80085f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085e4:	4b07      	ldr	r3, [pc, #28]	; (8008604 <prvGetNextExpireTime+0x44>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	60fb      	str	r3, [r7, #12]
 80085ee:	e001      	b.n	80085f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085f4:	68fb      	ldr	r3, [r7, #12]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	2000141c 	.word	0x2000141c

08008608 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008610:	f7ff fa90 	bl	8007b34 <xTaskGetTickCount>
 8008614:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008616:	4b0b      	ldr	r3, [pc, #44]	; (8008644 <prvSampleTimeNow+0x3c>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	429a      	cmp	r2, r3
 800861e:	d205      	bcs.n	800862c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008620:	f000 f930 	bl	8008884 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	e002      	b.n	8008632 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008632:	4a04      	ldr	r2, [pc, #16]	; (8008644 <prvSampleTimeNow+0x3c>)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008638:	68fb      	ldr	r3, [r7, #12]
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	2000142c 	.word	0x2000142c

08008648 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
 8008654:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008656:	2300      	movs	r3, #0
 8008658:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	429a      	cmp	r2, r3
 800866c:	d812      	bhi.n	8008694 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	1ad2      	subs	r2, r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	429a      	cmp	r2, r3
 800867a:	d302      	bcc.n	8008682 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800867c:	2301      	movs	r3, #1
 800867e:	617b      	str	r3, [r7, #20]
 8008680:	e01b      	b.n	80086ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008682:	4b10      	ldr	r3, [pc, #64]	; (80086c4 <prvInsertTimerInActiveList+0x7c>)
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	3304      	adds	r3, #4
 800868a:	4619      	mov	r1, r3
 800868c:	4610      	mov	r0, r2
 800868e:	f7fe fa3a 	bl	8006b06 <vListInsert>
 8008692:	e012      	b.n	80086ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	429a      	cmp	r2, r3
 800869a:	d206      	bcs.n	80086aa <prvInsertTimerInActiveList+0x62>
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d302      	bcc.n	80086aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80086a4:	2301      	movs	r3, #1
 80086a6:	617b      	str	r3, [r7, #20]
 80086a8:	e007      	b.n	80086ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086aa:	4b07      	ldr	r3, [pc, #28]	; (80086c8 <prvInsertTimerInActiveList+0x80>)
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	3304      	adds	r3, #4
 80086b2:	4619      	mov	r1, r3
 80086b4:	4610      	mov	r0, r2
 80086b6:	f7fe fa26 	bl	8006b06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80086ba:	697b      	ldr	r3, [r7, #20]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3718      	adds	r7, #24
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	20001420 	.word	0x20001420
 80086c8:	2000141c 	.word	0x2000141c

080086cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b08e      	sub	sp, #56	; 0x38
 80086d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086d2:	e0c6      	b.n	8008862 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	da17      	bge.n	800870a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80086da:	1d3b      	adds	r3, r7, #4
 80086dc:	3304      	adds	r3, #4
 80086de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80086e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d109      	bne.n	80086fa <prvProcessReceivedCommands+0x2e>
 80086e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	61fb      	str	r3, [r7, #28]
 80086f8:	e7fe      	b.n	80086f8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008700:	6850      	ldr	r0, [r2, #4]
 8008702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008704:	6892      	ldr	r2, [r2, #8]
 8008706:	4611      	mov	r1, r2
 8008708:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	f2c0 80a7 	blt.w	8008860 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008718:	695b      	ldr	r3, [r3, #20]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d004      	beq.n	8008728 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800871e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008720:	3304      	adds	r3, #4
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe fa28 	bl	8006b78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008728:	463b      	mov	r3, r7
 800872a:	4618      	mov	r0, r3
 800872c:	f7ff ff6c 	bl	8008608 <prvSampleTimeNow>
 8008730:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b09      	cmp	r3, #9
 8008736:	f200 8094 	bhi.w	8008862 <prvProcessReceivedCommands+0x196>
 800873a:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <prvProcessReceivedCommands+0x74>)
 800873c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008740:	08008769 	.word	0x08008769
 8008744:	08008769 	.word	0x08008769
 8008748:	08008769 	.word	0x08008769
 800874c:	080087db 	.word	0x080087db
 8008750:	080087ef 	.word	0x080087ef
 8008754:	08008837 	.word	0x08008837
 8008758:	08008769 	.word	0x08008769
 800875c:	08008769 	.word	0x08008769
 8008760:	080087db 	.word	0x080087db
 8008764:	080087ef 	.word	0x080087ef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800876e:	f043 0301 	orr.w	r3, r3, #1
 8008772:	b2da      	uxtb	r2, r3
 8008774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877e:	699b      	ldr	r3, [r3, #24]
 8008780:	18d1      	adds	r1, r2, r3
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008788:	f7ff ff5e 	bl	8008648 <prvInsertTimerInActiveList>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d067      	beq.n	8008862 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008798:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800879a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d05c      	beq.n	8008862 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	441a      	add	r2, r3
 80087b0:	2300      	movs	r3, #0
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	2300      	movs	r3, #0
 80087b6:	2100      	movs	r1, #0
 80087b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ba:	f7ff fe09 	bl	80083d0 <xTimerGenericCommand>
 80087be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d14d      	bne.n	8008862 <prvProcessReceivedCommands+0x196>
 80087c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	61bb      	str	r3, [r7, #24]
 80087d8:	e7fe      	b.n	80087d8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087e0:	f023 0301 	bic.w	r3, r3, #1
 80087e4:	b2da      	uxtb	r2, r3
 80087e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80087ec:	e039      	b.n	8008862 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087f4:	f043 0301 	orr.w	r3, r3, #1
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008804:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d109      	bne.n	8008822 <prvProcessReceivedCommands+0x156>
 800880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	617b      	str	r3, [r7, #20]
 8008820:	e7fe      	b.n	8008820 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008824:	699a      	ldr	r2, [r3, #24]
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	18d1      	adds	r1, r2, r3
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800882e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008830:	f7ff ff0a 	bl	8008648 <prvInsertTimerInActiveList>
					break;
 8008834:	e015      	b.n	8008862 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800883c:	f003 0302 	and.w	r3, r3, #2
 8008840:	2b00      	cmp	r3, #0
 8008842:	d103      	bne.n	800884c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8008844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008846:	f000 fbc5 	bl	8008fd4 <vPortFree>
 800884a:	e00a      	b.n	8008862 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008852:	f023 0301 	bic.w	r3, r3, #1
 8008856:	b2da      	uxtb	r2, r3
 8008858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800885e:	e000      	b.n	8008862 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008860:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008862:	4b07      	ldr	r3, [pc, #28]	; (8008880 <prvProcessReceivedCommands+0x1b4>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	1d39      	adds	r1, r7, #4
 8008868:	2200      	movs	r2, #0
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe fc3a 	bl	80070e4 <xQueueReceive>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	f47f af2e 	bne.w	80086d4 <prvProcessReceivedCommands+0x8>
	}
}
 8008878:	bf00      	nop
 800887a:	3730      	adds	r7, #48	; 0x30
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	20001424 	.word	0x20001424

08008884 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b088      	sub	sp, #32
 8008888:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800888a:	e047      	b.n	800891c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800888c:	4b2d      	ldr	r3, [pc, #180]	; (8008944 <prvSwitchTimerLists+0xc0>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008896:	4b2b      	ldr	r3, [pc, #172]	; (8008944 <prvSwitchTimerLists+0xc0>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	3304      	adds	r3, #4
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fe f967 	bl	8006b78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088b8:	f003 0304 	and.w	r3, r3, #4
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d02d      	beq.n	800891c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	4413      	add	r3, r2
 80088c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d90e      	bls.n	80088f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088de:	4b19      	ldr	r3, [pc, #100]	; (8008944 <prvSwitchTimerLists+0xc0>)
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	3304      	adds	r3, #4
 80088e6:	4619      	mov	r1, r3
 80088e8:	4610      	mov	r0, r2
 80088ea:	f7fe f90c 	bl	8006b06 <vListInsert>
 80088ee:	e015      	b.n	800891c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088f0:	2300      	movs	r3, #0
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	2300      	movs	r3, #0
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	2100      	movs	r1, #0
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f7ff fd68 	bl	80083d0 <xTimerGenericCommand>
 8008900:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d109      	bne.n	800891c <prvSwitchTimerLists+0x98>
 8008908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890c:	f383 8811 	msr	BASEPRI, r3
 8008910:	f3bf 8f6f 	isb	sy
 8008914:	f3bf 8f4f 	dsb	sy
 8008918:	603b      	str	r3, [r7, #0]
 800891a:	e7fe      	b.n	800891a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800891c:	4b09      	ldr	r3, [pc, #36]	; (8008944 <prvSwitchTimerLists+0xc0>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1b2      	bne.n	800888c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008926:	4b07      	ldr	r3, [pc, #28]	; (8008944 <prvSwitchTimerLists+0xc0>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800892c:	4b06      	ldr	r3, [pc, #24]	; (8008948 <prvSwitchTimerLists+0xc4>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a04      	ldr	r2, [pc, #16]	; (8008944 <prvSwitchTimerLists+0xc0>)
 8008932:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008934:	4a04      	ldr	r2, [pc, #16]	; (8008948 <prvSwitchTimerLists+0xc4>)
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	6013      	str	r3, [r2, #0]
}
 800893a:	bf00      	nop
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	2000141c 	.word	0x2000141c
 8008948:	20001420 	.word	0x20001420

0800894c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008952:	f000 f963 	bl	8008c1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008956:	4b15      	ldr	r3, [pc, #84]	; (80089ac <prvCheckForValidListAndQueue+0x60>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d120      	bne.n	80089a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800895e:	4814      	ldr	r0, [pc, #80]	; (80089b0 <prvCheckForValidListAndQueue+0x64>)
 8008960:	f7fe f880 	bl	8006a64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008964:	4813      	ldr	r0, [pc, #76]	; (80089b4 <prvCheckForValidListAndQueue+0x68>)
 8008966:	f7fe f87d 	bl	8006a64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800896a:	4b13      	ldr	r3, [pc, #76]	; (80089b8 <prvCheckForValidListAndQueue+0x6c>)
 800896c:	4a10      	ldr	r2, [pc, #64]	; (80089b0 <prvCheckForValidListAndQueue+0x64>)
 800896e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008970:	4b12      	ldr	r3, [pc, #72]	; (80089bc <prvCheckForValidListAndQueue+0x70>)
 8008972:	4a10      	ldr	r2, [pc, #64]	; (80089b4 <prvCheckForValidListAndQueue+0x68>)
 8008974:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008976:	2300      	movs	r3, #0
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	4b11      	ldr	r3, [pc, #68]	; (80089c0 <prvCheckForValidListAndQueue+0x74>)
 800897c:	4a11      	ldr	r2, [pc, #68]	; (80089c4 <prvCheckForValidListAndQueue+0x78>)
 800897e:	2110      	movs	r1, #16
 8008980:	200a      	movs	r0, #10
 8008982:	f7fe f98b 	bl	8006c9c <xQueueGenericCreateStatic>
 8008986:	4602      	mov	r2, r0
 8008988:	4b08      	ldr	r3, [pc, #32]	; (80089ac <prvCheckForValidListAndQueue+0x60>)
 800898a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800898c:	4b07      	ldr	r3, [pc, #28]	; (80089ac <prvCheckForValidListAndQueue+0x60>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d005      	beq.n	80089a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008994:	4b05      	ldr	r3, [pc, #20]	; (80089ac <prvCheckForValidListAndQueue+0x60>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	490b      	ldr	r1, [pc, #44]	; (80089c8 <prvCheckForValidListAndQueue+0x7c>)
 800899a:	4618      	mov	r0, r3
 800899c:	f7fe fd8e 	bl	80074bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089a0:	f000 f96a 	bl	8008c78 <vPortExitCritical>
}
 80089a4:	bf00      	nop
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	20001424 	.word	0x20001424
 80089b0:	200013f4 	.word	0x200013f4
 80089b4:	20001408 	.word	0x20001408
 80089b8:	2000141c 	.word	0x2000141c
 80089bc:	20001420 	.word	0x20001420
 80089c0:	200014d0 	.word	0x200014d0
 80089c4:	20001430 	.word	0x20001430
 80089c8:	080096e0 	.word	0x080096e0

080089cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	3b04      	subs	r3, #4
 80089dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80089e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	3b04      	subs	r3, #4
 80089ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	f023 0201 	bic.w	r2, r3, #1
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3b04      	subs	r3, #4
 80089fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089fc:	4a0c      	ldr	r2, [pc, #48]	; (8008a30 <pxPortInitialiseStack+0x64>)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	3b14      	subs	r3, #20
 8008a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	3b04      	subs	r3, #4
 8008a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f06f 0202 	mvn.w	r2, #2
 8008a1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	3b20      	subs	r3, #32
 8008a20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a22:	68fb      	ldr	r3, [r7, #12]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr
 8008a30:	08008a35 	.word	0x08008a35

08008a34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a3e:	4b11      	ldr	r3, [pc, #68]	; (8008a84 <prvTaskExitError+0x50>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a46:	d009      	beq.n	8008a5c <prvTaskExitError+0x28>
 8008a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4c:	f383 8811 	msr	BASEPRI, r3
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	60fb      	str	r3, [r7, #12]
 8008a5a:	e7fe      	b.n	8008a5a <prvTaskExitError+0x26>
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a6e:	bf00      	nop
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d0fc      	beq.n	8008a70 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a76:	bf00      	nop
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	2000001c 	.word	0x2000001c
	...

08008a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a90:	4b07      	ldr	r3, [pc, #28]	; (8008ab0 <pxCurrentTCBConst2>)
 8008a92:	6819      	ldr	r1, [r3, #0]
 8008a94:	6808      	ldr	r0, [r1, #0]
 8008a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9a:	f380 8809 	msr	PSP, r0
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f04f 0000 	mov.w	r0, #0
 8008aa6:	f380 8811 	msr	BASEPRI, r0
 8008aaa:	4770      	bx	lr
 8008aac:	f3af 8000 	nop.w

08008ab0 <pxCurrentTCBConst2>:
 8008ab0:	20000ef4 	.word	0x20000ef4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ab4:	bf00      	nop
 8008ab6:	bf00      	nop

08008ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ab8:	4808      	ldr	r0, [pc, #32]	; (8008adc <prvPortStartFirstTask+0x24>)
 8008aba:	6800      	ldr	r0, [r0, #0]
 8008abc:	6800      	ldr	r0, [r0, #0]
 8008abe:	f380 8808 	msr	MSP, r0
 8008ac2:	f04f 0000 	mov.w	r0, #0
 8008ac6:	f380 8814 	msr	CONTROL, r0
 8008aca:	b662      	cpsie	i
 8008acc:	b661      	cpsie	f
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	df00      	svc	0
 8008ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008ada:	bf00      	nop
 8008adc:	e000ed08 	.word	0xe000ed08

08008ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ae6:	4b44      	ldr	r3, [pc, #272]	; (8008bf8 <xPortStartScheduler+0x118>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a44      	ldr	r2, [pc, #272]	; (8008bfc <xPortStartScheduler+0x11c>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d109      	bne.n	8008b04 <xPortStartScheduler+0x24>
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	613b      	str	r3, [r7, #16]
 8008b02:	e7fe      	b.n	8008b02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b04:	4b3c      	ldr	r3, [pc, #240]	; (8008bf8 <xPortStartScheduler+0x118>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a3d      	ldr	r2, [pc, #244]	; (8008c00 <xPortStartScheduler+0x120>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d109      	bne.n	8008b22 <xPortStartScheduler+0x42>
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	60fb      	str	r3, [r7, #12]
 8008b20:	e7fe      	b.n	8008b20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b22:	4b38      	ldr	r3, [pc, #224]	; (8008c04 <xPortStartScheduler+0x124>)
 8008b24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	22ff      	movs	r2, #255	; 0xff
 8008b32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b3c:	78fb      	ldrb	r3, [r7, #3]
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	4b30      	ldr	r3, [pc, #192]	; (8008c08 <xPortStartScheduler+0x128>)
 8008b48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b4a:	4b30      	ldr	r3, [pc, #192]	; (8008c0c <xPortStartScheduler+0x12c>)
 8008b4c:	2207      	movs	r2, #7
 8008b4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b50:	e009      	b.n	8008b66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008b52:	4b2e      	ldr	r3, [pc, #184]	; (8008c0c <xPortStartScheduler+0x12c>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3b01      	subs	r3, #1
 8008b58:	4a2c      	ldr	r2, [pc, #176]	; (8008c0c <xPortStartScheduler+0x12c>)
 8008b5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b5c:	78fb      	ldrb	r3, [r7, #3]
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	005b      	lsls	r3, r3, #1
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b66:	78fb      	ldrb	r3, [r7, #3]
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b6e:	2b80      	cmp	r3, #128	; 0x80
 8008b70:	d0ef      	beq.n	8008b52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b72:	4b26      	ldr	r3, [pc, #152]	; (8008c0c <xPortStartScheduler+0x12c>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f1c3 0307 	rsb	r3, r3, #7
 8008b7a:	2b04      	cmp	r3, #4
 8008b7c:	d009      	beq.n	8008b92 <xPortStartScheduler+0xb2>
 8008b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	60bb      	str	r3, [r7, #8]
 8008b90:	e7fe      	b.n	8008b90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b92:	4b1e      	ldr	r3, [pc, #120]	; (8008c0c <xPortStartScheduler+0x12c>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	021b      	lsls	r3, r3, #8
 8008b98:	4a1c      	ldr	r2, [pc, #112]	; (8008c0c <xPortStartScheduler+0x12c>)
 8008b9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b9c:	4b1b      	ldr	r3, [pc, #108]	; (8008c0c <xPortStartScheduler+0x12c>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ba4:	4a19      	ldr	r2, [pc, #100]	; (8008c0c <xPortStartScheduler+0x12c>)
 8008ba6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008bb0:	4b17      	ldr	r3, [pc, #92]	; (8008c10 <xPortStartScheduler+0x130>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a16      	ldr	r2, [pc, #88]	; (8008c10 <xPortStartScheduler+0x130>)
 8008bb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008bba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008bbc:	4b14      	ldr	r3, [pc, #80]	; (8008c10 <xPortStartScheduler+0x130>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a13      	ldr	r2, [pc, #76]	; (8008c10 <xPortStartScheduler+0x130>)
 8008bc2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008bc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008bc8:	f000 f8d6 	bl	8008d78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008bcc:	4b11      	ldr	r3, [pc, #68]	; (8008c14 <xPortStartScheduler+0x134>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008bd2:	f000 f8f5 	bl	8008dc0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008bd6:	4b10      	ldr	r3, [pc, #64]	; (8008c18 <xPortStartScheduler+0x138>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a0f      	ldr	r2, [pc, #60]	; (8008c18 <xPortStartScheduler+0x138>)
 8008bdc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008be0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008be2:	f7ff ff69 	bl	8008ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008be6:	f7ff f86d 	bl	8007cc4 <vTaskSwitchContext>
	prvTaskExitError();
 8008bea:	f7ff ff23 	bl	8008a34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3718      	adds	r7, #24
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	e000ed00 	.word	0xe000ed00
 8008bfc:	410fc271 	.word	0x410fc271
 8008c00:	410fc270 	.word	0x410fc270
 8008c04:	e000e400 	.word	0xe000e400
 8008c08:	20001520 	.word	0x20001520
 8008c0c:	20001524 	.word	0x20001524
 8008c10:	e000ed20 	.word	0xe000ed20
 8008c14:	2000001c 	.word	0x2000001c
 8008c18:	e000ef34 	.word	0xe000ef34

08008c1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c34:	4b0e      	ldr	r3, [pc, #56]	; (8008c70 <vPortEnterCritical+0x54>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	4a0d      	ldr	r2, [pc, #52]	; (8008c70 <vPortEnterCritical+0x54>)
 8008c3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c3e:	4b0c      	ldr	r3, [pc, #48]	; (8008c70 <vPortEnterCritical+0x54>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d10e      	bne.n	8008c64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c46:	4b0b      	ldr	r3, [pc, #44]	; (8008c74 <vPortEnterCritical+0x58>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d009      	beq.n	8008c64 <vPortEnterCritical+0x48>
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	603b      	str	r3, [r7, #0]
 8008c62:	e7fe      	b.n	8008c62 <vPortEnterCritical+0x46>
	}
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	2000001c 	.word	0x2000001c
 8008c74:	e000ed04 	.word	0xe000ed04

08008c78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c7e:	4b11      	ldr	r3, [pc, #68]	; (8008cc4 <vPortExitCritical+0x4c>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d109      	bne.n	8008c9a <vPortExitCritical+0x22>
 8008c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	607b      	str	r3, [r7, #4]
 8008c98:	e7fe      	b.n	8008c98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008c9a:	4b0a      	ldr	r3, [pc, #40]	; (8008cc4 <vPortExitCritical+0x4c>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	4a08      	ldr	r2, [pc, #32]	; (8008cc4 <vPortExitCritical+0x4c>)
 8008ca2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ca4:	4b07      	ldr	r3, [pc, #28]	; (8008cc4 <vPortExitCritical+0x4c>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d104      	bne.n	8008cb6 <vPortExitCritical+0x3e>
 8008cac:	2300      	movs	r3, #0
 8008cae:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008cb6:	bf00      	nop
 8008cb8:	370c      	adds	r7, #12
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	2000001c 	.word	0x2000001c
	...

08008cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008cd0:	f3ef 8009 	mrs	r0, PSP
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	4b15      	ldr	r3, [pc, #84]	; (8008d30 <pxCurrentTCBConst>)
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	f01e 0f10 	tst.w	lr, #16
 8008ce0:	bf08      	it	eq
 8008ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cea:	6010      	str	r0, [r2, #0]
 8008cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008cf4:	f380 8811 	msr	BASEPRI, r0
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f7fe ffe0 	bl	8007cc4 <vTaskSwitchContext>
 8008d04:	f04f 0000 	mov.w	r0, #0
 8008d08:	f380 8811 	msr	BASEPRI, r0
 8008d0c:	bc09      	pop	{r0, r3}
 8008d0e:	6819      	ldr	r1, [r3, #0]
 8008d10:	6808      	ldr	r0, [r1, #0]
 8008d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d16:	f01e 0f10 	tst.w	lr, #16
 8008d1a:	bf08      	it	eq
 8008d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d20:	f380 8809 	msr	PSP, r0
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	f3af 8000 	nop.w

08008d30 <pxCurrentTCBConst>:
 8008d30:	20000ef4 	.word	0x20000ef4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d34:	bf00      	nop
 8008d36:	bf00      	nop

08008d38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d50:	f7fe ff00 	bl	8007b54 <xTaskIncrementTick>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d003      	beq.n	8008d62 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d5a:	4b06      	ldr	r3, [pc, #24]	; (8008d74 <xPortSysTickHandler+0x3c>)
 8008d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d60:	601a      	str	r2, [r3, #0]
 8008d62:	2300      	movs	r3, #0
 8008d64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d6c:	bf00      	nop
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	e000ed04 	.word	0xe000ed04

08008d78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d78:	b480      	push	{r7}
 8008d7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d7c:	4b0b      	ldr	r3, [pc, #44]	; (8008dac <vPortSetupTimerInterrupt+0x34>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d82:	4b0b      	ldr	r3, [pc, #44]	; (8008db0 <vPortSetupTimerInterrupt+0x38>)
 8008d84:	2200      	movs	r2, #0
 8008d86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d88:	4b0a      	ldr	r3, [pc, #40]	; (8008db4 <vPortSetupTimerInterrupt+0x3c>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a0a      	ldr	r2, [pc, #40]	; (8008db8 <vPortSetupTimerInterrupt+0x40>)
 8008d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d92:	099b      	lsrs	r3, r3, #6
 8008d94:	4a09      	ldr	r2, [pc, #36]	; (8008dbc <vPortSetupTimerInterrupt+0x44>)
 8008d96:	3b01      	subs	r3, #1
 8008d98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d9a:	4b04      	ldr	r3, [pc, #16]	; (8008dac <vPortSetupTimerInterrupt+0x34>)
 8008d9c:	2207      	movs	r2, #7
 8008d9e:	601a      	str	r2, [r3, #0]
}
 8008da0:	bf00      	nop
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	e000e010 	.word	0xe000e010
 8008db0:	e000e018 	.word	0xe000e018
 8008db4:	20000010 	.word	0x20000010
 8008db8:	10624dd3 	.word	0x10624dd3
 8008dbc:	e000e014 	.word	0xe000e014

08008dc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008dc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008dd0 <vPortEnableVFP+0x10>
 8008dc4:	6801      	ldr	r1, [r0, #0]
 8008dc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008dca:	6001      	str	r1, [r0, #0]
 8008dcc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008dce:	bf00      	nop
 8008dd0:	e000ed88 	.word	0xe000ed88

08008dd4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008dda:	f3ef 8305 	mrs	r3, IPSR
 8008dde:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2b0f      	cmp	r3, #15
 8008de4:	d913      	bls.n	8008e0e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008de6:	4a16      	ldr	r2, [pc, #88]	; (8008e40 <vPortValidateInterruptPriority+0x6c>)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	4413      	add	r3, r2
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008df0:	4b14      	ldr	r3, [pc, #80]	; (8008e44 <vPortValidateInterruptPriority+0x70>)
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	7afa      	ldrb	r2, [r7, #11]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d209      	bcs.n	8008e0e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	607b      	str	r3, [r7, #4]
 8008e0c:	e7fe      	b.n	8008e0c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e0e:	4b0e      	ldr	r3, [pc, #56]	; (8008e48 <vPortValidateInterruptPriority+0x74>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008e16:	4b0d      	ldr	r3, [pc, #52]	; (8008e4c <vPortValidateInterruptPriority+0x78>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d909      	bls.n	8008e32 <vPortValidateInterruptPriority+0x5e>
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	603b      	str	r3, [r7, #0]
 8008e30:	e7fe      	b.n	8008e30 <vPortValidateInterruptPriority+0x5c>
	}
 8008e32:	bf00      	nop
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	e000e3f0 	.word	0xe000e3f0
 8008e44:	20001520 	.word	0x20001520
 8008e48:	e000ed0c 	.word	0xe000ed0c
 8008e4c:	20001524 	.word	0x20001524

08008e50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b08a      	sub	sp, #40	; 0x28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e5c:	f7fe fdc0 	bl	80079e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e60:	4b57      	ldr	r3, [pc, #348]	; (8008fc0 <pvPortMalloc+0x170>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e68:	f000 f90c 	bl	8009084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e6c:	4b55      	ldr	r3, [pc, #340]	; (8008fc4 <pvPortMalloc+0x174>)
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4013      	ands	r3, r2
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f040 808c 	bne.w	8008f92 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d01c      	beq.n	8008eba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008e80:	2208      	movs	r2, #8
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4413      	add	r3, r2
 8008e86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f003 0307 	and.w	r3, r3, #7
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d013      	beq.n	8008eba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f023 0307 	bic.w	r3, r3, #7
 8008e98:	3308      	adds	r3, #8
 8008e9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f003 0307 	and.w	r3, r3, #7
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d009      	beq.n	8008eba <pvPortMalloc+0x6a>
 8008ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	617b      	str	r3, [r7, #20]
 8008eb8:	e7fe      	b.n	8008eb8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d068      	beq.n	8008f92 <pvPortMalloc+0x142>
 8008ec0:	4b41      	ldr	r3, [pc, #260]	; (8008fc8 <pvPortMalloc+0x178>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d863      	bhi.n	8008f92 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008eca:	4b40      	ldr	r3, [pc, #256]	; (8008fcc <pvPortMalloc+0x17c>)
 8008ecc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ece:	4b3f      	ldr	r3, [pc, #252]	; (8008fcc <pvPortMalloc+0x17c>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ed4:	e004      	b.n	8008ee0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d903      	bls.n	8008ef2 <pvPortMalloc+0xa2>
 8008eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1f1      	bne.n	8008ed6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ef2:	4b33      	ldr	r3, [pc, #204]	; (8008fc0 <pvPortMalloc+0x170>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d04a      	beq.n	8008f92 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008efc:	6a3b      	ldr	r3, [r7, #32]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2208      	movs	r2, #8
 8008f02:	4413      	add	r3, r2
 8008f04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	6a3b      	ldr	r3, [r7, #32]
 8008f0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	1ad2      	subs	r2, r2, r3
 8008f16:	2308      	movs	r3, #8
 8008f18:	005b      	lsls	r3, r3, #1
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d91e      	bls.n	8008f5c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4413      	add	r3, r2
 8008f24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	f003 0307 	and.w	r3, r3, #7
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d009      	beq.n	8008f44 <pvPortMalloc+0xf4>
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	613b      	str	r3, [r7, #16]
 8008f42:	e7fe      	b.n	8008f42 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	685a      	ldr	r2, [r3, #4]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	1ad2      	subs	r2, r2, r3
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f56:	69b8      	ldr	r0, [r7, #24]
 8008f58:	f000 f8f6 	bl	8009148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f5c:	4b1a      	ldr	r3, [pc, #104]	; (8008fc8 <pvPortMalloc+0x178>)
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	4a18      	ldr	r2, [pc, #96]	; (8008fc8 <pvPortMalloc+0x178>)
 8008f68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f6a:	4b17      	ldr	r3, [pc, #92]	; (8008fc8 <pvPortMalloc+0x178>)
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	4b18      	ldr	r3, [pc, #96]	; (8008fd0 <pvPortMalloc+0x180>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d203      	bcs.n	8008f7e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f76:	4b14      	ldr	r3, [pc, #80]	; (8008fc8 <pvPortMalloc+0x178>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a15      	ldr	r2, [pc, #84]	; (8008fd0 <pvPortMalloc+0x180>)
 8008f7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f80:	685a      	ldr	r2, [r3, #4]
 8008f82:	4b10      	ldr	r3, [pc, #64]	; (8008fc4 <pvPortMalloc+0x174>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	431a      	orrs	r2, r3
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8e:	2200      	movs	r2, #0
 8008f90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f92:	f7fe fd33 	bl	80079fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	f003 0307 	and.w	r3, r3, #7
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d009      	beq.n	8008fb4 <pvPortMalloc+0x164>
 8008fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa4:	f383 8811 	msr	BASEPRI, r3
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	60fb      	str	r3, [r7, #12]
 8008fb2:	e7fe      	b.n	8008fb2 <pvPortMalloc+0x162>
	return pvReturn;
 8008fb4:	69fb      	ldr	r3, [r7, #28]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3728      	adds	r7, #40	; 0x28
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20002130 	.word	0x20002130
 8008fc4:	2000213c 	.word	0x2000213c
 8008fc8:	20002134 	.word	0x20002134
 8008fcc:	20002128 	.word	0x20002128
 8008fd0:	20002138 	.word	0x20002138

08008fd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b086      	sub	sp, #24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d046      	beq.n	8009074 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fe6:	2308      	movs	r3, #8
 8008fe8:	425b      	negs	r3, r3
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	4413      	add	r3, r2
 8008fee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	4b20      	ldr	r3, [pc, #128]	; (800907c <vPortFree+0xa8>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d109      	bne.n	8009016 <vPortFree+0x42>
 8009002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	60fb      	str	r3, [r7, #12]
 8009014:	e7fe      	b.n	8009014 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d009      	beq.n	8009032 <vPortFree+0x5e>
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	60bb      	str	r3, [r7, #8]
 8009030:	e7fe      	b.n	8009030 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	4b11      	ldr	r3, [pc, #68]	; (800907c <vPortFree+0xa8>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4013      	ands	r3, r2
 800903c:	2b00      	cmp	r3, #0
 800903e:	d019      	beq.n	8009074 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d115      	bne.n	8009074 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	685a      	ldr	r2, [r3, #4]
 800904c:	4b0b      	ldr	r3, [pc, #44]	; (800907c <vPortFree+0xa8>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	43db      	mvns	r3, r3
 8009052:	401a      	ands	r2, r3
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009058:	f7fe fcc2 	bl	80079e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	4b07      	ldr	r3, [pc, #28]	; (8009080 <vPortFree+0xac>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4413      	add	r3, r2
 8009066:	4a06      	ldr	r2, [pc, #24]	; (8009080 <vPortFree+0xac>)
 8009068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800906a:	6938      	ldr	r0, [r7, #16]
 800906c:	f000 f86c 	bl	8009148 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009070:	f7fe fcc4 	bl	80079fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009074:	bf00      	nop
 8009076:	3718      	adds	r7, #24
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	2000213c 	.word	0x2000213c
 8009080:	20002134 	.word	0x20002134

08009084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800908a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800908e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009090:	4b27      	ldr	r3, [pc, #156]	; (8009130 <prvHeapInit+0xac>)
 8009092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00c      	beq.n	80090b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3307      	adds	r3, #7
 80090a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f023 0307 	bic.w	r3, r3, #7
 80090aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	4a1f      	ldr	r2, [pc, #124]	; (8009130 <prvHeapInit+0xac>)
 80090b4:	4413      	add	r3, r2
 80090b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090bc:	4a1d      	ldr	r2, [pc, #116]	; (8009134 <prvHeapInit+0xb0>)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090c2:	4b1c      	ldr	r3, [pc, #112]	; (8009134 <prvHeapInit+0xb0>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	4413      	add	r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090d0:	2208      	movs	r2, #8
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	1a9b      	subs	r3, r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f023 0307 	bic.w	r3, r3, #7
 80090de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4a15      	ldr	r2, [pc, #84]	; (8009138 <prvHeapInit+0xb4>)
 80090e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090e6:	4b14      	ldr	r3, [pc, #80]	; (8009138 <prvHeapInit+0xb4>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2200      	movs	r2, #0
 80090ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090ee:	4b12      	ldr	r3, [pc, #72]	; (8009138 <prvHeapInit+0xb4>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2200      	movs	r2, #0
 80090f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	1ad2      	subs	r2, r2, r3
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009104:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <prvHeapInit+0xb4>)
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	4a0a      	ldr	r2, [pc, #40]	; (800913c <prvHeapInit+0xb8>)
 8009112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	4a09      	ldr	r2, [pc, #36]	; (8009140 <prvHeapInit+0xbc>)
 800911a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800911c:	4b09      	ldr	r3, [pc, #36]	; (8009144 <prvHeapInit+0xc0>)
 800911e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009122:	601a      	str	r2, [r3, #0]
}
 8009124:	bf00      	nop
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	20001528 	.word	0x20001528
 8009134:	20002128 	.word	0x20002128
 8009138:	20002130 	.word	0x20002130
 800913c:	20002138 	.word	0x20002138
 8009140:	20002134 	.word	0x20002134
 8009144:	2000213c 	.word	0x2000213c

08009148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009150:	4b28      	ldr	r3, [pc, #160]	; (80091f4 <prvInsertBlockIntoFreeList+0xac>)
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	e002      	b.n	800915c <prvInsertBlockIntoFreeList+0x14>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	60fb      	str	r3, [r7, #12]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	429a      	cmp	r2, r3
 8009164:	d8f7      	bhi.n	8009156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	4413      	add	r3, r2
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	429a      	cmp	r2, r3
 8009176:	d108      	bne.n	800918a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	441a      	add	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	441a      	add	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	429a      	cmp	r2, r3
 800919c:	d118      	bne.n	80091d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	4b15      	ldr	r3, [pc, #84]	; (80091f8 <prvInsertBlockIntoFreeList+0xb0>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d00d      	beq.n	80091c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	441a      	add	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	e008      	b.n	80091d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091c6:	4b0c      	ldr	r3, [pc, #48]	; (80091f8 <prvInsertBlockIntoFreeList+0xb0>)
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	e003      	b.n	80091d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d002      	beq.n	80091e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091e6:	bf00      	nop
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	20002128 	.word	0x20002128
 80091f8:	20002130 	.word	0x20002130

080091fc <__cxa_pure_virtual>:
 80091fc:	b508      	push	{r3, lr}
 80091fe:	f000 f80d 	bl	800921c <_ZSt9terminatev>

08009202 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009202:	b508      	push	{r3, lr}
 8009204:	4780      	blx	r0
 8009206:	f000 f80e 	bl	8009226 <abort>
	...

0800920c <_ZSt13get_terminatev>:
 800920c:	4b02      	ldr	r3, [pc, #8]	; (8009218 <_ZSt13get_terminatev+0xc>)
 800920e:	6818      	ldr	r0, [r3, #0]
 8009210:	f3bf 8f5b 	dmb	ish
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	20000020 	.word	0x20000020

0800921c <_ZSt9terminatev>:
 800921c:	b508      	push	{r3, lr}
 800921e:	f7ff fff5 	bl	800920c <_ZSt13get_terminatev>
 8009222:	f7ff ffee 	bl	8009202 <_ZN10__cxxabiv111__terminateEPFvvE>

08009226 <abort>:
 8009226:	b508      	push	{r3, lr}
 8009228:	2006      	movs	r0, #6
 800922a:	f000 f871 	bl	8009310 <raise>
 800922e:	2001      	movs	r0, #1
 8009230:	f7f9 fe39 	bl	8002ea6 <_exit>

08009234 <__errno>:
 8009234:	4b01      	ldr	r3, [pc, #4]	; (800923c <__errno+0x8>)
 8009236:	6818      	ldr	r0, [r3, #0]
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	20000024 	.word	0x20000024

08009240 <__libc_init_array>:
 8009240:	b570      	push	{r4, r5, r6, lr}
 8009242:	4e0d      	ldr	r6, [pc, #52]	; (8009278 <__libc_init_array+0x38>)
 8009244:	4c0d      	ldr	r4, [pc, #52]	; (800927c <__libc_init_array+0x3c>)
 8009246:	1ba4      	subs	r4, r4, r6
 8009248:	10a4      	asrs	r4, r4, #2
 800924a:	2500      	movs	r5, #0
 800924c:	42a5      	cmp	r5, r4
 800924e:	d109      	bne.n	8009264 <__libc_init_array+0x24>
 8009250:	4e0b      	ldr	r6, [pc, #44]	; (8009280 <__libc_init_array+0x40>)
 8009252:	4c0c      	ldr	r4, [pc, #48]	; (8009284 <__libc_init_array+0x44>)
 8009254:	f000 f960 	bl	8009518 <_init>
 8009258:	1ba4      	subs	r4, r4, r6
 800925a:	10a4      	asrs	r4, r4, #2
 800925c:	2500      	movs	r5, #0
 800925e:	42a5      	cmp	r5, r4
 8009260:	d105      	bne.n	800926e <__libc_init_array+0x2e>
 8009262:	bd70      	pop	{r4, r5, r6, pc}
 8009264:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009268:	4798      	blx	r3
 800926a:	3501      	adds	r5, #1
 800926c:	e7ee      	b.n	800924c <__libc_init_array+0xc>
 800926e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009272:	4798      	blx	r3
 8009274:	3501      	adds	r5, #1
 8009276:	e7f2      	b.n	800925e <__libc_init_array+0x1e>
 8009278:	0800985c 	.word	0x0800985c
 800927c:	0800985c 	.word	0x0800985c
 8009280:	0800985c 	.word	0x0800985c
 8009284:	08009864 	.word	0x08009864

08009288 <memcpy>:
 8009288:	b510      	push	{r4, lr}
 800928a:	1e43      	subs	r3, r0, #1
 800928c:	440a      	add	r2, r1
 800928e:	4291      	cmp	r1, r2
 8009290:	d100      	bne.n	8009294 <memcpy+0xc>
 8009292:	bd10      	pop	{r4, pc}
 8009294:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009298:	f803 4f01 	strb.w	r4, [r3, #1]!
 800929c:	e7f7      	b.n	800928e <memcpy+0x6>

0800929e <memset>:
 800929e:	4402      	add	r2, r0
 80092a0:	4603      	mov	r3, r0
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d100      	bne.n	80092a8 <memset+0xa>
 80092a6:	4770      	bx	lr
 80092a8:	f803 1b01 	strb.w	r1, [r3], #1
 80092ac:	e7f9      	b.n	80092a2 <memset+0x4>
	...

080092b0 <realloc>:
 80092b0:	4b02      	ldr	r3, [pc, #8]	; (80092bc <realloc+0xc>)
 80092b2:	460a      	mov	r2, r1
 80092b4:	4601      	mov	r1, r0
 80092b6:	6818      	ldr	r0, [r3, #0]
 80092b8:	f000 b8a0 	b.w	80093fc <_realloc_r>
 80092bc:	20000024 	.word	0x20000024

080092c0 <_raise_r>:
 80092c0:	291f      	cmp	r1, #31
 80092c2:	b538      	push	{r3, r4, r5, lr}
 80092c4:	4604      	mov	r4, r0
 80092c6:	460d      	mov	r5, r1
 80092c8:	d904      	bls.n	80092d4 <_raise_r+0x14>
 80092ca:	2316      	movs	r3, #22
 80092cc:	6003      	str	r3, [r0, #0]
 80092ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092d2:	bd38      	pop	{r3, r4, r5, pc}
 80092d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80092d6:	b112      	cbz	r2, 80092de <_raise_r+0x1e>
 80092d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092dc:	b94b      	cbnz	r3, 80092f2 <_raise_r+0x32>
 80092de:	4620      	mov	r0, r4
 80092e0:	f000 f830 	bl	8009344 <_getpid_r>
 80092e4:	462a      	mov	r2, r5
 80092e6:	4601      	mov	r1, r0
 80092e8:	4620      	mov	r0, r4
 80092ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092ee:	f000 b817 	b.w	8009320 <_kill_r>
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d00a      	beq.n	800930c <_raise_r+0x4c>
 80092f6:	1c59      	adds	r1, r3, #1
 80092f8:	d103      	bne.n	8009302 <_raise_r+0x42>
 80092fa:	2316      	movs	r3, #22
 80092fc:	6003      	str	r3, [r0, #0]
 80092fe:	2001      	movs	r0, #1
 8009300:	e7e7      	b.n	80092d2 <_raise_r+0x12>
 8009302:	2400      	movs	r4, #0
 8009304:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009308:	4628      	mov	r0, r5
 800930a:	4798      	blx	r3
 800930c:	2000      	movs	r0, #0
 800930e:	e7e0      	b.n	80092d2 <_raise_r+0x12>

08009310 <raise>:
 8009310:	4b02      	ldr	r3, [pc, #8]	; (800931c <raise+0xc>)
 8009312:	4601      	mov	r1, r0
 8009314:	6818      	ldr	r0, [r3, #0]
 8009316:	f7ff bfd3 	b.w	80092c0 <_raise_r>
 800931a:	bf00      	nop
 800931c:	20000024 	.word	0x20000024

08009320 <_kill_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4c07      	ldr	r4, [pc, #28]	; (8009340 <_kill_r+0x20>)
 8009324:	2300      	movs	r3, #0
 8009326:	4605      	mov	r5, r0
 8009328:	4608      	mov	r0, r1
 800932a:	4611      	mov	r1, r2
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	f7f9 fdaa 	bl	8002e86 <_kill>
 8009332:	1c43      	adds	r3, r0, #1
 8009334:	d102      	bne.n	800933c <_kill_r+0x1c>
 8009336:	6823      	ldr	r3, [r4, #0]
 8009338:	b103      	cbz	r3, 800933c <_kill_r+0x1c>
 800933a:	602b      	str	r3, [r5, #0]
 800933c:	bd38      	pop	{r3, r4, r5, pc}
 800933e:	bf00      	nop
 8009340:	2000218c 	.word	0x2000218c

08009344 <_getpid_r>:
 8009344:	f7f9 bd97 	b.w	8002e76 <_getpid>

08009348 <_malloc_r>:
 8009348:	b570      	push	{r4, r5, r6, lr}
 800934a:	1ccd      	adds	r5, r1, #3
 800934c:	f025 0503 	bic.w	r5, r5, #3
 8009350:	3508      	adds	r5, #8
 8009352:	2d0c      	cmp	r5, #12
 8009354:	bf38      	it	cc
 8009356:	250c      	movcc	r5, #12
 8009358:	2d00      	cmp	r5, #0
 800935a:	4606      	mov	r6, r0
 800935c:	db01      	blt.n	8009362 <_malloc_r+0x1a>
 800935e:	42a9      	cmp	r1, r5
 8009360:	d903      	bls.n	800936a <_malloc_r+0x22>
 8009362:	230c      	movs	r3, #12
 8009364:	6033      	str	r3, [r6, #0]
 8009366:	2000      	movs	r0, #0
 8009368:	bd70      	pop	{r4, r5, r6, pc}
 800936a:	f000 f87d 	bl	8009468 <__malloc_lock>
 800936e:	4a21      	ldr	r2, [pc, #132]	; (80093f4 <_malloc_r+0xac>)
 8009370:	6814      	ldr	r4, [r2, #0]
 8009372:	4621      	mov	r1, r4
 8009374:	b991      	cbnz	r1, 800939c <_malloc_r+0x54>
 8009376:	4c20      	ldr	r4, [pc, #128]	; (80093f8 <_malloc_r+0xb0>)
 8009378:	6823      	ldr	r3, [r4, #0]
 800937a:	b91b      	cbnz	r3, 8009384 <_malloc_r+0x3c>
 800937c:	4630      	mov	r0, r6
 800937e:	f000 f863 	bl	8009448 <_sbrk_r>
 8009382:	6020      	str	r0, [r4, #0]
 8009384:	4629      	mov	r1, r5
 8009386:	4630      	mov	r0, r6
 8009388:	f000 f85e 	bl	8009448 <_sbrk_r>
 800938c:	1c43      	adds	r3, r0, #1
 800938e:	d124      	bne.n	80093da <_malloc_r+0x92>
 8009390:	230c      	movs	r3, #12
 8009392:	6033      	str	r3, [r6, #0]
 8009394:	4630      	mov	r0, r6
 8009396:	f000 f868 	bl	800946a <__malloc_unlock>
 800939a:	e7e4      	b.n	8009366 <_malloc_r+0x1e>
 800939c:	680b      	ldr	r3, [r1, #0]
 800939e:	1b5b      	subs	r3, r3, r5
 80093a0:	d418      	bmi.n	80093d4 <_malloc_r+0x8c>
 80093a2:	2b0b      	cmp	r3, #11
 80093a4:	d90f      	bls.n	80093c6 <_malloc_r+0x7e>
 80093a6:	600b      	str	r3, [r1, #0]
 80093a8:	50cd      	str	r5, [r1, r3]
 80093aa:	18cc      	adds	r4, r1, r3
 80093ac:	4630      	mov	r0, r6
 80093ae:	f000 f85c 	bl	800946a <__malloc_unlock>
 80093b2:	f104 000b 	add.w	r0, r4, #11
 80093b6:	1d23      	adds	r3, r4, #4
 80093b8:	f020 0007 	bic.w	r0, r0, #7
 80093bc:	1ac3      	subs	r3, r0, r3
 80093be:	d0d3      	beq.n	8009368 <_malloc_r+0x20>
 80093c0:	425a      	negs	r2, r3
 80093c2:	50e2      	str	r2, [r4, r3]
 80093c4:	e7d0      	b.n	8009368 <_malloc_r+0x20>
 80093c6:	428c      	cmp	r4, r1
 80093c8:	684b      	ldr	r3, [r1, #4]
 80093ca:	bf16      	itet	ne
 80093cc:	6063      	strne	r3, [r4, #4]
 80093ce:	6013      	streq	r3, [r2, #0]
 80093d0:	460c      	movne	r4, r1
 80093d2:	e7eb      	b.n	80093ac <_malloc_r+0x64>
 80093d4:	460c      	mov	r4, r1
 80093d6:	6849      	ldr	r1, [r1, #4]
 80093d8:	e7cc      	b.n	8009374 <_malloc_r+0x2c>
 80093da:	1cc4      	adds	r4, r0, #3
 80093dc:	f024 0403 	bic.w	r4, r4, #3
 80093e0:	42a0      	cmp	r0, r4
 80093e2:	d005      	beq.n	80093f0 <_malloc_r+0xa8>
 80093e4:	1a21      	subs	r1, r4, r0
 80093e6:	4630      	mov	r0, r6
 80093e8:	f000 f82e 	bl	8009448 <_sbrk_r>
 80093ec:	3001      	adds	r0, #1
 80093ee:	d0cf      	beq.n	8009390 <_malloc_r+0x48>
 80093f0:	6025      	str	r5, [r4, #0]
 80093f2:	e7db      	b.n	80093ac <_malloc_r+0x64>
 80093f4:	20002140 	.word	0x20002140
 80093f8:	20002144 	.word	0x20002144

080093fc <_realloc_r>:
 80093fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093fe:	4607      	mov	r7, r0
 8009400:	4614      	mov	r4, r2
 8009402:	460e      	mov	r6, r1
 8009404:	b921      	cbnz	r1, 8009410 <_realloc_r+0x14>
 8009406:	4611      	mov	r1, r2
 8009408:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800940c:	f7ff bf9c 	b.w	8009348 <_malloc_r>
 8009410:	b922      	cbnz	r2, 800941c <_realloc_r+0x20>
 8009412:	f000 f82b 	bl	800946c <_free_r>
 8009416:	4625      	mov	r5, r4
 8009418:	4628      	mov	r0, r5
 800941a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800941c:	f000 f874 	bl	8009508 <_malloc_usable_size_r>
 8009420:	42a0      	cmp	r0, r4
 8009422:	d20f      	bcs.n	8009444 <_realloc_r+0x48>
 8009424:	4621      	mov	r1, r4
 8009426:	4638      	mov	r0, r7
 8009428:	f7ff ff8e 	bl	8009348 <_malloc_r>
 800942c:	4605      	mov	r5, r0
 800942e:	2800      	cmp	r0, #0
 8009430:	d0f2      	beq.n	8009418 <_realloc_r+0x1c>
 8009432:	4631      	mov	r1, r6
 8009434:	4622      	mov	r2, r4
 8009436:	f7ff ff27 	bl	8009288 <memcpy>
 800943a:	4631      	mov	r1, r6
 800943c:	4638      	mov	r0, r7
 800943e:	f000 f815 	bl	800946c <_free_r>
 8009442:	e7e9      	b.n	8009418 <_realloc_r+0x1c>
 8009444:	4635      	mov	r5, r6
 8009446:	e7e7      	b.n	8009418 <_realloc_r+0x1c>

08009448 <_sbrk_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4c06      	ldr	r4, [pc, #24]	; (8009464 <_sbrk_r+0x1c>)
 800944c:	2300      	movs	r3, #0
 800944e:	4605      	mov	r5, r0
 8009450:	4608      	mov	r0, r1
 8009452:	6023      	str	r3, [r4, #0]
 8009454:	f7f9 fd32 	bl	8002ebc <_sbrk>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d102      	bne.n	8009462 <_sbrk_r+0x1a>
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	b103      	cbz	r3, 8009462 <_sbrk_r+0x1a>
 8009460:	602b      	str	r3, [r5, #0]
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	2000218c 	.word	0x2000218c

08009468 <__malloc_lock>:
 8009468:	4770      	bx	lr

0800946a <__malloc_unlock>:
 800946a:	4770      	bx	lr

0800946c <_free_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	4605      	mov	r5, r0
 8009470:	2900      	cmp	r1, #0
 8009472:	d045      	beq.n	8009500 <_free_r+0x94>
 8009474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009478:	1f0c      	subs	r4, r1, #4
 800947a:	2b00      	cmp	r3, #0
 800947c:	bfb8      	it	lt
 800947e:	18e4      	addlt	r4, r4, r3
 8009480:	f7ff fff2 	bl	8009468 <__malloc_lock>
 8009484:	4a1f      	ldr	r2, [pc, #124]	; (8009504 <_free_r+0x98>)
 8009486:	6813      	ldr	r3, [r2, #0]
 8009488:	4610      	mov	r0, r2
 800948a:	b933      	cbnz	r3, 800949a <_free_r+0x2e>
 800948c:	6063      	str	r3, [r4, #4]
 800948e:	6014      	str	r4, [r2, #0]
 8009490:	4628      	mov	r0, r5
 8009492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009496:	f7ff bfe8 	b.w	800946a <__malloc_unlock>
 800949a:	42a3      	cmp	r3, r4
 800949c:	d90c      	bls.n	80094b8 <_free_r+0x4c>
 800949e:	6821      	ldr	r1, [r4, #0]
 80094a0:	1862      	adds	r2, r4, r1
 80094a2:	4293      	cmp	r3, r2
 80094a4:	bf04      	itt	eq
 80094a6:	681a      	ldreq	r2, [r3, #0]
 80094a8:	685b      	ldreq	r3, [r3, #4]
 80094aa:	6063      	str	r3, [r4, #4]
 80094ac:	bf04      	itt	eq
 80094ae:	1852      	addeq	r2, r2, r1
 80094b0:	6022      	streq	r2, [r4, #0]
 80094b2:	6004      	str	r4, [r0, #0]
 80094b4:	e7ec      	b.n	8009490 <_free_r+0x24>
 80094b6:	4613      	mov	r3, r2
 80094b8:	685a      	ldr	r2, [r3, #4]
 80094ba:	b10a      	cbz	r2, 80094c0 <_free_r+0x54>
 80094bc:	42a2      	cmp	r2, r4
 80094be:	d9fa      	bls.n	80094b6 <_free_r+0x4a>
 80094c0:	6819      	ldr	r1, [r3, #0]
 80094c2:	1858      	adds	r0, r3, r1
 80094c4:	42a0      	cmp	r0, r4
 80094c6:	d10b      	bne.n	80094e0 <_free_r+0x74>
 80094c8:	6820      	ldr	r0, [r4, #0]
 80094ca:	4401      	add	r1, r0
 80094cc:	1858      	adds	r0, r3, r1
 80094ce:	4282      	cmp	r2, r0
 80094d0:	6019      	str	r1, [r3, #0]
 80094d2:	d1dd      	bne.n	8009490 <_free_r+0x24>
 80094d4:	6810      	ldr	r0, [r2, #0]
 80094d6:	6852      	ldr	r2, [r2, #4]
 80094d8:	605a      	str	r2, [r3, #4]
 80094da:	4401      	add	r1, r0
 80094dc:	6019      	str	r1, [r3, #0]
 80094de:	e7d7      	b.n	8009490 <_free_r+0x24>
 80094e0:	d902      	bls.n	80094e8 <_free_r+0x7c>
 80094e2:	230c      	movs	r3, #12
 80094e4:	602b      	str	r3, [r5, #0]
 80094e6:	e7d3      	b.n	8009490 <_free_r+0x24>
 80094e8:	6820      	ldr	r0, [r4, #0]
 80094ea:	1821      	adds	r1, r4, r0
 80094ec:	428a      	cmp	r2, r1
 80094ee:	bf04      	itt	eq
 80094f0:	6811      	ldreq	r1, [r2, #0]
 80094f2:	6852      	ldreq	r2, [r2, #4]
 80094f4:	6062      	str	r2, [r4, #4]
 80094f6:	bf04      	itt	eq
 80094f8:	1809      	addeq	r1, r1, r0
 80094fa:	6021      	streq	r1, [r4, #0]
 80094fc:	605c      	str	r4, [r3, #4]
 80094fe:	e7c7      	b.n	8009490 <_free_r+0x24>
 8009500:	bd38      	pop	{r3, r4, r5, pc}
 8009502:	bf00      	nop
 8009504:	20002140 	.word	0x20002140

08009508 <_malloc_usable_size_r>:
 8009508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800950c:	1f18      	subs	r0, r3, #4
 800950e:	2b00      	cmp	r3, #0
 8009510:	bfbc      	itt	lt
 8009512:	580b      	ldrlt	r3, [r1, r0]
 8009514:	18c0      	addlt	r0, r0, r3
 8009516:	4770      	bx	lr

08009518 <_init>:
 8009518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951a:	bf00      	nop
 800951c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800951e:	bc08      	pop	{r3}
 8009520:	469e      	mov	lr, r3
 8009522:	4770      	bx	lr

08009524 <_fini>:
 8009524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009526:	bf00      	nop
 8009528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800952a:	bc08      	pop	{r3}
 800952c:	469e      	mov	lr, r3
 800952e:	4770      	bx	lr
