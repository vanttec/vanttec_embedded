
Boat_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad08  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  0800aee8  0800aee8  0001aee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b24c  0800b24c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800b24c  0800b24c  0001b24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b254  0800b254  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b254  0800b254  0001b254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b258  0800b258  0001b258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800b25c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000304c  20000080  0800b2dc  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200030cc  0800b2dc  000230cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a847  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d97  00000000  00000000  0004a8f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b68  00000000  00000000  0004f690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019a8  00000000  00000000  000511f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002478e  00000000  00000000  00052ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f4df  00000000  00000000  0007732e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6f85  00000000  00000000  0009680d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016d792  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007960  00000000  00000000  0016d7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800aed0 	.word	0x0800aed0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	0800aed0 	.word	0x0800aed0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a80:	f000 b96e 	b.w	8000d60 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468c      	mov	ip, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f040 8083 	bne.w	8000bb2 <__udivmoddi4+0x116>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4617      	mov	r7, r2
 8000ab0:	d947      	bls.n	8000b42 <__udivmoddi4+0xa6>
 8000ab2:	fab2 f282 	clz	r2, r2
 8000ab6:	b142      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	f1c2 0020 	rsb	r0, r2, #32
 8000abc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ac0:	4091      	lsls	r1, r2
 8000ac2:	4097      	lsls	r7, r2
 8000ac4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ad4:	fa1f fe87 	uxth.w	lr, r7
 8000ad8:	fb08 c116 	mls	r1, r8, r6, ip
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000aee:	f080 8119 	bcs.w	8000d24 <__udivmoddi4+0x288>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8116 	bls.w	8000d24 <__udivmoddi4+0x288>
 8000af8:	3e02      	subs	r6, #2
 8000afa:	443b      	add	r3, r7
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b04:	fb08 3310 	mls	r3, r8, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	193c      	adds	r4, r7, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b1a:	f080 8105 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	f240 8102 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000b24:	3802      	subs	r0, #2
 8000b26:	443c      	add	r4, r7
 8000b28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b2c:	eba4 040e 	sub.w	r4, r4, lr
 8000b30:	2600      	movs	r6, #0
 8000b32:	b11d      	cbz	r5, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c5 4300 	strd	r4, r3, [r5]
 8000b3c:	4631      	mov	r1, r6
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	b902      	cbnz	r2, 8000b46 <__udivmoddi4+0xaa>
 8000b44:	deff      	udf	#255	; 0xff
 8000b46:	fab2 f282 	clz	r2, r2
 8000b4a:	2a00      	cmp	r2, #0
 8000b4c:	d150      	bne.n	8000bf0 <__udivmoddi4+0x154>
 8000b4e:	1bcb      	subs	r3, r1, r7
 8000b50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b54:	fa1f f887 	uxth.w	r8, r7
 8000b58:	2601      	movs	r6, #1
 8000b5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b5e:	0c21      	lsrs	r1, r4, #16
 8000b60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b68:	fb08 f30c 	mul.w	r3, r8, ip
 8000b6c:	428b      	cmp	r3, r1
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000b70:	1879      	adds	r1, r7, r1
 8000b72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0xe2>
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	f200 80e9 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000b7e:	4684      	mov	ip, r0
 8000b80:	1ac9      	subs	r1, r1, r3
 8000b82:	b2a3      	uxth	r3, r4
 8000b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b90:	fb08 f800 	mul.w	r8, r8, r0
 8000b94:	45a0      	cmp	r8, r4
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x10c>
 8000b98:	193c      	adds	r4, r7, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x10a>
 8000ba0:	45a0      	cmp	r8, r4
 8000ba2:	f200 80d9 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	eba4 0408 	sub.w	r4, r4, r8
 8000bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bb0:	e7bf      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d909      	bls.n	8000bca <__udivmoddi4+0x12e>
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	f000 80b1 	beq.w	8000d1e <__udivmoddi4+0x282>
 8000bbc:	2600      	movs	r6, #0
 8000bbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	4631      	mov	r1, r6
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	fab3 f683 	clz	r6, r3
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d14a      	bne.n	8000c68 <__udivmoddi4+0x1cc>
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0x140>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 80b8 	bhi.w	8000d4c <__udivmoddi4+0x2b0>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb61 0103 	sbc.w	r1, r1, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	468c      	mov	ip, r1
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d0a8      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000bea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bee:	e7a5      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000bf0:	f1c2 0320 	rsb	r3, r2, #32
 8000bf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000bf8:	4097      	lsls	r7, r2
 8000bfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000bfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c02:	40d9      	lsrs	r1, r3
 8000c04:	4330      	orrs	r0, r6
 8000c06:	0c03      	lsrs	r3, r0, #16
 8000c08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c0c:	fa1f f887 	uxth.w	r8, r7
 8000c10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c18:	fb06 f108 	mul.w	r1, r6, r8
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x19c>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 808d 	bcs.w	8000d48 <__udivmoddi4+0x2ac>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 808a 	bls.w	8000d48 <__udivmoddi4+0x2ac>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b281      	uxth	r1, r0
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c48:	fb00 f308 	mul.w	r3, r0, r8
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x1c4>
 8000c50:	1879      	adds	r1, r7, r1
 8000c52:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c56:	d273      	bcs.n	8000d40 <__udivmoddi4+0x2a4>
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d971      	bls.n	8000d40 <__udivmoddi4+0x2a4>
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	4439      	add	r1, r7
 8000c60:	1acb      	subs	r3, r1, r3
 8000c62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c66:	e778      	b.n	8000b5a <__udivmoddi4+0xbe>
 8000c68:	f1c6 0c20 	rsb	ip, r6, #32
 8000c6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c74:	431c      	orrs	r4, r3
 8000c76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c86:	431f      	orrs	r7, r3
 8000c88:	0c3b      	lsrs	r3, r7, #16
 8000c8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c8e:	fa1f f884 	uxth.w	r8, r4
 8000c92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c9e:	458a      	cmp	sl, r1
 8000ca0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ca4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x220>
 8000caa:	1861      	adds	r1, r4, r1
 8000cac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cb0:	d248      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000cb2:	458a      	cmp	sl, r1
 8000cb4:	d946      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000cb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cba:	4421      	add	r1, r4
 8000cbc:	eba1 010a 	sub.w	r1, r1, sl
 8000cc0:	b2bf      	uxth	r7, r7
 8000cc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cce:	fb00 f808 	mul.w	r8, r0, r8
 8000cd2:	45b8      	cmp	r8, r7
 8000cd4:	d907      	bls.n	8000ce6 <__udivmoddi4+0x24a>
 8000cd6:	19e7      	adds	r7, r4, r7
 8000cd8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000cdc:	d22e      	bcs.n	8000d3c <__udivmoddi4+0x2a0>
 8000cde:	45b8      	cmp	r8, r7
 8000ce0:	d92c      	bls.n	8000d3c <__udivmoddi4+0x2a0>
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	4427      	add	r7, r4
 8000ce6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cea:	eba7 0708 	sub.w	r7, r7, r8
 8000cee:	fba0 8902 	umull	r8, r9, r0, r2
 8000cf2:	454f      	cmp	r7, r9
 8000cf4:	46c6      	mov	lr, r8
 8000cf6:	4649      	mov	r1, r9
 8000cf8:	d31a      	bcc.n	8000d30 <__udivmoddi4+0x294>
 8000cfa:	d017      	beq.n	8000d2c <__udivmoddi4+0x290>
 8000cfc:	b15d      	cbz	r5, 8000d16 <__udivmoddi4+0x27a>
 8000cfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000d02:	eb67 0701 	sbc.w	r7, r7, r1
 8000d06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d0a:	40f2      	lsrs	r2, r6
 8000d0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d10:	40f7      	lsrs	r7, r6
 8000d12:	e9c5 2700 	strd	r2, r7, [r5]
 8000d16:	2600      	movs	r6, #0
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e70b      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e9      	b.n	8000afc <__udivmoddi4+0x60>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6fd      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d2c:	4543      	cmp	r3, r8
 8000d2e:	d2e5      	bcs.n	8000cfc <__udivmoddi4+0x260>
 8000d30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d34:	eb69 0104 	sbc.w	r1, r9, r4
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7df      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e7d2      	b.n	8000ce6 <__udivmoddi4+0x24a>
 8000d40:	4660      	mov	r0, ip
 8000d42:	e78d      	b.n	8000c60 <__udivmoddi4+0x1c4>
 8000d44:	4681      	mov	r9, r0
 8000d46:	e7b9      	b.n	8000cbc <__udivmoddi4+0x220>
 8000d48:	4666      	mov	r6, ip
 8000d4a:	e775      	b.n	8000c38 <__udivmoddi4+0x19c>
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	e74a      	b.n	8000be6 <__udivmoddi4+0x14a>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	4439      	add	r1, r7
 8000d56:	e713      	b.n	8000b80 <__udivmoddi4+0xe4>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	443c      	add	r4, r7
 8000d5c:	e724      	b.n	8000ba8 <__udivmoddi4+0x10c>
 8000d5e:	bf00      	nop

08000d60 <__aeabi_idiv0>:
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <SERVO_RawMove>:
#include "functions.h"

void SERVO_RawMove(int chan, float val){
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	ed87 0a00 	vstr	s0, [r7]
	//  2000 full forward (2ms)

	//rawVal, runs at 50hz -> period of 20ms
	//counterPeriod = 1e5
	//	(x/20ms) * counterPeriod
	uint32_t rawVal = (val / (20 * 1000)) * TIM2->ARR;
 8000d88:	edd7 7a00 	vldr	s15, [r7]
 8000d8c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000de0 <SERVO_RawMove+0x64>
 8000d90:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000d94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9a:	ee07 3a90 	vmov	s15, r3
 8000d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000daa:	ee17 3a90 	vmov	r3, s15
 8000dae:	60fb      	str	r3, [r7, #12]

	switch(chan){
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d003      	beq.n	8000dbe <SERVO_RawMove+0x42>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d005      	beq.n	8000dc8 <SERVO_RawMove+0x4c>
	case 2:
		TIM2->CCR2 = rawVal;
		break;
	default:
		//Invalid servo!
		break;
 8000dbc:	e009      	b.n	8000dd2 <SERVO_RawMove+0x56>
		TIM2->CCR1 = rawVal;
 8000dbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8000dc6:	e004      	b.n	8000dd2 <SERVO_RawMove+0x56>
		TIM2->CCR2 = rawVal;
 8000dc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000dd0:	bf00      	nop
	}
}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	469c4000 	.word	0x469c4000

08000de4 <autonomous_Mode>:

void autonomous_Mode(uint16_t thrusterRight, uint16_t thrusterLeft, int powerR, int powerL) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60ba      	str	r2, [r7, #8]
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	4603      	mov	r3, r0
 8000df0:	81fb      	strh	r3, [r7, #14]
 8000df2:	460b      	mov	r3, r1
 8000df4:	81bb      	strh	r3, [r7, #12]
    SERVO_RawMove(thrusterRight,powerR);
 8000df6:	89fb      	ldrh	r3, [r7, #14]
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	ee07 2a90 	vmov	s15, r2
 8000dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e02:	eeb0 0a67 	vmov.f32	s0, s15
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ffb8 	bl	8000d7c <SERVO_RawMove>
    SERVO_RawMove(thrusterLeft,powerL);
 8000e0c:	89bb      	ldrh	r3, [r7, #12]
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	ee07 2a90 	vmov	s15, r2
 8000e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e18:	eeb0 0a67 	vmov.f32	s0, s15
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ffad 	bl	8000d7c <SERVO_RawMove>
}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max){
 8000e2a:	b480      	push	{r7}
 8000e2c:	b087      	sub	sp, #28
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	ed87 0a05 	vstr	s0, [r7, #20]
 8000e34:	edc7 0a04 	vstr	s1, [r7, #16]
 8000e38:	ed87 1a03 	vstr	s2, [r7, #12]
 8000e3c:	edc7 1a02 	vstr	s3, [r7, #8]
 8000e40:	ed87 2a01 	vstr	s4, [r7, #4]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000e44:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e48:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e50:	edd7 6a01 	vldr	s13, [r7, #4]
 8000e54:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e58:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e5c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000e60:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e64:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e70:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e74:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000e78:	eeb0 0a67 	vmov.f32	s0, s15
 8000e7c:	371c      	adds	r7, #28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <RGB_color>:

void RGB_color(bool red_light_value, bool green_light_value, bool blue_light_value){
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	71fb      	strb	r3, [r7, #7]
 8000e90:	460b      	mov	r3, r1
 8000e92:	71bb      	strb	r3, [r7, #6]
 8000e94:	4613      	mov	r3, r2
 8000e96:	717b      	strb	r3, [r7, #5]
    HAL_GPIO_WritePin(GPIOA, red_light_pin, red_light_value ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000e98:	230e      	movs	r3, #14
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	79fa      	ldrb	r2, [r7, #7]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea4:	f003 fbca 	bl	800463c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, green_light_pin, green_light_value ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ea8:	230d      	movs	r3, #13
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	79ba      	ldrb	r2, [r7, #6]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb4:	f003 fbc2 	bl	800463c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, blue_light_pin, blue_light_value ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000eb8:	230c      	movs	r3, #12
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	797a      	ldrb	r2, [r7, #5]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec4:	f003 fbba 	bl	800463c <HAL_GPIO_WritePin>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <power_Difference>:

void power_Difference(float channel4, float channel2, float channel5,
                      uint16_t thrusterRight, uint16_t thrusterLeft){
 8000ed0:	b5b0      	push	{r4, r5, r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000eda:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ede:	ed87 1a01 	vstr	s2, [r7, #4]
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	460a      	mov	r2, r1
 8000ee6:	807b      	strh	r3, [r7, #2]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	803b      	strh	r3, [r7, #0]
    float Tx;
    float Tz;
    float Tport;
    float Tstbd;

    if ((channel4 > 1450 && channel4 < 1550) && (channel2 > 1450 && channel2 < 1550)){     //Control stable
 8000eec:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ef0:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8001138 <power_Difference+0x268>
 8000ef4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000efc:	dd2b      	ble.n	8000f56 <power_Difference+0x86>
 8000efe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f02:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 800113c <power_Difference+0x26c>
 8000f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0e:	d522      	bpl.n	8000f56 <power_Difference+0x86>
 8000f10:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f14:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001138 <power_Difference+0x268>
 8000f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f20:	dd19      	ble.n	8000f56 <power_Difference+0x86>
 8000f22:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f26:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800113c <power_Difference+0x26c>
 8000f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f32:	d510      	bpl.n	8000f56 <power_Difference+0x86>
        R=1500;
 8000f34:	4b82      	ldr	r3, [pc, #520]	; (8001140 <power_Difference+0x270>)
 8000f36:	61fb      	str	r3, [r7, #28]
        L=1500;
 8000f38:	4b81      	ldr	r3, [pc, #516]	; (8001140 <power_Difference+0x270>)
 8000f3a:	61bb      	str	r3, [r7, #24]
        SERVO_RawMove(thrusterRight,R);
 8000f3c:	887b      	ldrh	r3, [r7, #2]
 8000f3e:	ed97 0a07 	vldr	s0, [r7, #28]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff1a 	bl	8000d7c <SERVO_RawMove>
        SERVO_RawMove(thrusterLeft,L);      //thrusters at zero
 8000f48:	883b      	ldrh	r3, [r7, #0]
 8000f4a:	ed97 0a06 	vldr	s0, [r7, #24]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff ff14 	bl	8000d7c <SERVO_RawMove>
        R = ((Tstbd / 35 * 400)+1500);
        L = ((Tport / 35 * 400)+1500);
        SERVO_RawMove(thrusterRight,R);
        SERVO_RawMove(thrusterLeft,L);
    }
}
 8000f54:	e0de      	b.n	8001114 <power_Difference+0x244>
    else if ((channel4 < 1450 || channel4 > 1550) || (channel2 < 1450 || channel2 > 1550)) {    //Control for moving
 8000f56:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f5a:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8001138 <power_Difference+0x268>
 8000f5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f66:	d41b      	bmi.n	8000fa0 <power_Difference+0xd0>
 8000f68:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f6c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800113c <power_Difference+0x26c>
 8000f70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f78:	dc12      	bgt.n	8000fa0 <power_Difference+0xd0>
 8000f7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f7e:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001138 <power_Difference+0x268>
 8000f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8a:	d409      	bmi.n	8000fa0 <power_Difference+0xd0>
 8000f8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f90:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800113c <power_Difference+0x26c>
 8000f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9c:	dc00      	bgt.n	8000fa0 <power_Difference+0xd0>
}
 8000f9e:	e0b9      	b.n	8001114 <power_Difference+0x244>
        Tx = map(channel2, 975, 2025, -70, 70);
 8000fa0:	ed9f 2a68 	vldr	s4, [pc, #416]	; 8001144 <power_Difference+0x274>
 8000fa4:	eddf 1a68 	vldr	s3, [pc, #416]	; 8001148 <power_Difference+0x278>
 8000fa8:	ed9f 1a68 	vldr	s2, [pc, #416]	; 800114c <power_Difference+0x27c>
 8000fac:	eddf 0a68 	vldr	s1, [pc, #416]	; 8001150 <power_Difference+0x280>
 8000fb0:	ed97 0a02 	vldr	s0, [r7, #8]
 8000fb4:	f7ff ff39 	bl	8000e2a <map>
 8000fb8:	ed87 0a05 	vstr	s0, [r7, #20]
        Tz = map(channel4, 975, 2025, -5, 5);
 8000fbc:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 8000fc0:	eef9 1a04 	vmov.f32	s3, #148	; 0xc0a00000 -5.0
 8000fc4:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800114c <power_Difference+0x27c>
 8000fc8:	eddf 0a61 	vldr	s1, [pc, #388]	; 8001150 <power_Difference+0x280>
 8000fcc:	ed97 0a03 	vldr	s0, [r7, #12]
 8000fd0:	f7ff ff2b 	bl	8000e2a <map>
 8000fd4:	ed87 0a04 	vstr	s0, [r7, #16]
        Tstbd = (Tx / 2) - (Tz / 0.41);
 8000fd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fdc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000fe0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fe4:	ee16 0a90 	vmov	r0, s13
 8000fe8:	f7ff fa86 	bl	80004f8 <__aeabi_f2d>
 8000fec:	4604      	mov	r4, r0
 8000fee:	460d      	mov	r5, r1
 8000ff0:	6938      	ldr	r0, [r7, #16]
 8000ff2:	f7ff fa81 	bl	80004f8 <__aeabi_f2d>
 8000ff6:	a34a      	add	r3, pc, #296	; (adr r3, 8001120 <power_Difference+0x250>)
 8000ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffc:	f7ff fbfe 	bl	80007fc <__aeabi_ddiv>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4620      	mov	r0, r4
 8001006:	4629      	mov	r1, r5
 8001008:	f7ff f916 	bl	8000238 <__aeabi_dsub>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	f7ff fcda 	bl	80009cc <__aeabi_d2f>
 8001018:	4603      	mov	r3, r0
 800101a:	623b      	str	r3, [r7, #32]
        if (Tstbd > 35){
 800101c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001020:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001154 <power_Difference+0x284>
 8001024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	dd02      	ble.n	8001034 <power_Difference+0x164>
            Tstbd = 35;
 800102e:	4b4a      	ldr	r3, [pc, #296]	; (8001158 <power_Difference+0x288>)
 8001030:	623b      	str	r3, [r7, #32]
 8001032:	e00a      	b.n	800104a <power_Difference+0x17a>
        else if (Tstbd < -35){
 8001034:	edd7 7a08 	vldr	s15, [r7, #32]
 8001038:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800115c <power_Difference+0x28c>
 800103c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001044:	d501      	bpl.n	800104a <power_Difference+0x17a>
            Tstbd = -35;
 8001046:	4b46      	ldr	r3, [pc, #280]	; (8001160 <power_Difference+0x290>)
 8001048:	623b      	str	r3, [r7, #32]
        Tport = (Tx / (2 * 1.27)) + (Tz / (0.41 * 1.27));
 800104a:	6978      	ldr	r0, [r7, #20]
 800104c:	f7ff fa54 	bl	80004f8 <__aeabi_f2d>
 8001050:	a335      	add	r3, pc, #212	; (adr r3, 8001128 <power_Difference+0x258>)
 8001052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001056:	f7ff fbd1 	bl	80007fc <__aeabi_ddiv>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4614      	mov	r4, r2
 8001060:	461d      	mov	r5, r3
 8001062:	6938      	ldr	r0, [r7, #16]
 8001064:	f7ff fa48 	bl	80004f8 <__aeabi_f2d>
 8001068:	a331      	add	r3, pc, #196	; (adr r3, 8001130 <power_Difference+0x260>)
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	f7ff fbc5 	bl	80007fc <__aeabi_ddiv>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4620      	mov	r0, r4
 8001078:	4629      	mov	r1, r5
 800107a:	f7ff f8df 	bl	800023c <__adddf3>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	f7ff fca1 	bl	80009cc <__aeabi_d2f>
 800108a:	4603      	mov	r3, r0
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
        if (Tport > 27){
 800108e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001092:	eeb3 7a0b 	vmov.f32	s14, #59	; 0x41d80000  27.0
 8001096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800109a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109e:	dd02      	ble.n	80010a6 <power_Difference+0x1d6>
            Tport = 27;
 80010a0:	4b30      	ldr	r3, [pc, #192]	; (8001164 <power_Difference+0x294>)
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
 80010a4:	e00a      	b.n	80010bc <power_Difference+0x1ec>
        else if (Tstbd < -27){
 80010a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80010aa:	eebb 7a0b 	vmov.f32	s14, #187	; 0xc1d80000 -27.0
 80010ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b6:	d501      	bpl.n	80010bc <power_Difference+0x1ec>
            Tstbd = -27;
 80010b8:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <power_Difference+0x298>)
 80010ba:	623b      	str	r3, [r7, #32]
        R = ((Tstbd / 35 * 400)+1500);
 80010bc:	ed97 7a08 	vldr	s14, [r7, #32]
 80010c0:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001154 <power_Difference+0x284>
 80010c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800116c <power_Difference+0x29c>
 80010cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001170 <power_Difference+0x2a0>
 80010d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010d8:	edc7 7a07 	vstr	s15, [r7, #28]
        L = ((Tport / 35 * 400)+1500);
 80010dc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010e0:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001154 <power_Difference+0x284>
 80010e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800116c <power_Difference+0x29c>
 80010ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001170 <power_Difference+0x2a0>
 80010f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010f8:	edc7 7a06 	vstr	s15, [r7, #24]
        SERVO_RawMove(thrusterRight,R);
 80010fc:	887b      	ldrh	r3, [r7, #2]
 80010fe:	ed97 0a07 	vldr	s0, [r7, #28]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fe3a 	bl	8000d7c <SERVO_RawMove>
        SERVO_RawMove(thrusterLeft,L);
 8001108:	883b      	ldrh	r3, [r7, #0]
 800110a:	ed97 0a06 	vldr	s0, [r7, #24]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fe34 	bl	8000d7c <SERVO_RawMove>
}
 8001114:	bf00      	nop
 8001116:	3728      	adds	r7, #40	; 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bdb0      	pop	{r4, r5, r7, pc}
 800111c:	f3af 8000 	nop.w
 8001120:	a3d70a3d 	.word	0xa3d70a3d
 8001124:	3fda3d70 	.word	0x3fda3d70
 8001128:	851eb852 	.word	0x851eb852
 800112c:	400451eb 	.word	0x400451eb
 8001130:	0be0ded2 	.word	0x0be0ded2
 8001134:	3fe0a993 	.word	0x3fe0a993
 8001138:	44b54000 	.word	0x44b54000
 800113c:	44c1c000 	.word	0x44c1c000
 8001140:	44bb8000 	.word	0x44bb8000
 8001144:	428c0000 	.word	0x428c0000
 8001148:	c28c0000 	.word	0xc28c0000
 800114c:	44fd2000 	.word	0x44fd2000
 8001150:	4473c000 	.word	0x4473c000
 8001154:	420c0000 	.word	0x420c0000
 8001158:	420c0000 	.word	0x420c0000
 800115c:	c20c0000 	.word	0xc20c0000
 8001160:	c20c0000 	.word	0xc20c0000
 8001164:	41d80000 	.word	0x41d80000
 8001168:	c1d80000 	.word	0xc1d80000
 800116c:	43c80000 	.word	0x43c80000
 8001170:	44bb8000 	.word	0x44bb8000

08001174 <select>:

void select(float channel4, float channel2, float channel5,
            uint16_t thrusterRight, uint16_t thrusterLeft,
            int powerR, int powerL) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	ed87 0a05 	vstr	s0, [r7, #20]
 800117e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001182:	ed87 1a03 	vstr	s2, [r7, #12]
 8001186:	607a      	str	r2, [r7, #4]
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	4603      	mov	r3, r0
 800118c:	817b      	strh	r3, [r7, #10]
 800118e:	460b      	mov	r3, r1
 8001190:	813b      	strh	r3, [r7, #8]
    //Use channel 5 to select current mode
    if (channel5 < 1300) {
 8001192:	edd7 7a03 	vldr	s15, [r7, #12]
 8001196:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001230 <select+0xbc>
 800119a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800119e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a2:	d511      	bpl.n	80011c8 <select+0x54>
        power_Difference(channel4, channel2, channel5, thrusterRight, thrusterLeft);
 80011a4:	893a      	ldrh	r2, [r7, #8]
 80011a6:	897b      	ldrh	r3, [r7, #10]
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	ed97 1a03 	vldr	s2, [r7, #12]
 80011b0:	edd7 0a04 	vldr	s1, [r7, #16]
 80011b4:	ed97 0a05 	vldr	s0, [r7, #20]
 80011b8:	f7ff fe8a 	bl	8000ed0 <power_Difference>
        RGB_color(true, true, false); // Yellow
 80011bc:	2200      	movs	r2, #0
 80011be:	2101      	movs	r1, #1
 80011c0:	2001      	movs	r0, #1
 80011c2:	f7ff fe60 	bl	8000e86 <RGB_color>
    else {
        SERVO_RawMove(thrusterRight,powerR);
        SERVO_RawMove(thrusterLeft,powerL);
        RGB_color(true, false, false); // Red
    }
}
 80011c6:	e02f      	b.n	8001228 <select+0xb4>
    else if ( channel5 > 1600) {
 80011c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011cc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001234 <select+0xc0>
 80011d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d8:	dd0b      	ble.n	80011f2 <select+0x7e>
        autonomous_Mode(thrusterRight,thrusterLeft,powerR,powerL);
 80011da:	8939      	ldrh	r1, [r7, #8]
 80011dc:	8978      	ldrh	r0, [r7, #10]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	f7ff fdff 	bl	8000de4 <autonomous_Mode>
        RGB_color(false, false, true); // Blue
 80011e6:	2201      	movs	r2, #1
 80011e8:	2100      	movs	r1, #0
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff fe4b 	bl	8000e86 <RGB_color>
}
 80011f0:	e01a      	b.n	8001228 <select+0xb4>
        SERVO_RawMove(thrusterRight,powerR);
 80011f2:	897b      	ldrh	r3, [r7, #10]
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	ee07 2a90 	vmov	s15, r2
 80011fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fdba 	bl	8000d7c <SERVO_RawMove>
        SERVO_RawMove(thrusterLeft,powerL);
 8001208:	893b      	ldrh	r3, [r7, #8]
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	ee07 2a90 	vmov	s15, r2
 8001210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001214:	eeb0 0a67 	vmov.f32	s0, s15
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fdaf 	bl	8000d7c <SERVO_RawMove>
        RGB_color(true, false, false); // Red
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	2001      	movs	r0, #1
 8001224:	f7ff fe2f 	bl	8000e86 <RGB_color>
}
 8001228:	bf00      	nop
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	44a28000 	.word	0x44a28000
 8001234:	44c80000 	.word	0x44c80000

08001238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123e:	f002 fcf2 	bl	8003c26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001242:	f000 f83d 	bl	80012c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001246:	f000 fa61 	bl	800170c <MX_GPIO_Init>
  MX_DMA_Init();
 800124a:	f000 fa2d 	bl	80016a8 <MX_DMA_Init>
  MX_TIM8_Init();
 800124e:	f000 f923 	bl	8001498 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8001252:	f000 f9dd 	bl	8001610 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001256:	f000 f89b 	bl	8001390 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800125a:	f000 f98d 	bl	8001578 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800125e:	f006 ff53 	bl	8008108 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of idle_task */
  idle_taskHandle = osThreadNew(idle_task_update, NULL, &idle_task_attributes);
 8001262:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <main+0x70>)
 8001264:	2100      	movs	r1, #0
 8001266:	4811      	ldr	r0, [pc, #68]	; (80012ac <main+0x74>)
 8001268:	f006 ffb8 	bl	80081dc <osThreadNew>
 800126c:	4603      	mov	r3, r0
 800126e:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <main+0x78>)
 8001270:	6013      	str	r3, [r2, #0]

  /* creation of main_task */
  main_taskHandle = osThreadNew(main_task_thread, NULL, &main_task_attributes);
 8001272:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <main+0x7c>)
 8001274:	2100      	movs	r1, #0
 8001276:	4810      	ldr	r0, [pc, #64]	; (80012b8 <main+0x80>)
 8001278:	f006 ffb0 	bl	80081dc <osThreadNew>
 800127c:	4603      	mov	r3, r0
 800127e:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <main+0x84>)
 8001280:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  configASSERT(main_taskHandle != 0);
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <main+0x84>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10a      	bne.n	80012a0 <main+0x68>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800128a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800128e:	f383 8811 	msr	BASEPRI, r3
 8001292:	f3bf 8f6f 	isb	sy
 8001296:	f3bf 8f4f 	dsb	sy
 800129a:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800129c:	bf00      	nop
 800129e:	e7fe      	b.n	800129e <main+0x66>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012a0:	f006 ff66 	bl	8008170 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <main+0x6c>
 80012a6:	bf00      	nop
 80012a8:	0800b0b8 	.word	0x0800b0b8
 80012ac:	0800178d 	.word	0x0800178d
 80012b0:	20002e00 	.word	0x20002e00
 80012b4:	0800b0dc 	.word	0x0800b0dc
 80012b8:	0800179f 	.word	0x0800179f
 80012bc:	20002f50 	.word	0x20002f50

080012c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0a4      	sub	sp, #144	; 0x90
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012ca:	2238      	movs	r2, #56	; 0x38
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f009 fcb4 	bl	800ac3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e4:	463b      	mov	r3, r7
 80012e6:	2244      	movs	r2, #68	; 0x44
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f009 fca6 	bl	800ac3c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012f4:	f003 f9ba 	bl	800466c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f8:	2302      	movs	r3, #2
 80012fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001300:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001302:	2340      	movs	r3, #64	; 0x40
 8001304:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001306:	2302      	movs	r3, #2
 8001308:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800130a:	2302      	movs	r3, #2
 800130c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800130e:	2304      	movs	r3, #4
 8001310:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001312:	234b      	movs	r3, #75	; 0x4b
 8001314:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001318:	2302      	movs	r3, #2
 800131a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800131e:	2302      	movs	r3, #2
 8001320:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001324:	2302      	movs	r3, #2
 8001326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800132e:	4618      	mov	r0, r3
 8001330:	f003 fa50 	bl	80047d4 <HAL_RCC_OscConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800133a:	f000 fa4d 	bl	80017d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133e:	230f      	movs	r3, #15
 8001340:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001342:	2303      	movs	r3, #3
 8001344:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001352:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001356:	2104      	movs	r1, #4
 8001358:	4618      	mov	r0, r3
 800135a:	f003 fd53 	bl	8004e04 <HAL_RCC_ClockConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001364:	f000 fa38 	bl	80017d8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8001368:	2303      	movs	r3, #3
 800136a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800136c:	2300      	movs	r3, #0
 800136e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001374:	463b      	mov	r3, r7
 8001376:	4618      	mov	r0, r3
 8001378:	f003 ff92 	bl	80052a0 <HAL_RCCEx_PeriphCLKConfig>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001382:	f000 fa29 	bl	80017d8 <Error_Handler>
  }
}
 8001386:	bf00      	nop
 8001388:	3790      	adds	r7, #144	; 0x90
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08e      	sub	sp, #56	; 0x38
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013c2:	4b33      	ldr	r3, [pc, #204]	; (8001490 <MX_TIM2_Init+0x100>)
 80013c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80013ca:	4b31      	ldr	r3, [pc, #196]	; (8001490 <MX_TIM2_Init+0x100>)
 80013cc:	221f      	movs	r2, #31
 80013ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d0:	4b2f      	ldr	r3, [pc, #188]	; (8001490 <MX_TIM2_Init+0x100>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 80013d6:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <MX_TIM2_Init+0x100>)
 80013d8:	4a2e      	ldr	r2, [pc, #184]	; (8001494 <MX_TIM2_Init+0x104>)
 80013da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013dc:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <MX_TIM2_Init+0x100>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013e2:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <MX_TIM2_Init+0x100>)
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013e8:	4829      	ldr	r0, [pc, #164]	; (8001490 <MX_TIM2_Init+0x100>)
 80013ea:	f004 f949 	bl	8005680 <HAL_TIM_Base_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013f4:	f000 f9f0 	bl	80017d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001402:	4619      	mov	r1, r3
 8001404:	4822      	ldr	r0, [pc, #136]	; (8001490 <MX_TIM2_Init+0x100>)
 8001406:	f004 fed9 	bl	80061bc <HAL_TIM_ConfigClockSource>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001410:	f000 f9e2 	bl	80017d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001414:	481e      	ldr	r0, [pc, #120]	; (8001490 <MX_TIM2_Init+0x100>)
 8001416:	f004 f9f5 	bl	8005804 <HAL_TIM_PWM_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001420:	f000 f9da 	bl	80017d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4619      	mov	r1, r3
 8001432:	4817      	ldr	r0, [pc, #92]	; (8001490 <MX_TIM2_Init+0x100>)
 8001434:	f005 fd46 	bl	8006ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800143e:	f000 f9cb 	bl	80017d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001442:	2360      	movs	r3, #96	; 0x60
 8001444:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	4619      	mov	r1, r3
 8001458:	480d      	ldr	r0, [pc, #52]	; (8001490 <MX_TIM2_Init+0x100>)
 800145a:	f004 fd9f 	bl	8005f9c <HAL_TIM_PWM_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001464:	f000 f9b8 	bl	80017d8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800146c:	463b      	mov	r3, r7
 800146e:	2204      	movs	r2, #4
 8001470:	4619      	mov	r1, r3
 8001472:	4807      	ldr	r0, [pc, #28]	; (8001490 <MX_TIM2_Init+0x100>)
 8001474:	f004 fd92 	bl	8005f9c <HAL_TIM_PWM_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800147e:	f000 f9ab 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001482:	4803      	ldr	r0, [pc, #12]	; (8001490 <MX_TIM2_Init+0x100>)
 8001484:	f002 f98e 	bl	80037a4 <HAL_TIM_MspPostInit>

}
 8001488:	bf00      	nop
 800148a:	3738      	adds	r7, #56	; 0x38
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20002f54 	.word	0x20002f54
 8001494:	000186a0 	.word	0x000186a0

08001498 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b094      	sub	sp, #80	; 0x50
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014b8:	463b      	mov	r3, r7
 80014ba:	2234      	movs	r2, #52	; 0x34
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f009 fbbc 	bl	800ac3c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014c4:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <MX_TIM8_Init+0xd8>)
 80014c6:	4a2b      	ldr	r2, [pc, #172]	; (8001574 <MX_TIM8_Init+0xdc>)
 80014c8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80014ca:	4b29      	ldr	r3, [pc, #164]	; (8001570 <MX_TIM8_Init+0xd8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <MX_TIM8_Init+0xd8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <MX_TIM8_Init+0xd8>)
 80014d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014dc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <MX_TIM8_Init+0xd8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <MX_TIM8_Init+0xd8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <MX_TIM8_Init+0xd8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80014f0:	481f      	ldr	r0, [pc, #124]	; (8001570 <MX_TIM8_Init+0xd8>)
 80014f2:	f004 fae9 	bl	8005ac8 <HAL_TIM_IC_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 80014fc:	f000 f96c 	bl	80017d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	647b      	str	r3, [r7, #68]	; 0x44
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800150c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001510:	4619      	mov	r1, r3
 8001512:	4817      	ldr	r0, [pc, #92]	; (8001570 <MX_TIM8_Init+0xd8>)
 8001514:	f005 fcd6 	bl	8006ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800151e:	f000 f95b 	bl	80017d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001522:	2300      	movs	r3, #0
 8001524:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001526:	2301      	movs	r3, #1
 8001528:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigIC.ICFilter = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001532:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001536:	2204      	movs	r2, #4
 8001538:	4619      	mov	r1, r3
 800153a:	480d      	ldr	r0, [pc, #52]	; (8001570 <MX_TIM8_Init+0xd8>)
 800153c:	f004 fc9a 	bl	8005e74 <HAL_TIM_IC_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM8_Init+0xb2>
  {
    Error_Handler();
 8001546:	f000 f947 	bl	80017d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001552:	463b      	mov	r3, r7
 8001554:	4619      	mov	r1, r3
 8001556:	4806      	ldr	r0, [pc, #24]	; (8001570 <MX_TIM8_Init+0xd8>)
 8001558:	f005 fd36 	bl	8006fc8 <HAL_TIMEx_ConfigBreakDeadTime>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM8_Init+0xce>
  {
    Error_Handler();
 8001562:	f000 f939 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	3750      	adds	r7, #80	; 0x50
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20002db4 	.word	0x20002db4
 8001574:	40013400 	.word	0x40013400

08001578 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <MX_USART1_UART_Init+0x90>)
 800157e:	4a23      	ldr	r2, [pc, #140]	; (800160c <MX_USART1_UART_Init+0x94>)
 8001580:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <MX_USART1_UART_Init+0x90>)
 8001584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001588:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <MX_USART1_UART_Init+0x90>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <MX_USART1_UART_Init+0x90>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <MX_USART1_UART_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <MX_USART1_UART_Init+0x90>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <MX_USART1_UART_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <MX_USART1_UART_Init+0x90>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <MX_USART1_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_USART1_UART_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <MX_USART1_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015c0:	4811      	ldr	r0, [pc, #68]	; (8001608 <MX_USART1_UART_Init+0x90>)
 80015c2:	f005 fde7 	bl	8007194 <HAL_UART_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015cc:	f000 f904 	bl	80017d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d0:	2100      	movs	r1, #0
 80015d2:	480d      	ldr	r0, [pc, #52]	; (8001608 <MX_USART1_UART_Init+0x90>)
 80015d4:	f006 fcab 	bl	8007f2e <HAL_UARTEx_SetTxFifoThreshold>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015de:	f000 f8fb 	bl	80017d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e2:	2100      	movs	r1, #0
 80015e4:	4808      	ldr	r0, [pc, #32]	; (8001608 <MX_USART1_UART_Init+0x90>)
 80015e6:	f006 fce0 	bl	8007faa <HAL_UARTEx_SetRxFifoThreshold>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015f0:	f000 f8f2 	bl	80017d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015f4:	4804      	ldr	r0, [pc, #16]	; (8001608 <MX_USART1_UART_Init+0x90>)
 80015f6:	f006 fc61 	bl	8007ebc <HAL_UARTEx_DisableFifoMode>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001600:	f000 f8ea 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20002ec4 	.word	0x20002ec4
 800160c:	40013800 	.word	0x40013800

08001610 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001614:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <MX_USART2_UART_Init+0x90>)
 8001616:	4a23      	ldr	r2, [pc, #140]	; (80016a4 <MX_USART2_UART_Init+0x94>)
 8001618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800161a:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <MX_USART2_UART_Init+0x90>)
 800161c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001622:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <MX_USART2_UART_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <MX_USART2_UART_Init+0x90>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <MX_USART2_UART_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <MX_USART2_UART_Init+0x90>)
 8001636:	220c      	movs	r2, #12
 8001638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <MX_USART2_UART_Init+0x90>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <MX_USART2_UART_Init+0x90>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <MX_USART2_UART_Init+0x90>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <MX_USART2_UART_Init+0x90>)
 800164e:	2200      	movs	r2, #0
 8001650:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MX_USART2_UART_Init+0x90>)
 8001654:	2200      	movs	r2, #0
 8001656:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001658:	4811      	ldr	r0, [pc, #68]	; (80016a0 <MX_USART2_UART_Init+0x90>)
 800165a:	f005 fd9b 	bl	8007194 <HAL_UART_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001664:	f000 f8b8 	bl	80017d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001668:	2100      	movs	r1, #0
 800166a:	480d      	ldr	r0, [pc, #52]	; (80016a0 <MX_USART2_UART_Init+0x90>)
 800166c:	f006 fc5f 	bl	8007f2e <HAL_UARTEx_SetTxFifoThreshold>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001676:	f000 f8af 	bl	80017d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800167a:	2100      	movs	r1, #0
 800167c:	4808      	ldr	r0, [pc, #32]	; (80016a0 <MX_USART2_UART_Init+0x90>)
 800167e:	f006 fc94 	bl	8007faa <HAL_UARTEx_SetRxFifoThreshold>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001688:	f000 f8a6 	bl	80017d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800168c:	4804      	ldr	r0, [pc, #16]	; (80016a0 <MX_USART2_UART_Init+0x90>)
 800168e:	f006 fc15 	bl	8007ebc <HAL_UARTEx_DisableFifoMode>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001698:	f000 f89e 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20002fa0 	.word	0x20002fa0
 80016a4:	40004400 	.word	0x40004400

080016a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <MX_DMA_Init+0x60>)
 80016b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b2:	4a15      	ldr	r2, [pc, #84]	; (8001708 <MX_DMA_Init+0x60>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	6493      	str	r3, [r2, #72]	; 0x48
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <MX_DMA_Init+0x60>)
 80016bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <MX_DMA_Init+0x60>)
 80016c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ca:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <MX_DMA_Init+0x60>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6493      	str	r3, [r2, #72]	; 0x48
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <MX_DMA_Init+0x60>)
 80016d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2105      	movs	r1, #5
 80016e2:	200b      	movs	r0, #11
 80016e4:	f002 fb8e 	bl	8003e04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016e8:	200b      	movs	r0, #11
 80016ea:	f002 fba5 	bl	8003e38 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2105      	movs	r1, #5
 80016f2:	200c      	movs	r0, #12
 80016f4:	f002 fb86 	bl	8003e04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016f8:	200c      	movs	r0, #12
 80016fa:	f002 fb9d 	bl	8003e38 <HAL_NVIC_EnableIRQ>

}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000

0800170c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	f107 030c 	add.w	r3, r7, #12
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	4b19      	ldr	r3, [pc, #100]	; (8001788 <MX_GPIO_Init+0x7c>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	4a18      	ldr	r2, [pc, #96]	; (8001788 <MX_GPIO_Init+0x7c>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <MX_GPIO_Init+0x7c>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	4b13      	ldr	r3, [pc, #76]	; (8001788 <MX_GPIO_Init+0x7c>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <MX_GPIO_Init+0x7c>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <MX_GPIO_Init+0x7c>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|green_light_pin_Pin|blue_light_pin_Pin, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8001758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175c:	f002 ff6e 	bl	800463c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA9 green_light_pin_Pin blue_light_pin_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|green_light_pin_Pin|blue_light_pin_Pin;
 8001760:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001766:	2301      	movs	r3, #1
 8001768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	4619      	mov	r1, r3
 8001778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177c:	f002 fddc 	bl	8004338 <HAL_GPIO_Init>

}
 8001780:	bf00      	nop
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40021000 	.word	0x40021000

0800178c <idle_task_update>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_idle_task_update */
void idle_task_update(void *argument)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8001794:	f242 7010 	movw	r0, #10000	; 0x2710
 8001798:	f006 fdc6 	bl	8008328 <osDelay>
 800179c:	e7fa      	b.n	8001794 <idle_task_update+0x8>

0800179e <main_task_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_main_task_thread */
void main_task_thread(void *argument)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN main_task_thread */
  main_task_update(argument);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f001 f952 	bl	8002a50 <main_task_update>
  /* USER CODE END main_task_thread */
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d101      	bne.n	80017ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017c6:	f002 fa47 	bl	8003c58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40014800 	.word	0x40014800

080017d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017dc:	b672      	cpsid	i
}
 80017de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <Error_Handler+0x8>

080017e2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	4a04      	ldr	r2, [pc, #16]	; (8001820 <_ZN3ros3MsgC1Ev+0x1c>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	0800b20c 	.word	0x0800b20c

08001824 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
      data()
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ffe8 	bl	8001804 <_ZN3ros3MsgC1Ev>
 8001834:	4a06      	ldr	r2, [pc, #24]	; (8001850 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3304      	adds	r3, #4
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ffcf 	bl	80017e2 <_ZN3ros4TimeC1Ev>
    {
    }
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	0800b1f4 	.word	0x0800b1f4

08001854 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6859      	ldr	r1, [r3, #4]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	4413      	add	r3, r2
 800186c:	b2ca      	uxtb	r2, r1
 800186e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	0a19      	lsrs	r1, r3, #8
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3301      	adds	r3, #1
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	4413      	add	r3, r2
 800187e:	b2ca      	uxtb	r2, r1
 8001880:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	0c19      	lsrs	r1, r3, #16
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	3302      	adds	r3, #2
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	4413      	add	r3, r2
 8001890:	b2ca      	uxtb	r2, r1
 8001892:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	0e19      	lsrs	r1, r3, #24
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	3303      	adds	r3, #3
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	4413      	add	r3, r2
 80018a2:	b2ca      	uxtb	r2, r1
 80018a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3304      	adds	r3, #4
 80018aa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6899      	ldr	r1, [r3, #8]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	4413      	add	r3, r2
 80018b6:	b2ca      	uxtb	r2, r1
 80018b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	0a19      	lsrs	r1, r3, #8
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3301      	adds	r3, #1
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	b2ca      	uxtb	r2, r1
 80018ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	0c19      	lsrs	r1, r3, #16
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3302      	adds	r3, #2
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	4413      	add	r3, r2
 80018da:	b2ca      	uxtb	r2, r1
 80018dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	0e19      	lsrs	r1, r3, #24
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	3303      	adds	r3, #3
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	b2ca      	uxtb	r2, r1
 80018ee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3304      	adds	r3, #4
 80018f4:	60fb      	str	r3, [r7, #12]
      return offset;
 80018f6:	68fb      	ldr	r3, [r7, #12]
    }
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3301      	adds	r3, #1
 8001928:	6839      	ldr	r1, [r7, #0]
 800192a:	440b      	add	r3, r1
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	3302      	adds	r3, #2
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	440b      	add	r3, r1
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	041b      	lsls	r3, r3, #16
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	3303      	adds	r3, #3
 8001954:	6839      	ldr	r1, [r7, #0]
 8001956:	440b      	add	r3, r1
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	061b      	lsls	r3, r3, #24
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	3304      	adds	r3, #4
 8001966:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	4413      	add	r3, r2
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	3301      	adds	r3, #1
 800197e:	6839      	ldr	r1, [r7, #0]
 8001980:	440b      	add	r3, r1
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	021b      	lsls	r3, r3, #8
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3302      	adds	r3, #2
 8001994:	6839      	ldr	r1, [r7, #0]
 8001996:	440b      	add	r3, r1
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	041b      	lsls	r3, r3, #16
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3303      	adds	r3, #3
 80019aa:	6839      	ldr	r1, [r7, #0]
 80019ac:	440b      	add	r3, r1
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	061b      	lsls	r3, r3, #24
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3304      	adds	r3, #4
 80019bc:	60fb      	str	r3, [r7, #12]
     return offset;
 80019be:	68fb      	ldr	r3, [r7, #12]
    }
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	0800af00 	.word	0x0800af00

080019e8 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	0800af10 	.word	0x0800af10

08001a04 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fef8 	bl	8001804 <_ZN3ros3MsgC1Ev>
 8001a14:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	809a      	strh	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a06      	ldr	r2, [pc, #24]	; (8001a48 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001a30:	611a      	str	r2, [r3, #16]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
    {
    }
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	0800b1dc 	.word	0x0800b1dc
 8001a48:	0800af34 	.word	0x0800af34

08001a4c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	8899      	ldrh	r1, [r3, #4]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	b2ca      	uxtb	r2, r1
 8001a66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	889b      	ldrh	r3, [r3, #4]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	b299      	uxth	r1, r3
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	3301      	adds	r3, #1
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	b2ca      	uxtb	r2, r1
 8001a7a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	3302      	adds	r3, #2
 8001a80:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fbca 	bl	8000220 <strlen>
 8001a8c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	69b9      	ldr	r1, [r7, #24]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f001 f8a0 	bl	8002bdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	18d0      	adds	r0, r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f009 f8b6 	bl	800ac20 <memcpy>
      offset += length_topic_name;
 8001ab4:	69fa      	ldr	r2, [r7, #28]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	4413      	add	r3, r2
 8001aba:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fbad 	bl	8000220 <strlen>
 8001ac6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	6979      	ldr	r1, [r7, #20]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f001 f883 	bl	8002bdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	18d0      	adds	r0, r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f009 f899 	bl	800ac20 <memcpy>
      offset += length_message_type;
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	4413      	add	r3, r2
 8001af4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fb90 	bl	8000220 <strlen>
 8001b00:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	6939      	ldr	r1, [r7, #16]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f001 f866 	bl	8002bdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	3304      	adds	r3, #4
 8001b14:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	18d0      	adds	r0, r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4619      	mov	r1, r3
 8001b24:	f009 f87c 	bl	800ac20 <memcpy>
      offset += length_md5sum;
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001b36:	68f9      	ldr	r1, [r7, #12]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b2ca      	uxtb	r2, r1
 8001b40:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	0a19      	lsrs	r1, r3, #8
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	b2ca      	uxtb	r2, r1
 8001b50:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	0c19      	lsrs	r1, r3, #16
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3302      	adds	r3, #2
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	b2ca      	uxtb	r2, r1
 8001b60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	0e19      	lsrs	r1, r3, #24
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3303      	adds	r3, #3
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	b2ca      	uxtb	r2, r1
 8001b70:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3304      	adds	r3, #4
 8001b76:	61fb      	str	r3, [r7, #28]
      return offset;
 8001b78:	69fb      	ldr	r3, [r7, #28]
    }
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3720      	adds	r7, #32
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b08a      	sub	sp, #40	; 0x28
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	4413      	add	r3, r2
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	889b      	ldrh	r3, [r3, #4]
 8001ba2:	b21a      	sxth	r2, r3
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	6839      	ldr	r1, [r7, #0]
 8001baa:	440b      	add	r3, r1
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	441a      	add	r2, r3
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f001 f822 	bl	8002c18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	4413      	add	r3, r2
 8001be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d20c      	bcs.n	8001c04 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	441a      	add	r2, r3
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	6839      	ldr	r1, [r7, #0]
 8001bf6:	440b      	add	r3, r1
 8001bf8:	7812      	ldrb	r2, [r2, #0]
 8001bfa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	3301      	adds	r3, #1
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
 8001c02:	e7ec      	b.n	8001bde <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	4413      	add	r3, r2
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	441a      	add	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	4413      	add	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	441a      	add	r2, r3
 8001c2e:	f107 0310 	add.w	r3, r7, #16
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 ffef 	bl	8002c18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	623b      	str	r3, [r7, #32]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4413      	add	r3, r2
 8001c4a:	6a3a      	ldr	r2, [r7, #32]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d20c      	bcs.n	8001c6a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	441a      	add	r2, r3
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	6839      	ldr	r1, [r7, #0]
 8001c5c:	440b      	add	r3, r1
 8001c5e:	7812      	ldrb	r2, [r2, #0]
 8001c60:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	3301      	adds	r3, #1
 8001c66:	623b      	str	r3, [r7, #32]
 8001c68:	e7ec      	b.n	8001c44 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4413      	add	r3, r2
 8001c70:	3b01      	subs	r3, #1
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	4413      	add	r3, r2
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	441a      	add	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	441a      	add	r2, r3
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	4611      	mov	r1, r2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 ffbc 	bl	8002c18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	69fa      	ldr	r2, [r7, #28]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d20c      	bcs.n	8001cd0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	441a      	add	r2, r3
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	6839      	ldr	r1, [r7, #0]
 8001cc2:	440b      	add	r3, r1
 8001cc4:	7812      	ldrb	r2, [r2, #0]
 8001cc6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	e7ec      	b.n	8001caa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	441a      	add	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	6839      	ldr	r1, [r7, #0]
 8001cfe:	440a      	add	r2, r1
 8001d00:	7812      	ldrb	r2, [r2, #0]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	6839      	ldr	r1, [r7, #0]
 8001d0e:	440b      	add	r3, r1
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	6839      	ldr	r1, [r7, #0]
 8001d20:	440b      	add	r3, r1
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	041b      	lsls	r3, r3, #16
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	3303      	adds	r3, #3
 8001d30:	6839      	ldr	r1, [r7, #0]
 8001d32:	440b      	add	r3, r1
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	061b      	lsls	r3, r3, #24
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	3304      	adds	r3, #4
 8001d46:	61bb      	str	r3, [r7, #24]
     return offset;
 8001d48:	69bb      	ldr	r3, [r7, #24]
    }
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3728      	adds	r7, #40	; 0x28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	0800af38 	.word	0x0800af38

08001d70 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	0800af54 	.word	0x0800af54

08001d8c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fd34 	bl	8001804 <_ZN3ros3MsgC1Ev>
 8001d9c:	4a06      	ldr	r2, [pc, #24]	; (8001db8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	711a      	strb	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001dac:	609a      	str	r2, [r3, #8]
    {
    }
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	0800b1c4 	.word	0x0800b1c4
 8001dbc:	0800af34 	.word	0x0800af34

08001dc0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	7912      	ldrb	r2, [r2, #4]
 8001dd8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fa1b 	bl	8000220 <strlen>
 8001dea:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	4413      	add	r3, r2
 8001df2:	68b9      	ldr	r1, [r7, #8]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 fef1 	bl	8002bdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	18d0      	adds	r0, r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f008 ff07 	bl	800ac20 <memcpy>
      offset += length_msg;
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	4413      	add	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
      return offset;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    }
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	3301      	adds	r3, #1
 8001e42:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	441a      	add	r2, r3
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fee1 	bl	8002c18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4413      	add	r3, r2
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d20c      	bcs.n	8001e86 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	441a      	add	r2, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	6839      	ldr	r1, [r7, #0]
 8001e78:	440b      	add	r3, r1
 8001e7a:	7812      	ldrb	r2, [r2, #0]
 8001e7c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3301      	adds	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	e7ec      	b.n	8001e60 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	4413      	add	r3, r2
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	441a      	add	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
     return offset;
 8001eaa:	693b      	ldr	r3, [r7, #16]
    }
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	0800af78 	.word	0x0800af78

08001ed0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	0800af8c 	.word	0x0800af8c

08001eec <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fc84 	bl	8001804 <_ZN3ros3MsgC1Ev>
 8001efc:	4a11      	ldr	r2, [pc, #68]	; (8001f44 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	615a      	str	r2, [r3, #20]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	621a      	str	r2, [r3, #32]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	0800b1ac 	.word	0x0800b1ac

08001f48 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	; 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6859      	ldr	r1, [r3, #4]
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	b2ca      	uxtb	r2, r1
 8001f62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	0a19      	lsrs	r1, r3, #8
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	4413      	add	r3, r2
 8001f72:	b2ca      	uxtb	r2, r1
 8001f74:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	0c19      	lsrs	r1, r3, #16
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	3302      	adds	r3, #2
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	b2ca      	uxtb	r2, r1
 8001f86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	0e19      	lsrs	r1, r3, #24
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	3303      	adds	r3, #3
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	4413      	add	r3, r2
 8001f96:	b2ca      	uxtb	r2, r1
 8001f98:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	6a3a      	ldr	r2, [r7, #32]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d22b      	bcs.n	8002006 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001fbc:	6939      	ldr	r1, [r7, #16]
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	b2ca      	uxtb	r2, r1
 8001fc6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	0a19      	lsrs	r1, r3, #8
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	3301      	adds	r3, #1
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	b2ca      	uxtb	r2, r1
 8001fd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	0c19      	lsrs	r1, r3, #16
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	3302      	adds	r3, #2
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	b2ca      	uxtb	r2, r1
 8001fe6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	0e19      	lsrs	r1, r3, #24
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	3303      	adds	r3, #3
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	b2ca      	uxtb	r2, r1
 8001ff6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	3301      	adds	r3, #1
 8002002:	623b      	str	r3, [r7, #32]
 8002004:	e7ce      	b.n	8001fa4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6919      	ldr	r1, [r3, #16]
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	4413      	add	r3, r2
 8002010:	b2ca      	uxtb	r2, r1
 8002012:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	0a19      	lsrs	r1, r3, #8
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	3301      	adds	r3, #1
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	4413      	add	r3, r2
 8002022:	b2ca      	uxtb	r2, r1
 8002024:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	0c19      	lsrs	r1, r3, #16
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	3302      	adds	r3, #2
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	4413      	add	r3, r2
 8002034:	b2ca      	uxtb	r2, r1
 8002036:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	0e19      	lsrs	r1, r3, #24
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	3303      	adds	r3, #3
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	4413      	add	r3, r2
 8002046:	b2ca      	uxtb	r2, r1
 8002048:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	3304      	adds	r3, #4
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	429a      	cmp	r2, r3
 800205c:	d22b      	bcs.n	80020b6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699a      	ldr	r2, [r3, #24]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800206c:	68f9      	ldr	r1, [r7, #12]
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	4413      	add	r3, r2
 8002074:	b2ca      	uxtb	r2, r1
 8002076:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	0a19      	lsrs	r1, r3, #8
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	3301      	adds	r3, #1
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	4413      	add	r3, r2
 8002084:	b2ca      	uxtb	r2, r1
 8002086:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	0c19      	lsrs	r1, r3, #16
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	3302      	adds	r3, #2
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	4413      	add	r3, r2
 8002094:	b2ca      	uxtb	r2, r1
 8002096:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	0e19      	lsrs	r1, r3, #24
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	3303      	adds	r3, #3
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	b2ca      	uxtb	r2, r1
 80020a6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	3304      	adds	r3, #4
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3301      	adds	r3, #1
 80020b2:	61fb      	str	r3, [r7, #28]
 80020b4:	e7ce      	b.n	8002054 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69d9      	ldr	r1, [r3, #28]
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	b2ca      	uxtb	r2, r1
 80020c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	0a19      	lsrs	r1, r3, #8
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	3301      	adds	r3, #1
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	4413      	add	r3, r2
 80020d2:	b2ca      	uxtb	r2, r1
 80020d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	0c19      	lsrs	r1, r3, #16
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	3302      	adds	r3, #2
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	b2ca      	uxtb	r2, r1
 80020e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	0e19      	lsrs	r1, r3, #24
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	3303      	adds	r3, #3
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	4413      	add	r3, r2
 80020f6:	b2ca      	uxtb	r2, r1
 80020f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	3304      	adds	r3, #4
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002100:	2300      	movs	r3, #0
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	429a      	cmp	r2, r3
 800210c:	d228      	bcs.n	8002160 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe f880 	bl	8000220 <strlen>
 8002120:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	4413      	add	r3, r2
 8002128:	6979      	ldr	r1, [r7, #20]
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fd56 	bl	8002bdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	3304      	adds	r3, #4
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	18d0      	adds	r0, r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	4619      	mov	r1, r3
 800214c:	f008 fd68 	bl	800ac20 <memcpy>
      offset += length_stringsi;
 8002150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	4413      	add	r3, r2
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	3301      	adds	r3, #1
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	e7d1      	b.n	8002104 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002162:	4618      	mov	r0, r3
 8002164:	3728      	adds	r7, #40	; 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800216a:	b580      	push	{r7, lr}
 800216c:	b08e      	sub	sp, #56	; 0x38
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	4413      	add	r3, r2
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002184:	3301      	adds	r3, #1
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	4413      	add	r3, r2
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	6a3a      	ldr	r2, [r7, #32]
 8002190:	4313      	orrs	r3, r2
 8002192:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002196:	3302      	adds	r3, #2
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	4413      	add	r3, r2
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	041b      	lsls	r3, r3, #16
 80021a0:	6a3a      	ldr	r2, [r7, #32]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80021a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a8:	3303      	adds	r3, #3
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	4413      	add	r3, r2
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	061b      	lsls	r3, r3, #24
 80021b2:	6a3a      	ldr	r2, [r7, #32]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80021b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ba:	3304      	adds	r3, #4
 80021bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	6a3a      	ldr	r2, [r7, #32]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d90a      	bls.n	80021de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4610      	mov	r0, r2
 80021d4:	f008 fd3a 	bl	800ac4c <realloc>
 80021d8:	4602      	mov	r2, r0
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a3a      	ldr	r2, [r7, #32]
 80021e2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80021e4:	2300      	movs	r3, #0
 80021e6:	633b      	str	r3, [r7, #48]	; 0x30
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d236      	bcs.n	8002260 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021fa:	6839      	ldr	r1, [r7, #0]
 80021fc:	440a      	add	r2, r1
 80021fe:	7812      	ldrb	r2, [r2, #0]
 8002200:	4313      	orrs	r3, r2
 8002202:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002208:	3301      	adds	r3, #1
 800220a:	6839      	ldr	r1, [r7, #0]
 800220c:	440b      	add	r3, r1
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	4313      	orrs	r3, r2
 8002214:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221a:	3302      	adds	r3, #2
 800221c:	6839      	ldr	r1, [r7, #0]
 800221e:	440b      	add	r3, r1
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	041b      	lsls	r3, r3, #16
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222c:	3303      	adds	r3, #3
 800222e:	6839      	ldr	r1, [r7, #0]
 8002230:	440b      	add	r3, r1
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	061b      	lsls	r3, r3, #24
 8002236:	4313      	orrs	r3, r2
 8002238:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002242:	3304      	adds	r3, #4
 8002244:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	3208      	adds	r2, #8
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225a:	3301      	adds	r3, #1
 800225c:	633b      	str	r3, [r7, #48]	; 0x30
 800225e:	e7c3      	b.n	80021e8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	4413      	add	r3, r2
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800226a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226c:	3301      	adds	r3, #1
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	4413      	add	r3, r2
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	4313      	orrs	r3, r2
 800227a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800227c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800227e:	3302      	adds	r3, #2
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	4413      	add	r3, r2
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	041b      	lsls	r3, r3, #16
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	4313      	orrs	r3, r2
 800228c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800228e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002290:	3303      	adds	r3, #3
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	4413      	add	r3, r2
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	061b      	lsls	r3, r3, #24
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	4313      	orrs	r3, r2
 800229e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80022a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a2:	3304      	adds	r3, #4
 80022a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	69fa      	ldr	r2, [r7, #28]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d90a      	bls.n	80022c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699a      	ldr	r2, [r3, #24]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4619      	mov	r1, r3
 80022ba:	4610      	mov	r0, r2
 80022bc:	f008 fcc6 	bl	800ac4c <realloc>
 80022c0:	4602      	mov	r2, r0
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80022cc:	2300      	movs	r3, #0
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d236      	bcs.n	8002348 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022e2:	6839      	ldr	r1, [r7, #0]
 80022e4:	440a      	add	r2, r1
 80022e6:	7812      	ldrb	r2, [r2, #0]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f0:	3301      	adds	r3, #1
 80022f2:	6839      	ldr	r1, [r7, #0]
 80022f4:	440b      	add	r3, r1
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	4313      	orrs	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002302:	3302      	adds	r3, #2
 8002304:	6839      	ldr	r1, [r7, #0]
 8002306:	440b      	add	r3, r1
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	041b      	lsls	r3, r3, #16
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002314:	3303      	adds	r3, #3
 8002316:	6839      	ldr	r1, [r7, #0]
 8002318:	440b      	add	r3, r1
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	061b      	lsls	r3, r3, #24
 800231e:	4313      	orrs	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232a:	3304      	adds	r3, #4
 800232c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	3214      	adds	r2, #20
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002342:	3301      	adds	r3, #1
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002346:	e7c3      	b.n	80022d0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	4413      	add	r3, r2
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002354:	3301      	adds	r3, #1
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	4413      	add	r3, r2
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002366:	3302      	adds	r3, #2
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	4413      	add	r3, r2
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	041b      	lsls	r3, r3, #16
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002378:	3303      	adds	r3, #3
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	4413      	add	r3, r2
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	061b      	lsls	r3, r3, #24
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238a:	3304      	adds	r3, #4
 800238c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	429a      	cmp	r2, r3
 8002396:	d90a      	bls.n	80023ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4619      	mov	r1, r3
 80023a2:	4610      	mov	r0, r2
 80023a4:	f008 fc52 	bl	800ac4c <realloc>
 80023a8:	4602      	mov	r2, r0
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80023b4:	2300      	movs	r3, #0
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023be:	429a      	cmp	r2, r3
 80023c0:	d23f      	bcs.n	8002442 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80023c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	441a      	add	r2, r3
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	4611      	mov	r1, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 fc22 	bl	8002c18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80023d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d6:	3304      	adds	r3, #4
 80023d8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80023da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
 80023de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4413      	add	r3, r2
 80023e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d20c      	bcs.n	8002404 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	441a      	add	r2, r3
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	3b01      	subs	r3, #1
 80023f4:	6839      	ldr	r1, [r7, #0]
 80023f6:	440b      	add	r3, r1
 80023f8:	7812      	ldrb	r2, [r2, #0]
 80023fa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	3301      	adds	r3, #1
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
 8002402:	e7ec      	b.n	80023de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002404:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4413      	add	r3, r2
 800240a:	3b01      	subs	r3, #1
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	4413      	add	r3, r2
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002416:	3b01      	subs	r3, #1
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	441a      	add	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002420:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4413      	add	r3, r2
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	3220      	adds	r2, #32
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243c:	3301      	adds	r3, #1
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002440:	e7ba      	b.n	80023b8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002444:	4618      	mov	r0, r3
 8002446:	3738      	adds	r7, #56	; 0x38
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	0800b100 	.word	0x0800b100

08002468 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	0800afb0 	.word	0x0800afb0

08002484 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	611a      	str	r2, [r3, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68d8      	ldr	r0, [r3, #12]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6891      	ldr	r1, [r2, #8]
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	4798      	blx	r3
 80024d0:	4603      	mov	r3, r0
  };
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
  }
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a0a      	ldr	r2, [pc, #40]	; (800254c <_ZN13STM32HardwareC1Ev+0x34>)
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	20002ec4 	.word	0x20002ec4

08002550 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }

    void init(){
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f804 	bl	8002566 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3304      	adds	r3, #4
 8002576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800257a:	4619      	mov	r1, r3
 800257c:	f004 feda 	bl	8007334 <HAL_UART_Receive_DMA>
    }
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002588:	b590      	push	{r4, r7, lr}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002594:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff ffa8 	bl	80024f2 <_ZN13STM32Hardware10getRdmaIndEv>
 80025a2:	4603      	mov	r3, r0
 80025a4:	429c      	cmp	r4, r3
 80025a6:	bf14      	ite	ne
 80025a8:	2301      	movne	r3, #1
 80025aa:	2300      	moveq	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d012      	beq.n	80025d8 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80025b8:	1c59      	adds	r1, r3, #1
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	4413      	add	r3, r2
 80025c4:	791b      	ldrb	r3, [r3, #4]
 80025c6:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80025ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80025d8:	68fb      	ldr	r3, [r7, #12]
    }
 80025da:	4618      	mov	r0, r3
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd90      	pop	{r4, r7, pc}
	...

080025e4 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d108      	bne.n	800260a <_ZN13STM32Hardware5flushEv+0x26>
 80025f8:	4b27      	ldr	r3, [pc, #156]	; (8002698 <_ZN13STM32Hardware5flushEv+0xb4>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	f083 0301 	eor.w	r3, r3, #1
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <_ZN13STM32Hardware5flushEv+0x26>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <_ZN13STM32Hardware5flushEv+0x28>
 800260a:	2300      	movs	r3, #0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d03f      	beq.n	8002690 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002610:	4b21      	ldr	r3, [pc, #132]	; (8002698 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002622:	429a      	cmp	r2, r3
 8002624:	d031      	beq.n	800268a <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002632:	429a      	cmp	r2, r3
 8002634:	d20a      	bcs.n	800264c <_ZN13STM32Hardware5flushEv+0x68>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800263c:	b29a      	uxth	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002644:	b29b      	uxth	r3, r3
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	b29b      	uxth	r3, r3
 800264a:	e006      	b.n	800265a <_ZN13STM32Hardware5flushEv+0x76>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002652:	b29b      	uxth	r3, r3
 8002654:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002658:	b29b      	uxth	r3, r3
 800265a:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002666:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	89fa      	ldrh	r2, [r7, #14]
 8002670:	4619      	mov	r1, r3
 8002672:	f004 fddf 	bl	8007234 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800267c:	89fb      	ldrh	r3, [r7, #14]
 800267e:	4413      	add	r3, r2
 8002680:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 800268a:	4b03      	ldr	r3, [pc, #12]	; (8002698 <_ZN13STM32Hardware5flushEv+0xb4>)
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
      }
    }
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	2000009c 	.word	0x2000009c

0800269c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
      int n = length;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b2:	bfa8      	it	ge
 80026b4:	f44f 7300 	movge.w	r3, #512	; 0x200
 80026b8:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80026c0:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	4293      	cmp	r3, r2
 80026c8:	bf28      	it	cs
 80026ca:	4613      	movcs	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80026d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	68b9      	ldr	r1, [r7, #8]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f008 fa9d 	bl	800ac20 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	4413      	add	r3, r2
 80026f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d00b      	beq.n	800271a <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	18d1      	adds	r1, r2, r3
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	461a      	mov	r2, r3
 8002716:	f008 fa83 	bl	800ac20 <memcpy>
      }

      flush();
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f7ff ff62 	bl	80025e4 <_ZN13STM32Hardware5flushEv>
    }
 8002720:	bf00      	nop
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	f001 faa4 	bl	8003c7c <HAL_GetTick>
 8002734:	4603      	mov	r3, r0
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <_ZN8std_msgs6UInt16C1Ev>:
  {
    public:
      typedef uint16_t _data_type;
      _data_type data;

    UInt16():
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
      data(0)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff f85a 	bl	8001804 <_ZN3ros3MsgC1Ev>
 8002750:	4a05      	ldr	r2, [pc, #20]	; (8002768 <_ZN8std_msgs6UInt16C1Ev+0x28>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	809a      	strh	r2, [r3, #4]
    {
    }
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	0800b168 	.word	0x0800b168

0800276c <_ZNK8std_msgs6UInt169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	8899      	ldrh	r1, [r3, #4]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	4413      	add	r3, r2
 8002784:	b2ca      	uxtb	r2, r1
 8002786:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	889b      	ldrh	r3, [r3, #4]
 800278c:	0a1b      	lsrs	r3, r3, #8
 800278e:	b299      	uxth	r1, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	3301      	adds	r3, #1
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	4413      	add	r3, r2
 8002798:	b2ca      	uxtb	r2, r1
 800279a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	3302      	adds	r3, #2
 80027a0:	60fb      	str	r3, [r7, #12]
      return offset;
 80027a2:	68fb      	ldr	r3, [r7, #12]
    }
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <_ZN8std_msgs6UInt1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint16_t) (*(inbuffer + offset)));
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	4413      	add	r3, r2
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	809a      	strh	r2, [r3, #4]
      this->data |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	889b      	ldrh	r3, [r3, #4]
 80027d0:	b21a      	sxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3301      	adds	r3, #1
 80027d6:	6839      	ldr	r1, [r7, #0]
 80027d8:	440b      	add	r3, r1
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	b21b      	sxth	r3, r3
 80027e0:	4313      	orrs	r3, r2
 80027e2:	b21b      	sxth	r3, r3
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	3302      	adds	r3, #2
 80027ee:	60fb      	str	r3, [r7, #12]
     return offset;
 80027f0:	68fb      	ldr	r3, [r7, #12]
    }
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <_ZN8std_msgs6UInt167getTypeEv>:

    virtual const char * getType() override { return "std_msgs/UInt16"; };
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <_ZN8std_msgs6UInt167getTypeEv+0x18>)
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	0800afd4 	.word	0x0800afd4

0800281c <_ZN8std_msgs6UInt166getMD5Ev>:
    virtual const char * getMD5() override { return "1df79edf208b629fe6b81923a544552d"; };
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <_ZN8std_msgs6UInt166getMD5Ev+0x18>)
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	0800afe4 	.word	0x0800afe4

08002838 <_ZN8std_msgs5UInt8C1Ev>:
  {
    public:
      typedef uint8_t _data_type;
      _data_type data;

    UInt8():
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
      data(0)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe ffde 	bl	8001804 <_ZN3ros3MsgC1Ev>
 8002848:	4a05      	ldr	r2, [pc, #20]	; (8002860 <_ZN8std_msgs5UInt8C1Ev+0x28>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	711a      	strb	r2, [r3, #4]
    {
    }
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	0800b150 	.word	0x0800b150

08002864 <_ZNK8std_msgs5UInt89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	4413      	add	r3, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	7912      	ldrb	r2, [r2, #4]
 800287c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3301      	adds	r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
      return offset;
 8002884:	68fb      	ldr	r3, [r7, #12]
    }
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002892:	b480      	push	{r7}
 8002894:	b085      	sub	sp, #20
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	4413      	add	r3, r2
 80028a6:	781a      	ldrb	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3301      	adds	r3, #1
 80028b0:	60fb      	str	r3, [r7, #12]
     return offset;
 80028b2:	68fb      	ldr	r3, [r7, #12]
    }
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <_ZN8std_msgs5UInt87getTypeEv>:

    virtual const char * getType() override { return "std_msgs/UInt8"; };
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <_ZN8std_msgs5UInt87getTypeEv+0x18>)
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	0800b008 	.word	0x0800b008

080028dc <_ZN8std_msgs5UInt86getMD5Ev>:
    virtual const char * getMD5() override { return "7c8164229e7d2c17eb95e9231617fdee"; };
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <_ZN8std_msgs5UInt86getMD5Ev+0x18>)
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	0800b018 	.word	0x0800b018

080028f8 <_Z8right_cbRKN8std_msgs6UInt16E>:
static int powerR = 1500;
static int powerL = 1500;

extern TIM_HandleTypeDef htim2;

void right_cb( const std_msgs::UInt16& cmd_msg){
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
    powerR = cmd_msg.data; //1100-1900
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	889b      	ldrh	r3, [r3, #4]
 8002904:	461a      	mov	r2, r3
 8002906:	4b04      	ldr	r3, [pc, #16]	; (8002918 <_Z8right_cbRKN8std_msgs6UInt16E+0x20>)
 8002908:	601a      	str	r2, [r3, #0]
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20000000 	.word	0x20000000

0800291c <_Z7left_cbRKN8std_msgs6UInt16E>:

void left_cb( const std_msgs::UInt16& cmd_msg){
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
    powerL = cmd_msg.data; //1100-1900
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	889b      	ldrh	r3, [r3, #4]
 8002928:	461a      	mov	r2, r3
 800292a:	4b04      	ldr	r3, [pc, #16]	; (800293c <_Z7left_cbRKN8std_msgs6UInt16E+0x20>)
 800292c:	601a      	str	r2, [r3, #0]
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20000004 	.word	0x20000004

08002940 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	4a04      	ldr	r2, [pc, #16]	; (800295c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	0800b198 	.word	0x0800b198

08002960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff ffe8 	bl	8002940 <_ZN3ros15NodeHandleBase_C1Ev>
 8002970:	4a36      	ldr	r2, [pc, #216]	; (8002a4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3304      	adds	r3, #4
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fdcc 	bl	8002518 <_ZN13STM32HardwareC1Ev>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80029a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f008 f945 	bl	800ac3c <memset>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80029b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f008 f93c 	bl	800ac3c <memset>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80029ca:	2264      	movs	r2, #100	; 0x64
 80029cc:	2100      	movs	r1, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	f008 f934 	bl	800ac3c <memset>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f603 0388 	addw	r3, r3, #2184	; 0x888
 80029da:	2264      	movs	r2, #100	; 0x64
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f008 f92c 	bl	800ac3c <memset>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fa56 	bl	8001eec <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	0800b13c 	.word	0x0800b13c

08002a50 <main_task_update>:

void main_task_update(void *arg){
 8002a50:	b580      	push	{r7, lr}
 8002a52:	f5ad 6d1d 	sub.w	sp, sp, #2512	; 0x9d0
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	6018      	str	r0, [r3, #0]
	//X8R Receiver channels
	float channel4 = 0; //perpendicular axis lever - rotation
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	f607 12cc 	addw	r2, r7, #2508	; 0x9cc
 8002a64:	6013      	str	r3, [r2, #0]
	float channel2 = 0; //parallel axis lever - displacement
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	f607 12c8 	addw	r2, r7, #2504	; 0x9c8
 8002a6e:	6013      	str	r3, [r2, #0]
	float channel5 = 0; //choice lever
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	f607 12c4 	addw	r2, r7, #2500	; 0x9c4
 8002a78:	6013      	str	r3, [r2, #0]

	//X8R auxiliar variables
	float channel4Read1 = 0; //First captured value to measure pulse width
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002a82:	6013      	str	r3, [r2, #0]
	float channel4Read2 = 0;//Second captured value to measure pulse width
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	f607 12bc 	addw	r2, r7, #2492	; 0x9bc
 8002a8c:	6013      	str	r3, [r2, #0]
	uint8_t channel4Status = 0;//Defines if waiting the first or second read
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f887 39bb 	strb.w	r3, [r7, #2491]	; 0x9bb

	float channel2Read1 = 0; //First captured value to measure pulse width
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	f607 12b4 	addw	r2, r7, #2484	; 0x9b4
 8002a9c:	6013      	str	r3, [r2, #0]
	float channel2Read2 = 0;//Second captured value to measure pulse width
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	f507 621b 	add.w	r2, r7, #2480	; 0x9b0
 8002aa6:	6013      	str	r3, [r2, #0]
	uint8_t channel2Status = 0;//Defines if waiting the first or second read
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f887 39af 	strb.w	r3, [r7, #2479]	; 0x9af

	float channel5Read1 = 0; //First captured value to measure pulse width
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 8002ab6:	6013      	str	r3, [r2, #0]
	float channel5Read2 = 0;//Second captured value to measure pulse width
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	f607 12a4 	addw	r2, r7, #2468	; 0x9a4
 8002ac0:	6013      	str	r3, [r2, #0]
	uint8_t channel5Status = 0;//Defines if waiting the first or second read
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f887 39a3 	strb.w	r3, [r7, #2467]	; 0x9a3

	//Thrusters declaration
	uint16_t thrusterRight = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f8a7 39a0 	strh.w	r3, [r7, #2464]	; 0x9a0
	uint16_t thrusterLeft = 1;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f8a7 399e 	strh.w	r3, [r7, #2462]	; 0x99e

	ros::NodeHandle  nh;
 8002ad4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff41 	bl	8002960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>

	std_msgs::UInt8 flag;
 8002ade:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fea8 	bl	8002838 <_ZN8std_msgs5UInt8C1Ev>
	ros::Subscriber<std_msgs::UInt16> rsub("rpwm", right_cb);
 8002ae8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002aec:	2301      	movs	r3, #1
 8002aee:	4a33      	ldr	r2, [pc, #204]	; (8002bbc <main_task_update+0x16c>)
 8002af0:	4933      	ldr	r1, [pc, #204]	; (8002bc0 <main_task_update+0x170>)
 8002af2:	f000 f8c7 	bl	8002c84 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei>
	ros::Subscriber<std_msgs::UInt16> lsub("lpwm", left_cb);
 8002af6:	f107 0020 	add.w	r0, r7, #32
 8002afa:	2301      	movs	r3, #1
 8002afc:	4a31      	ldr	r2, [pc, #196]	; (8002bc4 <main_task_update+0x174>)
 8002afe:	4932      	ldr	r1, [pc, #200]	; (8002bc8 <main_task_update+0x178>)
 8002b00:	f000 f8c0 	bl	8002c84 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei>
	ros::Publisher stm32("stm32", &flag);
 8002b04:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002b08:	f107 000c 	add.w	r0, r7, #12
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	492f      	ldr	r1, [pc, #188]	; (8002bcc <main_task_update+0x17c>)
 8002b10:	f7ff fcb8 	bl	8002484 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

	nh.initNode();
 8002b14:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 f8d7 	bl	8002ccc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(stm32);
 8002b1e:	f107 020c 	add.w	r2, r7, #12
 8002b22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 f8ec 	bl	8002d06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.subscribe(rsub);
 8002b2e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002b32:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 f914 	bl	8002d66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(lsub);
 8002b3e:	f107 0220 	add.w	r2, r7, #32
 8002b42:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 f90c 	bl	8002d66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
	uint16_t i = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8a7 399c 	strh.w	r3, [r7, #2460]	; 0x99c

	/**
	 * Start PWM on left and right chan
	 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002b54:	2100      	movs	r1, #0
 8002b56:	481e      	ldr	r0, [pc, #120]	; (8002bd0 <main_task_update+0x180>)
 8002b58:	f002 feb6 	bl	80058c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002b5c:	2104      	movs	r1, #4
 8002b5e:	481c      	ldr	r0, [pc, #112]	; (8002bd0 <main_task_update+0x180>)
 8002b60:	f002 feb2 	bl	80058c8 <HAL_TIM_PWM_Start>

	for(;;){
		select(channel4, channel2, channel5, thrusterRight, thrusterLeft, powerR, powerL);
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <main_task_update+0x184>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <main_task_update+0x188>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f8b7 199e 	ldrh.w	r1, [r7, #2462]	; 0x99e
 8002b70:	f8b7 09a0 	ldrh.w	r0, [r7, #2464]	; 0x9a0
 8002b74:	f607 1cc4 	addw	ip, r7, #2500	; 0x9c4
 8002b78:	ed9c 1a00 	vldr	s2, [ip]
 8002b7c:	f607 1cc8 	addw	ip, r7, #2504	; 0x9c8
 8002b80:	eddc 0a00 	vldr	s1, [ip]
 8002b84:	f607 1ccc 	addw	ip, r7, #2508	; 0x9cc
 8002b88:	ed9c 0a00 	vldr	s0, [ip]
 8002b8c:	f7fe faf2 	bl	8001174 <select>
		flag.data = 1;
 8002b90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b94:	2201      	movs	r2, #1
 8002b96:	711a      	strb	r2, [r3, #4]
		stm32.publish( &flag );
 8002b98:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002b9c:	f107 030c 	add.w	r3, r7, #12
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fc85 	bl	80024b2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 8002ba8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 f905 	bl	8002dbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	    osDelay(10);
 8002bb2:	200a      	movs	r0, #10
 8002bb4:	f005 fbb8 	bl	8008328 <osDelay>
		select(channel4, channel2, channel5, thrusterRight, thrusterLeft, powerR, powerL);
 8002bb8:	e7d4      	b.n	8002b64 <main_task_update+0x114>
 8002bba:	bf00      	nop
 8002bbc:	080028f9 	.word	0x080028f9
 8002bc0:	0800b03c 	.word	0x0800b03c
 8002bc4:	0800291d 	.word	0x0800291d
 8002bc8:	0800b044 	.word	0x0800b044
 8002bcc:	0800b04c 	.word	0x0800b04c
 8002bd0:	20002f54 	.word	0x20002f54
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	20000004 	.word	0x20000004

08002bdc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d80d      	bhi.n	8002c0c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	fa22 f103 	lsr.w	r1, r2, r3
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4413      	add	r3, r2
 8002c00:	b2ca      	uxtb	r2, r1
 8002c02:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3301      	adds	r3, #1
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	e7ee      	b.n	8002bea <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d811      	bhi.n	8002c56 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6839      	ldr	r1, [r7, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	440a      	add	r2, r1
 8002c3c:	7812      	ldrb	r2, [r2, #0]
 8002c3e:	4611      	mov	r1, r2
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	00d2      	lsls	r2, r2, #3
 8002c44:	fa01 f202 	lsl.w	r2, r1, r2
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3301      	adds	r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	e7ea      	b.n	8002c2c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	0800b180 	.word	0x0800b180

08002c84 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
 8002c90:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ffe5 	bl	8002c64 <_ZN3ros11Subscriber_C1Ev>
 8002c9a:	4a0b      	ldr	r2, [pc, #44]	; (8002cc8 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei+0x44>)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	330c      	adds	r3, #12
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fd4b 	bl	8002740 <_ZN8std_msgs6UInt16C1Ev>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	615a      	str	r2, [r3, #20]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	609a      	str	r2, [r3, #8]
  };
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	0800b124 	.word	0x0800b124

08002ccc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fc39 	bl	8002550 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8002d06:	b480      	push	{r7}
 8002d08:	b085      	sub	sp, #20
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b18      	cmp	r3, #24
 8002d18:	dc1e      	bgt.n	8002d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d111      	bne.n	8002d50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	60da      	str	r2, [r3, #12]
        return true;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e004      	b.n	8002d5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3301      	adds	r3, #1
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	e7dd      	b.n	8002d14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8002d58:	2300      	movs	r3, #0
  }
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8002d66:	b480      	push	{r7}
 8002d68:	b085      	sub	sp, #20
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2b18      	cmp	r3, #24
 8002d78:	dc19      	bgt.n	8002dae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10d      	bne.n	8002da6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002d92:	6839      	ldr	r1, [r7, #0]
 8002d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	605a      	str	r2, [r3, #4]
        return true;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e004      	b.n	8002db0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	3301      	adds	r3, #1
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	e7e2      	b.n	8002d74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 8002dae:	2300      	movs	r3, #0
  }
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fcad 	bl	8002728 <_ZN13STM32Hardware4timeEv>
 8002dce:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d903      	bls.n	8002dea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d009      	beq.n	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d903      	bls.n	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d014      	beq.n	8002e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3304      	adds	r3, #4
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fc86 	bl	8002728 <_ZN13STM32Hardware4timeEv>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1ad2      	subs	r2, r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	bf8c      	ite	hi
 8002e2c:	2301      	movhi	r3, #1
 8002e2e:	2300      	movls	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8002e36:	f06f 0301 	mvn.w	r3, #1
 8002e3a:	e194      	b.n	8003166 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fba1 	bl	8002588 <_ZN13STM32Hardware4readEv>
 8002e46:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f2c0 8174 	blt.w	8003138 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	441a      	add	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002e66:	2b07      	cmp	r3, #7
 8002e68:	d11e      	bne.n	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8002e70:	1c59      	adds	r1, r3, #1
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	b2d1      	uxtb	r1, r2
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	4413      	add	r3, r2
 8002e80:	460a      	mov	r2, r1
 8002e82:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002e8c:	1e5a      	subs	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1b4      	bne.n	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002ea6:	e7af      	b.n	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d128      	bne.n	8002f04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2bff      	cmp	r3, #255	; 0xff
 8002eb6:	d10d      	bne.n	8002ed4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f103 0214 	add.w	r2, r3, #20
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002ed2:	e799      	b.n	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fc25 	bl	8002728 <_ZN13STM32Hardware4timeEv>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	bf8c      	ite	hi
 8002eec:	2301      	movhi	r3, #1
 8002eee:	2300      	movls	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d088      	beq.n	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8002efe:	f06f 0301 	mvn.w	r3, #1
 8002f02:	e130      	b.n	8003166 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d118      	bne.n	8002f40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2bfe      	cmp	r3, #254	; 0xfe
 8002f12:	d107      	bne.n	8002f24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002f22:	e771      	b.n	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f47f af68 	bne.w	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f918 	bl	800316e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002f3e:	e763      	b.n	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d113      	bne.n	8002f72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002f70:	e74a      	b.n	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d110      	bne.n	8002f9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	021b      	lsls	r3, r3, #8
 8002f86:	441a      	add	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002f9c:	e734      	b.n	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d116      	bne.n	8002fd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8002fae:	425a      	negs	r2, r3
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	bf58      	it	pl
 8002fb6:	4253      	negpl	r3, r2
 8002fb8:	2bff      	cmp	r3, #255	; 0xff
 8002fba:	d107      	bne.n	8002fcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002fca:	e71d      	b.n	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002fd4:	e718      	b.n	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002fdc:	2b05      	cmp	r3, #5
 8002fde:	d10f      	bne.n	8003000 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002ffe:	e703      	b.n	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003006:	2b06      	cmp	r3, #6
 8003008:	d117      	bne.n	800303a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	441a      	add	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2207      	movs	r2, #7
 8003020:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800302a:	2b00      	cmp	r3, #0
 800302c:	f47f aeec 	bne.w	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2208      	movs	r2, #8
 8003034:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003038:	e6e6      	b.n	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003040:	2b08      	cmp	r3, #8
 8003042:	f47f aee1 	bne.w	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003054:	425a      	negs	r2, r3
 8003056:	b2db      	uxtb	r3, r3
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	bf58      	it	pl
 800305c:	4253      	negpl	r3, r2
 800305e:	2bff      	cmp	r3, #255	; 0xff
 8003060:	f47f aed2 	bne.w	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800306a:	2b00      	cmp	r3, #0
 800306c:	d110      	bne.n	8003090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f87d 	bl	800316e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f898 	bl	80031aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800308a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800308e:	e06a      	b.n	8003166 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003096:	2b0a      	cmp	r3, #10
 8003098:	d107      	bne.n	80030aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80030a0:	4619      	mov	r1, r3
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f960 	bl	8003368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80030a8:	e6ae      	b.n	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80030b0:	2b06      	cmp	r3, #6
 80030b2:	d10e      	bne.n	80030d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80030c0:	4619      	mov	r1, r3
 80030c2:	4610      	mov	r0, r2
 80030c4:	f7ff f851 	bl	800216a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80030d0:	e69a      	b.n	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80030d8:	2b0b      	cmp	r3, #11
 80030da:	d104      	bne.n	80030e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80030e4:	e690      	b.n	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80030ec:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80030f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f43f ae84 	beq.w	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003106:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003110:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800311a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003132:	4611      	mov	r1, r2
 8003134:	4798      	blx	r3
    while (true)
 8003136:	e667      	b.n	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003138:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00f      	beq.n	8003164 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003152:	4293      	cmp	r3, r2
 8003154:	d906      	bls.n	8003164 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f809 	bl	800316e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003164:	2300      	movs	r3, #0
  }
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800316e:	b580      	push	{r7, lr}
 8003170:	b086      	sub	sp, #24
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003176:	f107 030c 	add.w	r3, r7, #12
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe fb52 	bl	8001824 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f107 020c 	add.w	r2, r7, #12
 800318a:	210a      	movs	r1, #10
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	4798      	blx	r3
    rt_time = hardware_.time();
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3304      	adds	r3, #4
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fac7 	bl	8002728 <_ZN13STM32Hardware4timeEv>
 800319a:	4602      	mov	r2, r0
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80031a2:	bf00      	nop
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80031aa:	b590      	push	{r4, r7, lr}
 80031ac:	b08b      	sub	sp, #44	; 0x2c
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80031b2:	f107 030c 	add.w	r3, r7, #12
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe fc24 	bl	8001a04 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80031bc:	2300      	movs	r3, #0
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	2b18      	cmp	r3, #24
 80031c4:	dc63      	bgt.n	800328e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d056      	beq.n	8003286 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	6859      	ldr	r1, [r3, #4]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3308      	adds	r3, #8
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4608      	mov	r0, r1
 8003226:	4798      	blx	r3
 8003228:	4603      	mov	r3, r0
 800322a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	6859      	ldr	r1, [r3, #4]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	330c      	adds	r3, #12
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4608      	mov	r0, r1
 8003254:	4798      	blx	r3
 8003256:	4603      	mov	r3, r0
 8003258:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800325a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800325e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681c      	ldr	r4, [r3, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff f930 	bl	80024da <_ZN3ros9Publisher15getEndpointTypeEv>
 800327a:	4601      	mov	r1, r0
 800327c:	f107 030c 	add.w	r3, r7, #12
 8003280:	461a      	mov	r2, r3
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	3301      	adds	r3, #1
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
 800328c:	e798      	b.n	80031c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800328e:	2300      	movs	r3, #0
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	2b18      	cmp	r3, #24
 8003296:	dc5f      	bgt.n	8003358 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329c:	f202 2222 	addw	r2, r2, #546	; 0x222
 80032a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d053      	beq.n	8003350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ac:	f202 2222 	addw	r2, r2, #546	; 0x222
 80032b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032be:	f202 2222 	addw	r2, r2, #546	; 0x222
 80032c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ce:	f202 2222 	addw	r2, r2, #546	; 0x222
 80032d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032da:	f202 2222 	addw	r2, r2, #546	; 0x222
 80032de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3308      	adds	r3, #8
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4608      	mov	r0, r1
 80032ea:	4798      	blx	r3
 80032ec:	4603      	mov	r3, r0
 80032ee:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80032f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003300:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	330c      	adds	r3, #12
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4608      	mov	r0, r1
 8003310:	4798      	blx	r3
 8003312:	4603      	mov	r3, r0
 8003314:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800331a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681c      	ldr	r4, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003326:	f202 2222 	addw	r2, r2, #546	; 0x222
 800332a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003332:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3304      	adds	r3, #4
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4608      	mov	r0, r1
 8003342:	4798      	blx	r3
 8003344:	4601      	mov	r1, r0
 8003346:	f107 030c 	add.w	r3, r7, #12
 800334a:	461a      	mov	r2, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	3301      	adds	r3, #1
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
 8003356:	e79c      	b.n	8003292 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003360:	bf00      	nop
 8003362:	372c      	adds	r7, #44	; 0x2c
 8003364:	46bd      	mov	sp, r7
 8003366:	bd90      	pop	{r4, r7, pc}

08003368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003372:	f107 0308 	add.w	r3, r7, #8
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe fa54 	bl	8001824 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3304      	adds	r3, #4
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff f9d1 	bl	8002728 <_ZN13STM32Hardware4timeEv>
 8003386:	4602      	mov	r2, r0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003392:	f107 0308 	add.w	r3, r7, #8
 8003396:	6839      	ldr	r1, [r7, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe fab3 	bl	8001904 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	4915      	ldr	r1, [pc, #84]	; (80033f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80033a4:	fba1 1303 	umull	r1, r3, r1, r3
 80033a8:	099b      	lsrs	r3, r3, #6
 80033aa:	4413      	add	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80033ae:	6939      	ldr	r1, [r7, #16]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80033b4:	fba3 0302 	umull	r0, r3, r3, r2
 80033b8:	099b      	lsrs	r3, r3, #6
 80033ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033be:	fb00 f303 	mul.w	r3, r0, r3
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	4a0d      	ldr	r2, [pc, #52]	; (80033fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80033c6:	fb02 f303 	mul.w	r3, r2, r3
 80033ca:	440b      	add	r3, r1
 80033cc:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80033ce:	f107 0308 	add.w	r3, r7, #8
 80033d2:	3304      	adds	r3, #4
 80033d4:	4619      	mov	r1, r3
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f8a4 	bl	8003524 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3304      	adds	r3, #4
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff f9a1 	bl	8002728 <_ZN13STM32Hardware4timeEv>
 80033e6:	4602      	mov	r2, r0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 80033ee:	bf00      	nop
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	10624dd3 	.word	0x10624dd3
 80033fc:	000f4240 	.word	0x000f4240

08003400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b63      	cmp	r3, #99	; 0x63
 8003410:	dd09      	ble.n	8003426 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003418:	f083 0301 	eor.w	r3, r3, #1
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003422:	2300      	movs	r3, #0
 8003424:	e077      	b.n	8003516 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003432:	3207      	adds	r2, #7
 8003434:	4611      	mov	r1, r2
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
 800343a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	22ff      	movs	r2, #255	; 0xff
 8003440:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	22fe      	movs	r2, #254	; 0xfe
 8003448:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	b2da      	uxtb	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	b29b      	uxth	r3, r3
 800345a:	121b      	asrs	r3, r3, #8
 800345c:	b2da      	uxtb	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003470:	4413      	add	r3, r2
 8003472:	b2db      	uxtb	r3, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	b2da      	uxtb	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	b2da      	uxtb	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	b21b      	sxth	r3, r3
 800348c:	121b      	asrs	r3, r3, #8
 800348e:	b2da      	uxtb	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800349a:	2305      	movs	r3, #5
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	3306      	adds	r3, #6
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	dc0d      	bgt.n	80034c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	4413      	add	r3, r2
 80034ae:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	4413      	add	r3, r2
 80034ba:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	3301      	adds	r3, #1
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	e7ec      	b.n	800349e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	3307      	adds	r3, #7
 80034c8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	425a      	negs	r2, r3
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	bf58      	it	pl
 80034d4:	4253      	negpl	r3, r2
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	1c59      	adds	r1, r3, #1
 80034dc:	6179      	str	r1, [r7, #20]
 80034de:	43d2      	mvns	r2, r2
 80034e0:	b2d1      	uxtb	r1, r2
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4413      	add	r3, r2
 80034e6:	460a      	mov	r2, r1
 80034e8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f2:	dc0a      	bgt.n	800350a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1d18      	adds	r0, r3, #4
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4619      	mov	r1, r3
 8003502:	f7ff f8cb 	bl	800269c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	e005      	b.n	8003516 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800350a:	4905      	ldr	r1, [pc, #20]	; (8003520 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f849 	bl	80035a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8003516:	4618      	mov	r0, r3
 8003518:	3720      	adds	r7, #32
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	0800b054 	.word	0x0800b054

08003524 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3304      	adds	r3, #4
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff f8f8 	bl	8002728 <_ZN13STM32Hardware4timeEv>
 8003538:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4915      	ldr	r1, [pc, #84]	; (8003598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8003542:	fba1 1303 	umull	r1, r3, r1, r3
 8003546:	099b      	lsrs	r3, r3, #6
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	1e5a      	subs	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6859      	ldr	r1, [r3, #4]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800355a:	fba3 0302 	umull	r0, r3, r3, r2
 800355e:	099b      	lsrs	r3, r3, #6
 8003560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003564:	fb00 f303 	mul.w	r3, r0, r3
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	4a0c      	ldr	r2, [pc, #48]	; (800359c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 800356c:	fb02 f303 	mul.w	r3, r2, r3
 8003570:	1aca      	subs	r2, r1, r3
 8003572:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8003574:	4413      	add	r3, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003588:	4619      	mov	r1, r3
 800358a:	4610      	mov	r0, r2
 800358c:	f007 fad6 	bl	800ab3c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	10624dd3 	.word	0x10624dd3
 800359c:	000f4240 	.word	0x000f4240
 80035a0:	3b9aca00 	.word	0x3b9aca00

080035a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	2103      	movs	r1, #3
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f804 	bl	80035c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80035b8:	bf00      	nop
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	460b      	mov	r3, r1
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80035ce:	f107 0314 	add.w	r3, r7, #20
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe fbda 	bl	8001d8c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80035d8:	7afb      	ldrb	r3, [r7, #11]
 80035da:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f107 0214 	add.w	r2, r7, #20
 80035ea:	2107      	movs	r1, #7
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	4798      	blx	r3
  }
 80035f0:	bf00      	nop
 80035f2:	3720      	adds	r7, #32
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	330c      	adds	r3, #12
 8003606:	6839      	ldr	r1, [r7, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff f8d1 	bl	80027b0 <_ZN8std_msgs6UInt1611deserializeEPh>
    this->cb_(msg);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	320c      	adds	r2, #12
 8003616:	4610      	mov	r0, r2
 8003618:	4798      	blx	r3
  }
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
  }
 800362e:	4618      	mov	r0, r3
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	330c      	adds	r3, #12
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff f8da 	bl	8002800 <_ZN8std_msgs6UInt167getTypeEv>
 800364c:	4603      	mov	r3, r0
  }
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	330c      	adds	r3, #12
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff f8da 	bl	800281c <_ZN8std_msgs6UInt166getMD5Ev>
 8003668:	4603      	mov	r3, r0
  }
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
    return configured_;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003692:	4b12      	ldr	r3, [pc, #72]	; (80036dc <HAL_MspInit+0x50>)
 8003694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003696:	4a11      	ldr	r2, [pc, #68]	; (80036dc <HAL_MspInit+0x50>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6613      	str	r3, [r2, #96]	; 0x60
 800369e:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <HAL_MspInit+0x50>)
 80036a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	607b      	str	r3, [r7, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036aa:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <HAL_MspInit+0x50>)
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	4a0b      	ldr	r2, [pc, #44]	; (80036dc <HAL_MspInit+0x50>)
 80036b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b4:	6593      	str	r3, [r2, #88]	; 0x58
 80036b6:	4b09      	ldr	r3, [pc, #36]	; (80036dc <HAL_MspInit+0x50>)
 80036b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036c2:	2200      	movs	r2, #0
 80036c4:	210f      	movs	r1, #15
 80036c6:	f06f 0001 	mvn.w	r0, #1
 80036ca:	f000 fb9b 	bl	8003e04 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80036ce:	f001 f871 	bl	80047b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000

080036e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f0:	d10b      	bne.n	800370a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036f2:	4b09      	ldr	r3, [pc, #36]	; (8003718 <HAL_TIM_Base_MspInit+0x38>)
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	4a08      	ldr	r2, [pc, #32]	; (8003718 <HAL_TIM_Base_MspInit+0x38>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	6593      	str	r3, [r2, #88]	; 0x58
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_TIM_Base_MspInit+0x38>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800370a:	bf00      	nop
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40021000 	.word	0x40021000

0800371c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08a      	sub	sp, #40	; 0x28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003724:	f107 0314 	add.w	r3, r7, #20
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	605a      	str	r2, [r3, #4]
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	60da      	str	r2, [r3, #12]
 8003732:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM8)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a17      	ldr	r2, [pc, #92]	; (8003798 <HAL_TIM_IC_MspInit+0x7c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d128      	bne.n	8003790 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800373e:	4b17      	ldr	r3, [pc, #92]	; (800379c <HAL_TIM_IC_MspInit+0x80>)
 8003740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003742:	4a16      	ldr	r2, [pc, #88]	; (800379c <HAL_TIM_IC_MspInit+0x80>)
 8003744:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003748:	6613      	str	r3, [r2, #96]	; 0x60
 800374a:	4b14      	ldr	r3, [pc, #80]	; (800379c <HAL_TIM_IC_MspInit+0x80>)
 800374c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003756:	4b11      	ldr	r3, [pc, #68]	; (800379c <HAL_TIM_IC_MspInit+0x80>)
 8003758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375a:	4a10      	ldr	r2, [pc, #64]	; (800379c <HAL_TIM_IC_MspInit+0x80>)
 800375c:	f043 0302 	orr.w	r3, r3, #2
 8003760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003762:	4b0e      	ldr	r3, [pc, #56]	; (800379c <HAL_TIM_IC_MspInit+0x80>)
 8003764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PB8-BOOT0     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800376e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003774:	2302      	movs	r3, #2
 8003776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003778:	2300      	movs	r3, #0
 800377a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377c:	2300      	movs	r3, #0
 800377e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8003780:	230a      	movs	r3, #10
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003784:	f107 0314 	add.w	r3, r7, #20
 8003788:	4619      	mov	r1, r3
 800378a:	4805      	ldr	r0, [pc, #20]	; (80037a0 <HAL_TIM_IC_MspInit+0x84>)
 800378c:	f000 fdd4 	bl	8004338 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003790:	bf00      	nop
 8003792:	3728      	adds	r7, #40	; 0x28
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40013400 	.word	0x40013400
 800379c:	40021000 	.word	0x40021000
 80037a0:	48000400 	.word	0x48000400

080037a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ac:	f107 030c 	add.w	r3, r7, #12
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	609a      	str	r2, [r3, #8]
 80037b8:	60da      	str	r2, [r3, #12]
 80037ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c4:	d11c      	bne.n	8003800 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c6:	4b10      	ldr	r3, [pc, #64]	; (8003808 <HAL_TIM_MspPostInit+0x64>)
 80037c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ca:	4a0f      	ldr	r2, [pc, #60]	; (8003808 <HAL_TIM_MspPostInit+0x64>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037d2:	4b0d      	ldr	r3, [pc, #52]	; (8003808 <HAL_TIM_MspPostInit+0x64>)
 80037d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037de:	2303      	movs	r3, #3
 80037e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e2:	2302      	movs	r3, #2
 80037e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037ee:	2301      	movs	r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f2:	f107 030c 	add.w	r3, r7, #12
 80037f6:	4619      	mov	r1, r3
 80037f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037fc:	f000 fd9c 	bl	8004338 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003800:	bf00      	nop
 8003802:	3720      	adds	r7, #32
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40021000 	.word	0x40021000

0800380c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08c      	sub	sp, #48	; 0x30
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003814:	f107 031c 	add.w	r3, r7, #28
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a57      	ldr	r2, [pc, #348]	; (8003988 <HAL_UART_MspInit+0x17c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d17a      	bne.n	8003924 <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800382e:	4b57      	ldr	r3, [pc, #348]	; (800398c <HAL_UART_MspInit+0x180>)
 8003830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003832:	4a56      	ldr	r2, [pc, #344]	; (800398c <HAL_UART_MspInit+0x180>)
 8003834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003838:	6613      	str	r3, [r2, #96]	; 0x60
 800383a:	4b54      	ldr	r3, [pc, #336]	; (800398c <HAL_UART_MspInit+0x180>)
 800383c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003842:	61bb      	str	r3, [r7, #24]
 8003844:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003846:	4b51      	ldr	r3, [pc, #324]	; (800398c <HAL_UART_MspInit+0x180>)
 8003848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384a:	4a50      	ldr	r2, [pc, #320]	; (800398c <HAL_UART_MspInit+0x180>)
 800384c:	f043 0302 	orr.w	r3, r3, #2
 8003850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003852:	4b4e      	ldr	r3, [pc, #312]	; (800398c <HAL_UART_MspInit+0x180>)
 8003854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800385e:	23c0      	movs	r3, #192	; 0xc0
 8003860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003862:	2302      	movs	r3, #2
 8003864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003866:	2300      	movs	r3, #0
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800386a:	2300      	movs	r3, #0
 800386c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800386e:	2307      	movs	r3, #7
 8003870:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003872:	f107 031c 	add.w	r3, r7, #28
 8003876:	4619      	mov	r1, r3
 8003878:	4845      	ldr	r0, [pc, #276]	; (8003990 <HAL_UART_MspInit+0x184>)
 800387a:	f000 fd5d 	bl	8004338 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800387e:	4b45      	ldr	r3, [pc, #276]	; (8003994 <HAL_UART_MspInit+0x188>)
 8003880:	4a45      	ldr	r2, [pc, #276]	; (8003998 <HAL_UART_MspInit+0x18c>)
 8003882:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003884:	4b43      	ldr	r3, [pc, #268]	; (8003994 <HAL_UART_MspInit+0x188>)
 8003886:	2218      	movs	r2, #24
 8003888:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800388a:	4b42      	ldr	r3, [pc, #264]	; (8003994 <HAL_UART_MspInit+0x188>)
 800388c:	2200      	movs	r2, #0
 800388e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003890:	4b40      	ldr	r3, [pc, #256]	; (8003994 <HAL_UART_MspInit+0x188>)
 8003892:	2200      	movs	r2, #0
 8003894:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003896:	4b3f      	ldr	r3, [pc, #252]	; (8003994 <HAL_UART_MspInit+0x188>)
 8003898:	2280      	movs	r2, #128	; 0x80
 800389a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800389c:	4b3d      	ldr	r3, [pc, #244]	; (8003994 <HAL_UART_MspInit+0x188>)
 800389e:	2200      	movs	r2, #0
 80038a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038a2:	4b3c      	ldr	r3, [pc, #240]	; (8003994 <HAL_UART_MspInit+0x188>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80038a8:	4b3a      	ldr	r3, [pc, #232]	; (8003994 <HAL_UART_MspInit+0x188>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038ae:	4b39      	ldr	r3, [pc, #228]	; (8003994 <HAL_UART_MspInit+0x188>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80038b4:	4837      	ldr	r0, [pc, #220]	; (8003994 <HAL_UART_MspInit+0x188>)
 80038b6:	f000 facd 	bl	8003e54 <HAL_DMA_Init>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 80038c0:	f7fd ff8a 	bl	80017d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a33      	ldr	r2, [pc, #204]	; (8003994 <HAL_UART_MspInit+0x188>)
 80038c8:	679a      	str	r2, [r3, #120]	; 0x78
 80038ca:	4a32      	ldr	r2, [pc, #200]	; (8003994 <HAL_UART_MspInit+0x188>)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80038d0:	4b32      	ldr	r3, [pc, #200]	; (800399c <HAL_UART_MspInit+0x190>)
 80038d2:	4a33      	ldr	r2, [pc, #204]	; (80039a0 <HAL_UART_MspInit+0x194>)
 80038d4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80038d6:	4b31      	ldr	r3, [pc, #196]	; (800399c <HAL_UART_MspInit+0x190>)
 80038d8:	2219      	movs	r2, #25
 80038da:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038dc:	4b2f      	ldr	r3, [pc, #188]	; (800399c <HAL_UART_MspInit+0x190>)
 80038de:	2210      	movs	r2, #16
 80038e0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038e2:	4b2e      	ldr	r3, [pc, #184]	; (800399c <HAL_UART_MspInit+0x190>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038e8:	4b2c      	ldr	r3, [pc, #176]	; (800399c <HAL_UART_MspInit+0x190>)
 80038ea:	2280      	movs	r2, #128	; 0x80
 80038ec:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038ee:	4b2b      	ldr	r3, [pc, #172]	; (800399c <HAL_UART_MspInit+0x190>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038f4:	4b29      	ldr	r3, [pc, #164]	; (800399c <HAL_UART_MspInit+0x190>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80038fa:	4b28      	ldr	r3, [pc, #160]	; (800399c <HAL_UART_MspInit+0x190>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003900:	4b26      	ldr	r3, [pc, #152]	; (800399c <HAL_UART_MspInit+0x190>)
 8003902:	2200      	movs	r2, #0
 8003904:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003906:	4825      	ldr	r0, [pc, #148]	; (800399c <HAL_UART_MspInit+0x190>)
 8003908:	f000 faa4 	bl	8003e54 <HAL_DMA_Init>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8003912:	f7fd ff61 	bl	80017d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a20      	ldr	r2, [pc, #128]	; (800399c <HAL_UART_MspInit+0x190>)
 800391a:	675a      	str	r2, [r3, #116]	; 0x74
 800391c:	4a1f      	ldr	r2, [pc, #124]	; (800399c <HAL_UART_MspInit+0x190>)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003922:	e02d      	b.n	8003980 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1e      	ldr	r2, [pc, #120]	; (80039a4 <HAL_UART_MspInit+0x198>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d128      	bne.n	8003980 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART2_CLK_ENABLE();
 800392e:	4b17      	ldr	r3, [pc, #92]	; (800398c <HAL_UART_MspInit+0x180>)
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	4a16      	ldr	r2, [pc, #88]	; (800398c <HAL_UART_MspInit+0x180>)
 8003934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003938:	6593      	str	r3, [r2, #88]	; 0x58
 800393a:	4b14      	ldr	r3, [pc, #80]	; (800398c <HAL_UART_MspInit+0x180>)
 800393c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003946:	4b11      	ldr	r3, [pc, #68]	; (800398c <HAL_UART_MspInit+0x180>)
 8003948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394a:	4a10      	ldr	r2, [pc, #64]	; (800398c <HAL_UART_MspInit+0x180>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003952:	4b0e      	ldr	r3, [pc, #56]	; (800398c <HAL_UART_MspInit+0x180>)
 8003954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800395e:	230c      	movs	r3, #12
 8003960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003962:	2302      	movs	r3, #2
 8003964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003966:	2300      	movs	r3, #0
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800396a:	2300      	movs	r3, #0
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800396e:	2307      	movs	r3, #7
 8003970:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003972:	f107 031c 	add.w	r3, r7, #28
 8003976:	4619      	mov	r1, r3
 8003978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800397c:	f000 fcdc 	bl	8004338 <HAL_GPIO_Init>
}
 8003980:	bf00      	nop
 8003982:	3730      	adds	r7, #48	; 0x30
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40013800 	.word	0x40013800
 800398c:	40021000 	.word	0x40021000
 8003990:	48000400 	.word	0x48000400
 8003994:	20002e64 	.word	0x20002e64
 8003998:	40020008 	.word	0x40020008
 800399c:	20002e04 	.word	0x20002e04
 80039a0:	4002001c 	.word	0x4002001c
 80039a4:	40004400 	.word	0x40004400

080039a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08c      	sub	sp, #48	; 0x30
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80039be:	4b2d      	ldr	r3, [pc, #180]	; (8003a74 <HAL_InitTick+0xcc>)
 80039c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c2:	4a2c      	ldr	r2, [pc, #176]	; (8003a74 <HAL_InitTick+0xcc>)
 80039c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c8:	6613      	str	r3, [r2, #96]	; 0x60
 80039ca:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <HAL_InitTick+0xcc>)
 80039cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80039d6:	f107 020c 	add.w	r2, r7, #12
 80039da:	f107 0310 	add.w	r3, r7, #16
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 fbe5 	bl	80051b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80039e6:	f001 fbcd 	bl	8005184 <HAL_RCC_GetPCLK2Freq>
 80039ea:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80039ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ee:	4a22      	ldr	r2, [pc, #136]	; (8003a78 <HAL_InitTick+0xd0>)
 80039f0:	fba2 2303 	umull	r2, r3, r2, r3
 80039f4:	0c9b      	lsrs	r3, r3, #18
 80039f6:	3b01      	subs	r3, #1
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80039fa:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <HAL_InitTick+0xd4>)
 80039fc:	4a20      	ldr	r2, [pc, #128]	; (8003a80 <HAL_InitTick+0xd8>)
 80039fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8003a00:	4b1e      	ldr	r3, [pc, #120]	; (8003a7c <HAL_InitTick+0xd4>)
 8003a02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a06:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8003a08:	4a1c      	ldr	r2, [pc, #112]	; (8003a7c <HAL_InitTick+0xd4>)
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8003a0e:	4b1b      	ldr	r3, [pc, #108]	; (8003a7c <HAL_InitTick+0xd4>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a14:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <HAL_InitTick+0xd4>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8003a1a:	4818      	ldr	r0, [pc, #96]	; (8003a7c <HAL_InitTick+0xd4>)
 8003a1c:	f001 fe30 	bl	8005680 <HAL_TIM_Base_Init>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003a26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d11b      	bne.n	8003a66 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8003a2e:	4813      	ldr	r0, [pc, #76]	; (8003a7c <HAL_InitTick+0xd4>)
 8003a30:	f001 fe7e 	bl	8005730 <HAL_TIM_Base_Start_IT>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003a3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d111      	bne.n	8003a66 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003a42:	201a      	movs	r0, #26
 8003a44:	f000 f9f8 	bl	8003e38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b0f      	cmp	r3, #15
 8003a4c:	d808      	bhi.n	8003a60 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8003a4e:	2200      	movs	r2, #0
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	201a      	movs	r0, #26
 8003a54:	f000 f9d6 	bl	8003e04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a58:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <HAL_InitTick+0xdc>)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e002      	b.n	8003a66 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8003a66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3730      	adds	r7, #48	; 0x30
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40021000 	.word	0x40021000
 8003a78:	431bde83 	.word	0x431bde83
 8003a7c:	2000302c 	.word	0x2000302c
 8003a80:	40014800 	.word	0x40014800
 8003a84:	2000000c 	.word	0x2000000c

08003a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a9a:	e7fe      	b.n	8003a9a <HardFault_Handler+0x4>

08003a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003aa0:	e7fe      	b.n	8003aa0 <MemManage_Handler+0x4>

08003aa2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aa6:	e7fe      	b.n	8003aa6 <BusFault_Handler+0x4>

08003aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aac:	e7fe      	b.n	8003aac <UsageFault_Handler+0x4>

08003aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003ac0:	4802      	ldr	r0, [pc, #8]	; (8003acc <DMA1_Channel1_IRQHandler+0x10>)
 8003ac2:	f000 faea 	bl	800409a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20002e64 	.word	0x20002e64

08003ad0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003ad4:	4802      	ldr	r0, [pc, #8]	; (8003ae0 <DMA1_Channel2_IRQHandler+0x10>)
 8003ad6:	f000 fae0 	bl	800409a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20002e04 	.word	0x20002e04

08003ae4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003ae8:	4802      	ldr	r0, [pc, #8]	; (8003af4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8003aea:	f002 f844 	bl	8005b76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	2000302c 	.word	0x2000302c

08003af8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
	return 1;
 8003afc:	2301      	movs	r3, #1
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <_kill>:

int _kill(int pid, int sig)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b12:	f007 f85b 	bl	800abcc <__errno>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2216      	movs	r2, #22
 8003b1a:	601a      	str	r2, [r3, #0]
	return -1;
 8003b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <_exit>:

void _exit (int status)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7ff ffe7 	bl	8003b08 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b3a:	e7fe      	b.n	8003b3a <_exit+0x12>

08003b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b44:	4a14      	ldr	r2, [pc, #80]	; (8003b98 <_sbrk+0x5c>)
 8003b46:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <_sbrk+0x60>)
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b50:	4b13      	ldr	r3, [pc, #76]	; (8003ba0 <_sbrk+0x64>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d102      	bne.n	8003b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b58:	4b11      	ldr	r3, [pc, #68]	; (8003ba0 <_sbrk+0x64>)
 8003b5a:	4a12      	ldr	r2, [pc, #72]	; (8003ba4 <_sbrk+0x68>)
 8003b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b5e:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <_sbrk+0x64>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4413      	add	r3, r2
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d207      	bcs.n	8003b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b6c:	f007 f82e 	bl	800abcc <__errno>
 8003b70:	4603      	mov	r3, r0
 8003b72:	220c      	movs	r2, #12
 8003b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b7a:	e009      	b.n	8003b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b7c:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <_sbrk+0x64>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b82:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <_sbrk+0x64>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4413      	add	r3, r2
 8003b8a:	4a05      	ldr	r2, [pc, #20]	; (8003ba0 <_sbrk+0x64>)
 8003b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20008000 	.word	0x20008000
 8003b9c:	00000400 	.word	0x00000400
 8003ba0:	200000a0 	.word	0x200000a0
 8003ba4:	200030d0 	.word	0x200030d0

08003ba8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003bac:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <SystemInit+0x28>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb2:	4a07      	ldr	r2, [pc, #28]	; (8003bd0 <SystemInit+0x28>)
 8003bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003bbc:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <SystemInit+0x28>)
 8003bbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bc2:	609a      	str	r2, [r3, #8]
#endif
}
 8003bc4:	bf00      	nop
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	e000ed00 	.word	0xe000ed00

08003bd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003bd4:	480d      	ldr	r0, [pc, #52]	; (8003c0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003bd6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bd8:	480d      	ldr	r0, [pc, #52]	; (8003c10 <LoopForever+0x6>)
  ldr r1, =_edata
 8003bda:	490e      	ldr	r1, [pc, #56]	; (8003c14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003bdc:	4a0e      	ldr	r2, [pc, #56]	; (8003c18 <LoopForever+0xe>)
  movs r3, #0
 8003bde:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003be0:	e002      	b.n	8003be8 <LoopCopyDataInit>

08003be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003be6:	3304      	adds	r3, #4

08003be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bec:	d3f9      	bcc.n	8003be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bee:	4a0b      	ldr	r2, [pc, #44]	; (8003c1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003bf0:	4c0b      	ldr	r4, [pc, #44]	; (8003c20 <LoopForever+0x16>)
  movs r3, #0
 8003bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bf4:	e001      	b.n	8003bfa <LoopFillZerobss>

08003bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bf8:	3204      	adds	r2, #4

08003bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bfc:	d3fb      	bcc.n	8003bf6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003bfe:	f7ff ffd3 	bl	8003ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c02:	f006 ffe9 	bl	800abd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c06:	f7fd fb17 	bl	8001238 <main>

08003c0a <LoopForever>:

LoopForever:
    b LoopForever
 8003c0a:	e7fe      	b.n	8003c0a <LoopForever>
  ldr   r0, =_estack
 8003c0c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c14:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003c18:	0800b25c 	.word	0x0800b25c
  ldr r2, =_sbss
 8003c1c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003c20:	200030cc 	.word	0x200030cc

08003c24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c24:	e7fe      	b.n	8003c24 <ADC1_2_IRQHandler>

08003c26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c30:	2003      	movs	r0, #3
 8003c32:	f000 f8dc 	bl	8003dee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c36:	2000      	movs	r0, #0
 8003c38:	f7ff feb6 	bl	80039a8 <HAL_InitTick>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	71fb      	strb	r3, [r7, #7]
 8003c46:	e001      	b.n	8003c4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c48:	f7ff fd20 	bl	800368c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c4c:	79fb      	ldrb	r3, [r7, #7]

}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c5c:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <HAL_IncTick+0x1c>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_IncTick+0x20>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4413      	add	r3, r2
 8003c66:	4a03      	ldr	r2, [pc, #12]	; (8003c74 <HAL_IncTick+0x1c>)
 8003c68:	6013      	str	r3, [r2, #0]
}
 8003c6a:	bf00      	nop
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	20003078 	.word	0x20003078
 8003c78:	20000010 	.word	0x20000010

08003c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c80:	4b03      	ldr	r3, [pc, #12]	; (8003c90 <HAL_GetTick+0x14>)
 8003c82:	681b      	ldr	r3, [r3, #0]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	20003078 	.word	0x20003078

08003c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cc6:	4a04      	ldr	r2, [pc, #16]	; (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	60d3      	str	r3, [r2, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce0:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	f003 0307 	and.w	r3, r3, #7
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	db0b      	blt.n	8003d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	f003 021f 	and.w	r2, r3, #31
 8003d10:	4907      	ldr	r1, [pc, #28]	; (8003d30 <__NVIC_EnableIRQ+0x38>)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	2001      	movs	r0, #1
 8003d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	e000e100 	.word	0xe000e100

08003d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	6039      	str	r1, [r7, #0]
 8003d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	db0a      	blt.n	8003d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	490c      	ldr	r1, [pc, #48]	; (8003d80 <__NVIC_SetPriority+0x4c>)
 8003d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d52:	0112      	lsls	r2, r2, #4
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	440b      	add	r3, r1
 8003d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d5c:	e00a      	b.n	8003d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	4908      	ldr	r1, [pc, #32]	; (8003d84 <__NVIC_SetPriority+0x50>)
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	3b04      	subs	r3, #4
 8003d6c:	0112      	lsls	r2, r2, #4
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	440b      	add	r3, r1
 8003d72:	761a      	strb	r2, [r3, #24]
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	e000e100 	.word	0xe000e100
 8003d84:	e000ed00 	.word	0xe000ed00

08003d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b089      	sub	sp, #36	; 0x24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f1c3 0307 	rsb	r3, r3, #7
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	bf28      	it	cs
 8003da6:	2304      	movcs	r3, #4
 8003da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	3304      	adds	r3, #4
 8003dae:	2b06      	cmp	r3, #6
 8003db0:	d902      	bls.n	8003db8 <NVIC_EncodePriority+0x30>
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	3b03      	subs	r3, #3
 8003db6:	e000      	b.n	8003dba <NVIC_EncodePriority+0x32>
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	401a      	ands	r2, r3
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dda:	43d9      	mvns	r1, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de0:	4313      	orrs	r3, r2
         );
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3724      	adds	r7, #36	; 0x24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff ff4c 	bl	8003c94 <__NVIC_SetPriorityGrouping>
}
 8003dfc:	bf00      	nop
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e12:	f7ff ff63 	bl	8003cdc <__NVIC_GetPriorityGrouping>
 8003e16:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	6978      	ldr	r0, [r7, #20]
 8003e1e:	f7ff ffb3 	bl	8003d88 <NVIC_EncodePriority>
 8003e22:	4602      	mov	r2, r0
 8003e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ff82 	bl	8003d34 <__NVIC_SetPriority>
}
 8003e30:	bf00      	nop
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff ff56 	bl	8003cf8 <__NVIC_EnableIRQ>
}
 8003e4c:	bf00      	nop
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e08d      	b.n	8003f82 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	4b47      	ldr	r3, [pc, #284]	; (8003f8c <HAL_DMA_Init+0x138>)
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d80f      	bhi.n	8003e92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	4b45      	ldr	r3, [pc, #276]	; (8003f90 <HAL_DMA_Init+0x13c>)
 8003e7a:	4413      	add	r3, r2
 8003e7c:	4a45      	ldr	r2, [pc, #276]	; (8003f94 <HAL_DMA_Init+0x140>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	091b      	lsrs	r3, r3, #4
 8003e84:	009a      	lsls	r2, r3, #2
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a42      	ldr	r2, [pc, #264]	; (8003f98 <HAL_DMA_Init+0x144>)
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40
 8003e90:	e00e      	b.n	8003eb0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	4b40      	ldr	r3, [pc, #256]	; (8003f9c <HAL_DMA_Init+0x148>)
 8003e9a:	4413      	add	r3, r2
 8003e9c:	4a3d      	ldr	r2, [pc, #244]	; (8003f94 <HAL_DMA_Init+0x140>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	091b      	lsrs	r3, r3, #4
 8003ea4:	009a      	lsls	r2, r3, #2
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a3c      	ldr	r2, [pc, #240]	; (8003fa0 <HAL_DMA_Init+0x14c>)
 8003eae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f9b6 	bl	8004274 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f10:	d102      	bne.n	8003f18 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f2c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d010      	beq.n	8003f58 <HAL_DMA_Init+0x104>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d80c      	bhi.n	8003f58 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f9d6 	bl	80042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	e008      	b.n	8003f6a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40020407 	.word	0x40020407
 8003f90:	bffdfff8 	.word	0xbffdfff8
 8003f94:	cccccccd 	.word	0xcccccccd
 8003f98:	40020000 	.word	0x40020000
 8003f9c:	bffdfbf8 	.word	0xbffdfbf8
 8003fa0:	40020400 	.word	0x40020400

08003fa4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_DMA_Start_IT+0x20>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e066      	b.n	8004092 <HAL_DMA_Start_IT+0xee>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d155      	bne.n	8004084 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f8fb 	bl	80041f8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f042 020e 	orr.w	r2, r2, #14
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e00f      	b.n	800403c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0204 	bic.w	r2, r2, #4
 800402a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 020a 	orr.w	r2, r2, #10
 800403a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004054:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004058:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405e:	2b00      	cmp	r3, #0
 8004060:	d007      	beq.n	8004072 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004070:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0201 	orr.w	r2, r2, #1
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	e005      	b.n	8004090 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800408c:	2302      	movs	r3, #2
 800408e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004090:	7dfb      	ldrb	r3, [r7, #23]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	2204      	movs	r2, #4
 80040bc:	409a      	lsls	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d026      	beq.n	8004114 <HAL_DMA_IRQHandler+0x7a>
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d021      	beq.n	8004114 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d107      	bne.n	80040ee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0204 	bic.w	r2, r2, #4
 80040ec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f2:	f003 021f 	and.w	r2, r3, #31
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	2104      	movs	r1, #4
 80040fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004100:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	2b00      	cmp	r3, #0
 8004108:	d071      	beq.n	80041ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004112:	e06c      	b.n	80041ee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	2202      	movs	r2, #2
 800411e:	409a      	lsls	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4013      	ands	r3, r2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d02e      	beq.n	8004186 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d029      	beq.n	8004186 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10b      	bne.n	8004158 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 020a 	bic.w	r2, r2, #10
 800414e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415c:	f003 021f 	and.w	r2, r3, #31
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	2102      	movs	r1, #2
 8004166:	fa01 f202 	lsl.w	r2, r1, r2
 800416a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d038      	beq.n	80041ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004184:	e033      	b.n	80041ee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	f003 031f 	and.w	r3, r3, #31
 800418e:	2208      	movs	r2, #8
 8004190:	409a      	lsls	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4013      	ands	r3, r2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d02a      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d025      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 020e 	bic.w	r2, r2, #14
 80041b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b8:	f003 021f 	and.w	r2, r3, #31
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	2101      	movs	r1, #1
 80041c2:	fa01 f202 	lsl.w	r2, r1, r2
 80041c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d004      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80041ee:	bf00      	nop
 80041f0:	bf00      	nop
}
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800420e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004214:	2b00      	cmp	r3, #0
 8004216:	d004      	beq.n	8004222 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004220:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	f003 021f 	and.w	r2, r3, #31
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	2101      	movs	r1, #1
 8004230:	fa01 f202 	lsl.w	r2, r1, r2
 8004234:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b10      	cmp	r3, #16
 8004244:	d108      	bne.n	8004258 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004256:	e007      	b.n	8004268 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	60da      	str	r2, [r3, #12]
}
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	461a      	mov	r2, r3
 8004282:	4b16      	ldr	r3, [pc, #88]	; (80042dc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004284:	429a      	cmp	r2, r3
 8004286:	d802      	bhi.n	800428e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004288:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	e001      	b.n	8004292 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800428e:	4b15      	ldr	r3, [pc, #84]	; (80042e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004290:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	3b08      	subs	r3, #8
 800429e:	4a12      	ldr	r2, [pc, #72]	; (80042e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80042a0:	fba2 2303 	umull	r2, r3, r2, r3
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ac:	089b      	lsrs	r3, r3, #2
 80042ae:	009a      	lsls	r2, r3, #2
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4413      	add	r3, r2
 80042b4:	461a      	mov	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a0b      	ldr	r2, [pc, #44]	; (80042ec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80042be:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	2201      	movs	r2, #1
 80042c8:	409a      	lsls	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042ce:	bf00      	nop
 80042d0:	371c      	adds	r7, #28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40020407 	.word	0x40020407
 80042e0:	40020800 	.word	0x40020800
 80042e4:	40020820 	.word	0x40020820
 80042e8:	cccccccd 	.word	0xcccccccd
 80042ec:	40020880 	.word	0x40020880

080042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	461a      	mov	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a08      	ldr	r2, [pc, #32]	; (8004334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004312:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3b01      	subs	r3, #1
 8004318:	f003 031f 	and.w	r3, r3, #31
 800431c:	2201      	movs	r2, #1
 800431e:	409a      	lsls	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	1000823f 	.word	0x1000823f
 8004334:	40020940 	.word	0x40020940

08004338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004346:	e15a      	b.n	80045fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	2101      	movs	r1, #1
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	fa01 f303 	lsl.w	r3, r1, r3
 8004354:	4013      	ands	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 814c 	beq.w	80045f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d00b      	beq.n	8004380 <HAL_GPIO_Init+0x48>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d007      	beq.n	8004380 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004374:	2b11      	cmp	r3, #17
 8004376:	d003      	beq.n	8004380 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b12      	cmp	r3, #18
 800437e:	d130      	bne.n	80043e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	2203      	movs	r2, #3
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	43db      	mvns	r3, r3
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4013      	ands	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043b6:	2201      	movs	r2, #1
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	43db      	mvns	r3, r3
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4013      	ands	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	091b      	lsrs	r3, r3, #4
 80043cc:	f003 0201 	and.w	r2, r3, #1
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	4313      	orrs	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	2203      	movs	r2, #3
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	43db      	mvns	r3, r3
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4013      	ands	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b02      	cmp	r3, #2
 8004418:	d003      	beq.n	8004422 <HAL_GPIO_Init+0xea>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b12      	cmp	r3, #18
 8004420:	d123      	bne.n	800446a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	08da      	lsrs	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3208      	adds	r2, #8
 800442a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800442e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	220f      	movs	r2, #15
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43db      	mvns	r3, r3
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4013      	ands	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	691a      	ldr	r2, [r3, #16]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	08da      	lsrs	r2, r3, #3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3208      	adds	r2, #8
 8004464:	6939      	ldr	r1, [r7, #16]
 8004466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	2203      	movs	r2, #3
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	43db      	mvns	r3, r3
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4013      	ands	r3, r2
 8004480:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f003 0203 	and.w	r2, r3, #3
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 80a6 	beq.w	80045f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ac:	4b5b      	ldr	r3, [pc, #364]	; (800461c <HAL_GPIO_Init+0x2e4>)
 80044ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b0:	4a5a      	ldr	r2, [pc, #360]	; (800461c <HAL_GPIO_Init+0x2e4>)
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	6613      	str	r3, [r2, #96]	; 0x60
 80044b8:	4b58      	ldr	r3, [pc, #352]	; (800461c <HAL_GPIO_Init+0x2e4>)
 80044ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044c4:	4a56      	ldr	r2, [pc, #344]	; (8004620 <HAL_GPIO_Init+0x2e8>)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	089b      	lsrs	r3, r3, #2
 80044ca:	3302      	adds	r3, #2
 80044cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f003 0303 	and.w	r3, r3, #3
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	220f      	movs	r2, #15
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	43db      	mvns	r3, r3
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4013      	ands	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044ee:	d01f      	beq.n	8004530 <HAL_GPIO_Init+0x1f8>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a4c      	ldr	r2, [pc, #304]	; (8004624 <HAL_GPIO_Init+0x2ec>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d019      	beq.n	800452c <HAL_GPIO_Init+0x1f4>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a4b      	ldr	r2, [pc, #300]	; (8004628 <HAL_GPIO_Init+0x2f0>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d013      	beq.n	8004528 <HAL_GPIO_Init+0x1f0>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a4a      	ldr	r2, [pc, #296]	; (800462c <HAL_GPIO_Init+0x2f4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00d      	beq.n	8004524 <HAL_GPIO_Init+0x1ec>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a49      	ldr	r2, [pc, #292]	; (8004630 <HAL_GPIO_Init+0x2f8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d007      	beq.n	8004520 <HAL_GPIO_Init+0x1e8>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a48      	ldr	r2, [pc, #288]	; (8004634 <HAL_GPIO_Init+0x2fc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d101      	bne.n	800451c <HAL_GPIO_Init+0x1e4>
 8004518:	2305      	movs	r3, #5
 800451a:	e00a      	b.n	8004532 <HAL_GPIO_Init+0x1fa>
 800451c:	2306      	movs	r3, #6
 800451e:	e008      	b.n	8004532 <HAL_GPIO_Init+0x1fa>
 8004520:	2304      	movs	r3, #4
 8004522:	e006      	b.n	8004532 <HAL_GPIO_Init+0x1fa>
 8004524:	2303      	movs	r3, #3
 8004526:	e004      	b.n	8004532 <HAL_GPIO_Init+0x1fa>
 8004528:	2302      	movs	r3, #2
 800452a:	e002      	b.n	8004532 <HAL_GPIO_Init+0x1fa>
 800452c:	2301      	movs	r3, #1
 800452e:	e000      	b.n	8004532 <HAL_GPIO_Init+0x1fa>
 8004530:	2300      	movs	r3, #0
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	f002 0203 	and.w	r2, r2, #3
 8004538:	0092      	lsls	r2, r2, #2
 800453a:	4093      	lsls	r3, r2
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004542:	4937      	ldr	r1, [pc, #220]	; (8004620 <HAL_GPIO_Init+0x2e8>)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	089b      	lsrs	r3, r3, #2
 8004548:	3302      	adds	r3, #2
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004550:	4b39      	ldr	r3, [pc, #228]	; (8004638 <HAL_GPIO_Init+0x300>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	43db      	mvns	r3, r3
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4013      	ands	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004574:	4a30      	ldr	r2, [pc, #192]	; (8004638 <HAL_GPIO_Init+0x300>)
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800457a:	4b2f      	ldr	r3, [pc, #188]	; (8004638 <HAL_GPIO_Init+0x300>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	43db      	mvns	r3, r3
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4013      	ands	r3, r2
 8004588:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800459e:	4a26      	ldr	r2, [pc, #152]	; (8004638 <HAL_GPIO_Init+0x300>)
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045a4:	4b24      	ldr	r3, [pc, #144]	; (8004638 <HAL_GPIO_Init+0x300>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	43db      	mvns	r3, r3
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4013      	ands	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045c8:	4a1b      	ldr	r2, [pc, #108]	; (8004638 <HAL_GPIO_Init+0x300>)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045ce:	4b1a      	ldr	r3, [pc, #104]	; (8004638 <HAL_GPIO_Init+0x300>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	43db      	mvns	r3, r3
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4013      	ands	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045f2:	4a11      	ldr	r2, [pc, #68]	; (8004638 <HAL_GPIO_Init+0x300>)
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	3301      	adds	r3, #1
 80045fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	f47f ae9d 	bne.w	8004348 <HAL_GPIO_Init+0x10>
  }
}
 800460e:	bf00      	nop
 8004610:	bf00      	nop
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	40021000 	.word	0x40021000
 8004620:	40010000 	.word	0x40010000
 8004624:	48000400 	.word	0x48000400
 8004628:	48000800 	.word	0x48000800
 800462c:	48000c00 	.word	0x48000c00
 8004630:	48001000 	.word	0x48001000
 8004634:	48001400 	.word	0x48001400
 8004638:	40010400 	.word	0x40010400

0800463c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	807b      	strh	r3, [r7, #2]
 8004648:	4613      	mov	r3, r2
 800464a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800464c:	787b      	ldrb	r3, [r7, #1]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004652:	887a      	ldrh	r2, [r7, #2]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004658:	e002      	b.n	8004660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800465a:	887a      	ldrh	r2, [r7, #2]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d141      	bne.n	80046fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800467a:	4b4b      	ldr	r3, [pc, #300]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004686:	d131      	bne.n	80046ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004688:	4b47      	ldr	r3, [pc, #284]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800468a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800468e:	4a46      	ldr	r2, [pc, #280]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004694:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004698:	4b43      	ldr	r3, [pc, #268]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046a0:	4a41      	ldr	r2, [pc, #260]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046a8:	4b40      	ldr	r3, [pc, #256]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2232      	movs	r2, #50	; 0x32
 80046ae:	fb02 f303 	mul.w	r3, r2, r3
 80046b2:	4a3f      	ldr	r2, [pc, #252]	; (80047b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046b4:	fba2 2303 	umull	r2, r3, r2, r3
 80046b8:	0c9b      	lsrs	r3, r3, #18
 80046ba:	3301      	adds	r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046be:	e002      	b.n	80046c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046c6:	4b38      	ldr	r3, [pc, #224]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d2:	d102      	bne.n	80046da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f2      	bne.n	80046c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046da:	4b33      	ldr	r3, [pc, #204]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e6:	d158      	bne.n	800479a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e057      	b.n	800479c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046ec:	4b2e      	ldr	r3, [pc, #184]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046f2:	4a2d      	ldr	r2, [pc, #180]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046fc:	e04d      	b.n	800479a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004704:	d141      	bne.n	800478a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004706:	4b28      	ldr	r3, [pc, #160]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800470e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004712:	d131      	bne.n	8004778 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004714:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800471a:	4a23      	ldr	r2, [pc, #140]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004720:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004724:	4b20      	ldr	r3, [pc, #128]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800472c:	4a1e      	ldr	r2, [pc, #120]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800472e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004732:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004734:	4b1d      	ldr	r3, [pc, #116]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2232      	movs	r2, #50	; 0x32
 800473a:	fb02 f303 	mul.w	r3, r2, r3
 800473e:	4a1c      	ldr	r2, [pc, #112]	; (80047b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	0c9b      	lsrs	r3, r3, #18
 8004746:	3301      	adds	r3, #1
 8004748:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800474a:	e002      	b.n	8004752 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3b01      	subs	r3, #1
 8004750:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004752:	4b15      	ldr	r3, [pc, #84]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800475a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475e:	d102      	bne.n	8004766 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f2      	bne.n	800474c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004766:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004772:	d112      	bne.n	800479a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e011      	b.n	800479c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004778:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800477e:	4a0a      	ldr	r2, [pc, #40]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004784:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004788:	e007      	b.n	800479a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800478a:	4b07      	ldr	r3, [pc, #28]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004792:	4a05      	ldr	r2, [pc, #20]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004794:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004798:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	40007000 	.word	0x40007000
 80047ac:	20000008 	.word	0x20000008
 80047b0:	431bde83 	.word	0x431bde83

080047b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	4a04      	ldr	r2, [pc, #16]	; (80047d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047c2:	6093      	str	r3, [r2, #8]
}
 80047c4:	bf00      	nop
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40007000 	.word	0x40007000

080047d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e308      	b.n	8004df8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d075      	beq.n	80048de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047f2:	4ba3      	ldr	r3, [pc, #652]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047fc:	4ba0      	ldr	r3, [pc, #640]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b0c      	cmp	r3, #12
 800480a:	d102      	bne.n	8004812 <HAL_RCC_OscConfig+0x3e>
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2b03      	cmp	r3, #3
 8004810:	d002      	beq.n	8004818 <HAL_RCC_OscConfig+0x44>
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	2b08      	cmp	r3, #8
 8004816:	d10b      	bne.n	8004830 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004818:	4b99      	ldr	r3, [pc, #612]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d05b      	beq.n	80048dc <HAL_RCC_OscConfig+0x108>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d157      	bne.n	80048dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e2e3      	b.n	8004df8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004838:	d106      	bne.n	8004848 <HAL_RCC_OscConfig+0x74>
 800483a:	4b91      	ldr	r3, [pc, #580]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a90      	ldr	r2, [pc, #576]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 8004840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	e01d      	b.n	8004884 <HAL_RCC_OscConfig+0xb0>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004850:	d10c      	bne.n	800486c <HAL_RCC_OscConfig+0x98>
 8004852:	4b8b      	ldr	r3, [pc, #556]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a8a      	ldr	r2, [pc, #552]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 8004858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	4b88      	ldr	r3, [pc, #544]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a87      	ldr	r2, [pc, #540]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 8004864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	e00b      	b.n	8004884 <HAL_RCC_OscConfig+0xb0>
 800486c:	4b84      	ldr	r3, [pc, #528]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a83      	ldr	r2, [pc, #524]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 8004872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	4b81      	ldr	r3, [pc, #516]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a80      	ldr	r2, [pc, #512]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 800487e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d013      	beq.n	80048b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488c:	f7ff f9f6 	bl	8003c7c <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004894:	f7ff f9f2 	bl	8003c7c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b64      	cmp	r3, #100	; 0x64
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e2a8      	b.n	8004df8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048a6:	4b76      	ldr	r3, [pc, #472]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0xc0>
 80048b2:	e014      	b.n	80048de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7ff f9e2 	bl	8003c7c <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048bc:	f7ff f9de 	bl	8003c7c <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b64      	cmp	r3, #100	; 0x64
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e294      	b.n	8004df8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ce:	4b6c      	ldr	r3, [pc, #432]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f0      	bne.n	80048bc <HAL_RCC_OscConfig+0xe8>
 80048da:	e000      	b.n	80048de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d075      	beq.n	80049d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ea:	4b65      	ldr	r3, [pc, #404]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048f4:	4b62      	ldr	r3, [pc, #392]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b0c      	cmp	r3, #12
 8004902:	d102      	bne.n	800490a <HAL_RCC_OscConfig+0x136>
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d002      	beq.n	8004910 <HAL_RCC_OscConfig+0x13c>
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	2b04      	cmp	r3, #4
 800490e:	d11f      	bne.n	8004950 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004910:	4b5b      	ldr	r3, [pc, #364]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <HAL_RCC_OscConfig+0x154>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e267      	b.n	8004df8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004928:	4b55      	ldr	r3, [pc, #340]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	061b      	lsls	r3, r3, #24
 8004936:	4952      	ldr	r1, [pc, #328]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 8004938:	4313      	orrs	r3, r2
 800493a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800493c:	4b51      	ldr	r3, [pc, #324]	; (8004a84 <HAL_RCC_OscConfig+0x2b0>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff f831 	bl	80039a8 <HAL_InitTick>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d043      	beq.n	80049d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e253      	b.n	8004df8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d023      	beq.n	80049a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004958:	4b49      	ldr	r3, [pc, #292]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a48      	ldr	r2, [pc, #288]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 800495e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004964:	f7ff f98a 	bl	8003c7c <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800496c:	f7ff f986 	bl	8003c7c <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e23c      	b.n	8004df8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800497e:	4b40      	ldr	r3, [pc, #256]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0f0      	beq.n	800496c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498a:	4b3d      	ldr	r3, [pc, #244]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	061b      	lsls	r3, r3, #24
 8004998:	4939      	ldr	r1, [pc, #228]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 800499a:	4313      	orrs	r3, r2
 800499c:	604b      	str	r3, [r1, #4]
 800499e:	e01a      	b.n	80049d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a0:	4b37      	ldr	r3, [pc, #220]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a36      	ldr	r2, [pc, #216]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 80049a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7ff f966 	bl	8003c7c <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049b4:	f7ff f962 	bl	8003c7c <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e218      	b.n	8004df8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049c6:	4b2e      	ldr	r3, [pc, #184]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x1e0>
 80049d2:	e000      	b.n	80049d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d03c      	beq.n	8004a5c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d01c      	beq.n	8004a24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ea:	4b25      	ldr	r3, [pc, #148]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049f0:	4a23      	ldr	r2, [pc, #140]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 80049f2:	f043 0301 	orr.w	r3, r3, #1
 80049f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fa:	f7ff f93f 	bl	8003c7c <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a02:	f7ff f93b 	bl	8003c7c <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e1f1      	b.n	8004df8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a14:	4b1a      	ldr	r3, [pc, #104]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 8004a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0ef      	beq.n	8004a02 <HAL_RCC_OscConfig+0x22e>
 8004a22:	e01b      	b.n	8004a5c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a24:	4b16      	ldr	r3, [pc, #88]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 8004a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a2a:	4a15      	ldr	r2, [pc, #84]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 8004a2c:	f023 0301 	bic.w	r3, r3, #1
 8004a30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a34:	f7ff f922 	bl	8003c7c <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a3c:	f7ff f91e 	bl	8003c7c <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e1d4      	b.n	8004df8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a4e:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 8004a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1ef      	bne.n	8004a3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 80ab 	beq.w	8004bc0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a6e:	4b04      	ldr	r3, [pc, #16]	; (8004a80 <HAL_RCC_OscConfig+0x2ac>)
 8004a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_RCC_OscConfig+0x2b4>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e005      	b.n	8004a8a <HAL_RCC_OscConfig+0x2b6>
 8004a7e:	bf00      	nop
 8004a80:	40021000 	.word	0x40021000
 8004a84:	2000000c 	.word	0x2000000c
 8004a88:	2300      	movs	r3, #0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00d      	beq.n	8004aaa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a8e:	4baf      	ldr	r3, [pc, #700]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a92:	4aae      	ldr	r2, [pc, #696]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a98:	6593      	str	r3, [r2, #88]	; 0x58
 8004a9a:	4bac      	ldr	r3, [pc, #688]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aaa:	4ba9      	ldr	r3, [pc, #676]	; (8004d50 <HAL_RCC_OscConfig+0x57c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d118      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ab6:	4ba6      	ldr	r3, [pc, #664]	; (8004d50 <HAL_RCC_OscConfig+0x57c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4aa5      	ldr	r2, [pc, #660]	; (8004d50 <HAL_RCC_OscConfig+0x57c>)
 8004abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ac2:	f7ff f8db 	bl	8003c7c <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aca:	f7ff f8d7 	bl	8003c7c <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e18d      	b.n	8004df8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004adc:	4b9c      	ldr	r3, [pc, #624]	; (8004d50 <HAL_RCC_OscConfig+0x57c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0f0      	beq.n	8004aca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d108      	bne.n	8004b02 <HAL_RCC_OscConfig+0x32e>
 8004af0:	4b96      	ldr	r3, [pc, #600]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af6:	4a95      	ldr	r2, [pc, #596]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004af8:	f043 0301 	orr.w	r3, r3, #1
 8004afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b00:	e024      	b.n	8004b4c <HAL_RCC_OscConfig+0x378>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2b05      	cmp	r3, #5
 8004b08:	d110      	bne.n	8004b2c <HAL_RCC_OscConfig+0x358>
 8004b0a:	4b90      	ldr	r3, [pc, #576]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b10:	4a8e      	ldr	r2, [pc, #568]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004b12:	f043 0304 	orr.w	r3, r3, #4
 8004b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b1a:	4b8c      	ldr	r3, [pc, #560]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b20:	4a8a      	ldr	r2, [pc, #552]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b2a:	e00f      	b.n	8004b4c <HAL_RCC_OscConfig+0x378>
 8004b2c:	4b87      	ldr	r3, [pc, #540]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b32:	4a86      	ldr	r2, [pc, #536]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004b34:	f023 0301 	bic.w	r3, r3, #1
 8004b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b3c:	4b83      	ldr	r3, [pc, #524]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b42:	4a82      	ldr	r2, [pc, #520]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004b44:	f023 0304 	bic.w	r3, r3, #4
 8004b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d016      	beq.n	8004b82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b54:	f7ff f892 	bl	8003c7c <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b5a:	e00a      	b.n	8004b72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b5c:	f7ff f88e 	bl	8003c7c <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e142      	b.n	8004df8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b72:	4b76      	ldr	r3, [pc, #472]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0ed      	beq.n	8004b5c <HAL_RCC_OscConfig+0x388>
 8004b80:	e015      	b.n	8004bae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b82:	f7ff f87b 	bl	8003c7c <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b88:	e00a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b8a:	f7ff f877 	bl	8003c7c <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e12b      	b.n	8004df8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ba0:	4b6a      	ldr	r3, [pc, #424]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1ed      	bne.n	8004b8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bae:	7ffb      	ldrb	r3, [r7, #31]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d105      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bb4:	4b65      	ldr	r3, [pc, #404]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb8:	4a64      	ldr	r2, [pc, #400]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bbe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0320 	and.w	r3, r3, #32
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d03c      	beq.n	8004c46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01c      	beq.n	8004c0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bd4:	4b5d      	ldr	r3, [pc, #372]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bda:	4a5c      	ldr	r2, [pc, #368]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004bdc:	f043 0301 	orr.w	r3, r3, #1
 8004be0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be4:	f7ff f84a 	bl	8003c7c <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bec:	f7ff f846 	bl	8003c7c <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e0fc      	b.n	8004df8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bfe:	4b53      	ldr	r3, [pc, #332]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0ef      	beq.n	8004bec <HAL_RCC_OscConfig+0x418>
 8004c0c:	e01b      	b.n	8004c46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c0e:	4b4f      	ldr	r3, [pc, #316]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c14:	4a4d      	ldr	r2, [pc, #308]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004c16:	f023 0301 	bic.w	r3, r3, #1
 8004c1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1e:	f7ff f82d 	bl	8003c7c <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c26:	f7ff f829 	bl	8003c7c <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e0df      	b.n	8004df8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c38:	4b44      	ldr	r3, [pc, #272]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1ef      	bne.n	8004c26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 80d3 	beq.w	8004df6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c50:	4b3e      	ldr	r3, [pc, #248]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 030c 	and.w	r3, r3, #12
 8004c58:	2b0c      	cmp	r3, #12
 8004c5a:	f000 808d 	beq.w	8004d78 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d15a      	bne.n	8004d1c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c66:	4b39      	ldr	r3, [pc, #228]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a38      	ldr	r2, [pc, #224]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004c6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c72:	f7ff f803 	bl	8003c7c <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c7a:	f7fe ffff 	bl	8003c7c <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e0b5      	b.n	8004df8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c8c:	4b2f      	ldr	r3, [pc, #188]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1f0      	bne.n	8004c7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c98:	4b2c      	ldr	r3, [pc, #176]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	4b2d      	ldr	r3, [pc, #180]	; (8004d54 <HAL_RCC_OscConfig+0x580>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6a11      	ldr	r1, [r2, #32]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ca8:	3a01      	subs	r2, #1
 8004caa:	0112      	lsls	r2, r2, #4
 8004cac:	4311      	orrs	r1, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004cb2:	0212      	lsls	r2, r2, #8
 8004cb4:	4311      	orrs	r1, r2
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cba:	0852      	lsrs	r2, r2, #1
 8004cbc:	3a01      	subs	r2, #1
 8004cbe:	0552      	lsls	r2, r2, #21
 8004cc0:	4311      	orrs	r1, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cc6:	0852      	lsrs	r2, r2, #1
 8004cc8:	3a01      	subs	r2, #1
 8004cca:	0652      	lsls	r2, r2, #25
 8004ccc:	4311      	orrs	r1, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004cd2:	06d2      	lsls	r2, r2, #27
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	491d      	ldr	r1, [pc, #116]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cdc:	4b1b      	ldr	r3, [pc, #108]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a1a      	ldr	r2, [pc, #104]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ce6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ce8:	4b18      	ldr	r3, [pc, #96]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4a17      	ldr	r2, [pc, #92]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cf2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7fe ffc2 	bl	8003c7c <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cfc:	f7fe ffbe 	bl	8003c7c <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e074      	b.n	8004df8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d0e:	4b0f      	ldr	r3, [pc, #60]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f0      	beq.n	8004cfc <HAL_RCC_OscConfig+0x528>
 8004d1a:	e06c      	b.n	8004df6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a0a      	ldr	r2, [pc, #40]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d26:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004d28:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	4a07      	ldr	r2, [pc, #28]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004d2e:	f023 0303 	bic.w	r3, r3, #3
 8004d32:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4a04      	ldr	r2, [pc, #16]	; (8004d4c <HAL_RCC_OscConfig+0x578>)
 8004d3a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d44:	f7fe ff9a 	bl	8003c7c <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d4a:	e00e      	b.n	8004d6a <HAL_RCC_OscConfig+0x596>
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40007000 	.word	0x40007000
 8004d54:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d58:	f7fe ff90 	bl	8003c7c <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e046      	b.n	8004df8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d6a:	4b25      	ldr	r3, [pc, #148]	; (8004e00 <HAL_RCC_OscConfig+0x62c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f0      	bne.n	8004d58 <HAL_RCC_OscConfig+0x584>
 8004d76:	e03e      	b.n	8004df6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e039      	b.n	8004df8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d84:	4b1e      	ldr	r3, [pc, #120]	; (8004e00 <HAL_RCC_OscConfig+0x62c>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f003 0203 	and.w	r2, r3, #3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d12c      	bne.n	8004df2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	3b01      	subs	r3, #1
 8004da4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d123      	bne.n	8004df2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d11b      	bne.n	8004df2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d113      	bne.n	8004df2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd4:	085b      	lsrs	r3, r3, #1
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d109      	bne.n	8004df2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de8:	085b      	lsrs	r3, r3, #1
 8004dea:	3b01      	subs	r3, #1
 8004dec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d001      	beq.n	8004df6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3720      	adds	r7, #32
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40021000 	.word	0x40021000

08004e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e11e      	b.n	800505a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e1c:	4b91      	ldr	r3, [pc, #580]	; (8005064 <HAL_RCC_ClockConfig+0x260>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d910      	bls.n	8004e4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2a:	4b8e      	ldr	r3, [pc, #568]	; (8005064 <HAL_RCC_ClockConfig+0x260>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f023 020f 	bic.w	r2, r3, #15
 8004e32:	498c      	ldr	r1, [pc, #560]	; (8005064 <HAL_RCC_ClockConfig+0x260>)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3a:	4b8a      	ldr	r3, [pc, #552]	; (8005064 <HAL_RCC_ClockConfig+0x260>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d001      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e106      	b.n	800505a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d073      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	d129      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e60:	4b81      	ldr	r3, [pc, #516]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e0f4      	b.n	800505a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e70:	f000 f9d0 	bl	8005214 <RCC_GetSysClockFreqFromPLLSource>
 8004e74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	4a7c      	ldr	r2, [pc, #496]	; (800506c <HAL_RCC_ClockConfig+0x268>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d93f      	bls.n	8004efe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e7e:	4b7a      	ldr	r3, [pc, #488]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d009      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d033      	beq.n	8004efe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d12f      	bne.n	8004efe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e9e:	4b72      	ldr	r3, [pc, #456]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ea6:	4a70      	ldr	r2, [pc, #448]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8004ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004eae:	2380      	movs	r3, #128	; 0x80
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	e024      	b.n	8004efe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d107      	bne.n	8004ecc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ebc:	4b6a      	ldr	r3, [pc, #424]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d109      	bne.n	8004edc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0c6      	b.n	800505a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ecc:	4b66      	ldr	r3, [pc, #408]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e0be      	b.n	800505a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004edc:	f000 f8ce 	bl	800507c <HAL_RCC_GetSysClockFreq>
 8004ee0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	4a61      	ldr	r2, [pc, #388]	; (800506c <HAL_RCC_ClockConfig+0x268>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d909      	bls.n	8004efe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004eea:	4b5f      	ldr	r3, [pc, #380]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ef2:	4a5d      	ldr	r2, [pc, #372]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8004ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004efa:	2380      	movs	r3, #128	; 0x80
 8004efc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004efe:	4b5a      	ldr	r3, [pc, #360]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f023 0203 	bic.w	r2, r3, #3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	4957      	ldr	r1, [pc, #348]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f10:	f7fe feb4 	bl	8003c7c <HAL_GetTick>
 8004f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f16:	e00a      	b.n	8004f2e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f18:	f7fe feb0 	bl	8003c7c <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e095      	b.n	800505a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2e:	4b4e      	ldr	r3, [pc, #312]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 020c 	and.w	r2, r3, #12
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d1eb      	bne.n	8004f18 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d023      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f58:	4b43      	ldr	r3, [pc, #268]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	4a42      	ldr	r2, [pc, #264]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8004f5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f62:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d007      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f70:	4b3d      	ldr	r3, [pc, #244]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f78:	4a3b      	ldr	r2, [pc, #236]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8004f7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f80:	4b39      	ldr	r3, [pc, #228]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	4936      	ldr	r1, [pc, #216]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	608b      	str	r3, [r1, #8]
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	2b80      	cmp	r3, #128	; 0x80
 8004f98:	d105      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f9a:	4b33      	ldr	r3, [pc, #204]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	4a32      	ldr	r2, [pc, #200]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8004fa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fa4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa6:	4b2f      	ldr	r3, [pc, #188]	; (8005064 <HAL_RCC_ClockConfig+0x260>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d21d      	bcs.n	8004ff0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fb4:	4b2b      	ldr	r3, [pc, #172]	; (8005064 <HAL_RCC_ClockConfig+0x260>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f023 020f 	bic.w	r2, r3, #15
 8004fbc:	4929      	ldr	r1, [pc, #164]	; (8005064 <HAL_RCC_ClockConfig+0x260>)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fc4:	f7fe fe5a 	bl	8003c7c <HAL_GetTick>
 8004fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fca:	e00a      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fcc:	f7fe fe56 	bl	8003c7c <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e03b      	b.n	800505a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe2:	4b20      	ldr	r3, [pc, #128]	; (8005064 <HAL_RCC_ClockConfig+0x260>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 030f 	and.w	r3, r3, #15
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d1ed      	bne.n	8004fcc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d008      	beq.n	800500e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ffc:	4b1a      	ldr	r3, [pc, #104]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4917      	ldr	r1, [pc, #92]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 800500a:	4313      	orrs	r3, r2
 800500c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b00      	cmp	r3, #0
 8005018:	d009      	beq.n	800502e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800501a:	4b13      	ldr	r3, [pc, #76]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	490f      	ldr	r1, [pc, #60]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 800502a:	4313      	orrs	r3, r2
 800502c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800502e:	f000 f825 	bl	800507c <HAL_RCC_GetSysClockFreq>
 8005032:	4602      	mov	r2, r0
 8005034:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <HAL_RCC_ClockConfig+0x264>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	091b      	lsrs	r3, r3, #4
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	490c      	ldr	r1, [pc, #48]	; (8005070 <HAL_RCC_ClockConfig+0x26c>)
 8005040:	5ccb      	ldrb	r3, [r1, r3]
 8005042:	f003 031f 	and.w	r3, r3, #31
 8005046:	fa22 f303 	lsr.w	r3, r2, r3
 800504a:	4a0a      	ldr	r2, [pc, #40]	; (8005074 <HAL_RCC_ClockConfig+0x270>)
 800504c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800504e:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <HAL_RCC_ClockConfig+0x274>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f7fe fca8 	bl	80039a8 <HAL_InitTick>
 8005058:	4603      	mov	r3, r0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	40022000 	.word	0x40022000
 8005068:	40021000 	.word	0x40021000
 800506c:	04c4b400 	.word	0x04c4b400
 8005070:	0800b21c 	.word	0x0800b21c
 8005074:	20000008 	.word	0x20000008
 8005078:	2000000c 	.word	0x2000000c

0800507c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005082:	4b2c      	ldr	r3, [pc, #176]	; (8005134 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 030c 	and.w	r3, r3, #12
 800508a:	2b04      	cmp	r3, #4
 800508c:	d102      	bne.n	8005094 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800508e:	4b2a      	ldr	r3, [pc, #168]	; (8005138 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	e047      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005094:	4b27      	ldr	r3, [pc, #156]	; (8005134 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 030c 	and.w	r3, r3, #12
 800509c:	2b08      	cmp	r3, #8
 800509e:	d102      	bne.n	80050a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050a0:	4b26      	ldr	r3, [pc, #152]	; (800513c <HAL_RCC_GetSysClockFreq+0xc0>)
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	e03e      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80050a6:	4b23      	ldr	r3, [pc, #140]	; (8005134 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 030c 	and.w	r3, r3, #12
 80050ae:	2b0c      	cmp	r3, #12
 80050b0:	d136      	bne.n	8005120 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050b2:	4b20      	ldr	r3, [pc, #128]	; (8005134 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050bc:	4b1d      	ldr	r3, [pc, #116]	; (8005134 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	091b      	lsrs	r3, r3, #4
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	3301      	adds	r3, #1
 80050c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d10c      	bne.n	80050ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050d0:	4a1a      	ldr	r2, [pc, #104]	; (800513c <HAL_RCC_GetSysClockFreq+0xc0>)
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	4a16      	ldr	r2, [pc, #88]	; (8005134 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050da:	68d2      	ldr	r2, [r2, #12]
 80050dc:	0a12      	lsrs	r2, r2, #8
 80050de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050e2:	fb02 f303 	mul.w	r3, r2, r3
 80050e6:	617b      	str	r3, [r7, #20]
      break;
 80050e8:	e00c      	b.n	8005104 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050ea:	4a13      	ldr	r2, [pc, #76]	; (8005138 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f2:	4a10      	ldr	r2, [pc, #64]	; (8005134 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050f4:	68d2      	ldr	r2, [r2, #12]
 80050f6:	0a12      	lsrs	r2, r2, #8
 80050f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050fc:	fb02 f303 	mul.w	r3, r2, r3
 8005100:	617b      	str	r3, [r7, #20]
      break;
 8005102:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005104:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	0e5b      	lsrs	r3, r3, #25
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	3301      	adds	r3, #1
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	fbb2 f3f3 	udiv	r3, r2, r3
 800511c:	613b      	str	r3, [r7, #16]
 800511e:	e001      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005124:	693b      	ldr	r3, [r7, #16]
}
 8005126:	4618      	mov	r0, r3
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40021000 	.word	0x40021000
 8005138:	00f42400 	.word	0x00f42400
 800513c:	007a1200 	.word	0x007a1200

08005140 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005144:	4b03      	ldr	r3, [pc, #12]	; (8005154 <HAL_RCC_GetHCLKFreq+0x14>)
 8005146:	681b      	ldr	r3, [r3, #0]
}
 8005148:	4618      	mov	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	20000008 	.word	0x20000008

08005158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800515c:	f7ff fff0 	bl	8005140 <HAL_RCC_GetHCLKFreq>
 8005160:	4602      	mov	r2, r0
 8005162:	4b06      	ldr	r3, [pc, #24]	; (800517c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	0a1b      	lsrs	r3, r3, #8
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	4904      	ldr	r1, [pc, #16]	; (8005180 <HAL_RCC_GetPCLK1Freq+0x28>)
 800516e:	5ccb      	ldrb	r3, [r1, r3]
 8005170:	f003 031f 	and.w	r3, r3, #31
 8005174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005178:	4618      	mov	r0, r3
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40021000 	.word	0x40021000
 8005180:	0800b22c 	.word	0x0800b22c

08005184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005188:	f7ff ffda 	bl	8005140 <HAL_RCC_GetHCLKFreq>
 800518c:	4602      	mov	r2, r0
 800518e:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	0adb      	lsrs	r3, r3, #11
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	4904      	ldr	r1, [pc, #16]	; (80051ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800519a:	5ccb      	ldrb	r3, [r1, r3]
 800519c:	f003 031f 	and.w	r3, r3, #31
 80051a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	40021000 	.word	0x40021000
 80051ac:	0800b22c 	.word	0x0800b22c

080051b0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	220f      	movs	r2, #15
 80051be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80051c0:	4b12      	ldr	r3, [pc, #72]	; (800520c <HAL_RCC_GetClockConfig+0x5c>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 0203 	and.w	r2, r3, #3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80051cc:	4b0f      	ldr	r3, [pc, #60]	; (800520c <HAL_RCC_GetClockConfig+0x5c>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80051d8:	4b0c      	ldr	r3, [pc, #48]	; (800520c <HAL_RCC_GetClockConfig+0x5c>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80051e4:	4b09      	ldr	r3, [pc, #36]	; (800520c <HAL_RCC_GetClockConfig+0x5c>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	08db      	lsrs	r3, r3, #3
 80051ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80051f2:	4b07      	ldr	r3, [pc, #28]	; (8005210 <HAL_RCC_GetClockConfig+0x60>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 020f 	and.w	r2, r3, #15
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	601a      	str	r2, [r3, #0]
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40021000 	.word	0x40021000
 8005210:	40022000 	.word	0x40022000

08005214 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800521a:	4b1e      	ldr	r3, [pc, #120]	; (8005294 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005224:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	3301      	adds	r3, #1
 8005230:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2b03      	cmp	r3, #3
 8005236:	d10c      	bne.n	8005252 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005238:	4a17      	ldr	r2, [pc, #92]	; (8005298 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005240:	4a14      	ldr	r2, [pc, #80]	; (8005294 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005242:	68d2      	ldr	r2, [r2, #12]
 8005244:	0a12      	lsrs	r2, r2, #8
 8005246:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800524a:	fb02 f303 	mul.w	r3, r2, r3
 800524e:	617b      	str	r3, [r7, #20]
    break;
 8005250:	e00c      	b.n	800526c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005252:	4a12      	ldr	r2, [pc, #72]	; (800529c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	fbb2 f3f3 	udiv	r3, r2, r3
 800525a:	4a0e      	ldr	r2, [pc, #56]	; (8005294 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800525c:	68d2      	ldr	r2, [r2, #12]
 800525e:	0a12      	lsrs	r2, r2, #8
 8005260:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005264:	fb02 f303 	mul.w	r3, r2, r3
 8005268:	617b      	str	r3, [r7, #20]
    break;
 800526a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800526c:	4b09      	ldr	r3, [pc, #36]	; (8005294 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	0e5b      	lsrs	r3, r3, #25
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	3301      	adds	r3, #1
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	fbb2 f3f3 	udiv	r3, r2, r3
 8005284:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005286:	687b      	ldr	r3, [r7, #4]
}
 8005288:	4618      	mov	r0, r3
 800528a:	371c      	adds	r7, #28
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	40021000 	.word	0x40021000
 8005298:	007a1200 	.word	0x007a1200
 800529c:	00f42400 	.word	0x00f42400

080052a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052a8:	2300      	movs	r3, #0
 80052aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052ac:	2300      	movs	r3, #0
 80052ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 8098 	beq.w	80053ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052be:	2300      	movs	r3, #0
 80052c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052c2:	4b43      	ldr	r3, [pc, #268]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10d      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ce:	4b40      	ldr	r3, [pc, #256]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d2:	4a3f      	ldr	r2, [pc, #252]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d8:	6593      	str	r3, [r2, #88]	; 0x58
 80052da:	4b3d      	ldr	r3, [pc, #244]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e2:	60bb      	str	r3, [r7, #8]
 80052e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e6:	2301      	movs	r3, #1
 80052e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052ea:	4b3a      	ldr	r3, [pc, #232]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a39      	ldr	r2, [pc, #228]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052f6:	f7fe fcc1 	bl	8003c7c <HAL_GetTick>
 80052fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052fc:	e009      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052fe:	f7fe fcbd 	bl	8003c7c <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d902      	bls.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	74fb      	strb	r3, [r7, #19]
        break;
 8005310:	e005      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005312:	4b30      	ldr	r3, [pc, #192]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0ef      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800531e:	7cfb      	ldrb	r3, [r7, #19]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d159      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005324:	4b2a      	ldr	r3, [pc, #168]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d01e      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	429a      	cmp	r2, r3
 800533e:	d019      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005340:	4b23      	ldr	r3, [pc, #140]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800534c:	4b20      	ldr	r3, [pc, #128]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005352:	4a1f      	ldr	r2, [pc, #124]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800535c:	4b1c      	ldr	r3, [pc, #112]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005362:	4a1b      	ldr	r2, [pc, #108]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800536c:	4a18      	ldr	r2, [pc, #96]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d016      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537e:	f7fe fc7d 	bl	8003c7c <HAL_GetTick>
 8005382:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005384:	e00b      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005386:	f7fe fc79 	bl	8003c7c <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	f241 3288 	movw	r2, #5000	; 0x1388
 8005394:	4293      	cmp	r3, r2
 8005396:	d902      	bls.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	74fb      	strb	r3, [r7, #19]
            break;
 800539c:	e006      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800539e:	4b0c      	ldr	r3, [pc, #48]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0ec      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80053ac:	7cfb      	ldrb	r3, [r7, #19]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10b      	bne.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053b2:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	4903      	ldr	r1, [pc, #12]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053c8:	e008      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053ca:	7cfb      	ldrb	r3, [r7, #19]
 80053cc:	74bb      	strb	r3, [r7, #18]
 80053ce:	e005      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80053d0:	40021000 	.word	0x40021000
 80053d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d8:	7cfb      	ldrb	r3, [r7, #19]
 80053da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053dc:	7c7b      	ldrb	r3, [r7, #17]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d105      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053e2:	4ba6      	ldr	r3, [pc, #664]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e6:	4aa5      	ldr	r2, [pc, #660]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053fa:	4ba0      	ldr	r3, [pc, #640]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005400:	f023 0203 	bic.w	r2, r3, #3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	499c      	ldr	r1, [pc, #624]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800541c:	4b97      	ldr	r3, [pc, #604]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005422:	f023 020c 	bic.w	r2, r3, #12
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	4994      	ldr	r1, [pc, #592]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0304 	and.w	r3, r3, #4
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800543e:	4b8f      	ldr	r3, [pc, #572]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005444:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	498b      	ldr	r1, [pc, #556]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0308 	and.w	r3, r3, #8
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005460:	4b86      	ldr	r3, [pc, #536]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005466:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	4983      	ldr	r1, [pc, #524]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0320 	and.w	r3, r3, #32
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005482:	4b7e      	ldr	r3, [pc, #504]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005488:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	497a      	ldr	r1, [pc, #488]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054a4:	4b75      	ldr	r3, [pc, #468]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	4972      	ldr	r1, [pc, #456]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054c6:	4b6d      	ldr	r3, [pc, #436]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	4969      	ldr	r1, [pc, #420]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054e8:	4b64      	ldr	r3, [pc, #400]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	4961      	ldr	r1, [pc, #388]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800550a:	4b5c      	ldr	r3, [pc, #368]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005510:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	4958      	ldr	r1, [pc, #352]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005528:	2b00      	cmp	r3, #0
 800552a:	d015      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800552c:	4b53      	ldr	r3, [pc, #332]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005532:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	4950      	ldr	r1, [pc, #320]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800554a:	d105      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800554c:	4b4b      	ldr	r3, [pc, #300]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4a4a      	ldr	r2, [pc, #296]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005556:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005560:	2b00      	cmp	r3, #0
 8005562:	d015      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005564:	4b45      	ldr	r3, [pc, #276]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	4942      	ldr	r1, [pc, #264]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005582:	d105      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005584:	4b3d      	ldr	r3, [pc, #244]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	4a3c      	ldr	r2, [pc, #240]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800558a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800558e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d015      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800559c:	4b37      	ldr	r3, [pc, #220]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800559e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055aa:	4934      	ldr	r1, [pc, #208]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055ba:	d105      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055bc:	4b2f      	ldr	r3, [pc, #188]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	4a2e      	ldr	r2, [pc, #184]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055c6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d015      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055d4:	4b29      	ldr	r3, [pc, #164]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e2:	4926      	ldr	r1, [pc, #152]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055f2:	d105      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055f4:	4b21      	ldr	r3, [pc, #132]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	4a20      	ldr	r2, [pc, #128]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d015      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800560c:	4b1b      	ldr	r3, [pc, #108]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005612:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	4918      	ldr	r1, [pc, #96]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800562a:	d105      	bne.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800562c:	4b13      	ldr	r3, [pc, #76]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	4a12      	ldr	r2, [pc, #72]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005636:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d015      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005644:	4b0d      	ldr	r3, [pc, #52]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005652:	490a      	ldr	r1, [pc, #40]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005654:	4313      	orrs	r3, r2
 8005656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005662:	d105      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005664:	4b05      	ldr	r3, [pc, #20]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	4a04      	ldr	r2, [pc, #16]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800566a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800566e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005670:	7cbb      	ldrb	r3, [r7, #18]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	40021000 	.word	0x40021000

08005680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e049      	b.n	8005726 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d106      	bne.n	80056ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7fe f81a 	bl	80036e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3304      	adds	r3, #4
 80056bc:	4619      	mov	r1, r3
 80056be:	4610      	mov	r0, r2
 80056c0:	f000 fe9a 	bl	80063f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b01      	cmp	r3, #1
 8005742:	d001      	beq.n	8005748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e04a      	b.n	80057de <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0201 	orr.w	r2, r2, #1
 800575e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a21      	ldr	r2, [pc, #132]	; (80057ec <HAL_TIM_Base_Start_IT+0xbc>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d018      	beq.n	800579c <HAL_TIM_Base_Start_IT+0x6c>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005772:	d013      	beq.n	800579c <HAL_TIM_Base_Start_IT+0x6c>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a1d      	ldr	r2, [pc, #116]	; (80057f0 <HAL_TIM_Base_Start_IT+0xc0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00e      	beq.n	800579c <HAL_TIM_Base_Start_IT+0x6c>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a1c      	ldr	r2, [pc, #112]	; (80057f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d009      	beq.n	800579c <HAL_TIM_Base_Start_IT+0x6c>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1a      	ldr	r2, [pc, #104]	; (80057f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d004      	beq.n	800579c <HAL_TIM_Base_Start_IT+0x6c>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a19      	ldr	r2, [pc, #100]	; (80057fc <HAL_TIM_Base_Start_IT+0xcc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d115      	bne.n	80057c8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	4b17      	ldr	r3, [pc, #92]	; (8005800 <HAL_TIM_Base_Start_IT+0xd0>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b06      	cmp	r3, #6
 80057ac:	d015      	beq.n	80057da <HAL_TIM_Base_Start_IT+0xaa>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b4:	d011      	beq.n	80057da <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f042 0201 	orr.w	r2, r2, #1
 80057c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c6:	e008      	b.n	80057da <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0201 	orr.w	r2, r2, #1
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	e000      	b.n	80057dc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	40012c00 	.word	0x40012c00
 80057f0:	40000400 	.word	0x40000400
 80057f4:	40000800 	.word	0x40000800
 80057f8:	40013400 	.word	0x40013400
 80057fc:	40014000 	.word	0x40014000
 8005800:	00010007 	.word	0x00010007

08005804 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e049      	b.n	80058aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d106      	bne.n	8005830 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f841 	bl	80058b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3304      	adds	r3, #4
 8005840:	4619      	mov	r1, r3
 8005842:	4610      	mov	r0, r2
 8005844:	f000 fdd8 	bl	80063f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
	...

080058c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d109      	bne.n	80058ec <HAL_TIM_PWM_Start+0x24>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	bf14      	ite	ne
 80058e4:	2301      	movne	r3, #1
 80058e6:	2300      	moveq	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	e03c      	b.n	8005966 <HAL_TIM_PWM_Start+0x9e>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d109      	bne.n	8005906 <HAL_TIM_PWM_Start+0x3e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	bf14      	ite	ne
 80058fe:	2301      	movne	r3, #1
 8005900:	2300      	moveq	r3, #0
 8005902:	b2db      	uxtb	r3, r3
 8005904:	e02f      	b.n	8005966 <HAL_TIM_PWM_Start+0x9e>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b08      	cmp	r3, #8
 800590a:	d109      	bne.n	8005920 <HAL_TIM_PWM_Start+0x58>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b01      	cmp	r3, #1
 8005916:	bf14      	ite	ne
 8005918:	2301      	movne	r3, #1
 800591a:	2300      	moveq	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	e022      	b.n	8005966 <HAL_TIM_PWM_Start+0x9e>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b0c      	cmp	r3, #12
 8005924:	d109      	bne.n	800593a <HAL_TIM_PWM_Start+0x72>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b01      	cmp	r3, #1
 8005930:	bf14      	ite	ne
 8005932:	2301      	movne	r3, #1
 8005934:	2300      	moveq	r3, #0
 8005936:	b2db      	uxtb	r3, r3
 8005938:	e015      	b.n	8005966 <HAL_TIM_PWM_Start+0x9e>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b10      	cmp	r3, #16
 800593e:	d109      	bne.n	8005954 <HAL_TIM_PWM_Start+0x8c>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b01      	cmp	r3, #1
 800594a:	bf14      	ite	ne
 800594c:	2301      	movne	r3, #1
 800594e:	2300      	moveq	r3, #0
 8005950:	b2db      	uxtb	r3, r3
 8005952:	e008      	b.n	8005966 <HAL_TIM_PWM_Start+0x9e>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	bf14      	ite	ne
 8005960:	2301      	movne	r3, #1
 8005962:	2300      	moveq	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e097      	b.n	8005a9e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <HAL_TIM_PWM_Start+0xb6>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800597c:	e023      	b.n	80059c6 <HAL_TIM_PWM_Start+0xfe>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b04      	cmp	r3, #4
 8005982:	d104      	bne.n	800598e <HAL_TIM_PWM_Start+0xc6>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800598c:	e01b      	b.n	80059c6 <HAL_TIM_PWM_Start+0xfe>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b08      	cmp	r3, #8
 8005992:	d104      	bne.n	800599e <HAL_TIM_PWM_Start+0xd6>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800599c:	e013      	b.n	80059c6 <HAL_TIM_PWM_Start+0xfe>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b0c      	cmp	r3, #12
 80059a2:	d104      	bne.n	80059ae <HAL_TIM_PWM_Start+0xe6>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059ac:	e00b      	b.n	80059c6 <HAL_TIM_PWM_Start+0xfe>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b10      	cmp	r3, #16
 80059b2:	d104      	bne.n	80059be <HAL_TIM_PWM_Start+0xf6>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059bc:	e003      	b.n	80059c6 <HAL_TIM_PWM_Start+0xfe>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2202      	movs	r2, #2
 80059c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2201      	movs	r2, #1
 80059cc:	6839      	ldr	r1, [r7, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f001 fa52 	bl	8006e78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a33      	ldr	r2, [pc, #204]	; (8005aa8 <HAL_TIM_PWM_Start+0x1e0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d013      	beq.n	8005a06 <HAL_TIM_PWM_Start+0x13e>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a32      	ldr	r2, [pc, #200]	; (8005aac <HAL_TIM_PWM_Start+0x1e4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00e      	beq.n	8005a06 <HAL_TIM_PWM_Start+0x13e>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a30      	ldr	r2, [pc, #192]	; (8005ab0 <HAL_TIM_PWM_Start+0x1e8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d009      	beq.n	8005a06 <HAL_TIM_PWM_Start+0x13e>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a2f      	ldr	r2, [pc, #188]	; (8005ab4 <HAL_TIM_PWM_Start+0x1ec>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d004      	beq.n	8005a06 <HAL_TIM_PWM_Start+0x13e>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a2d      	ldr	r2, [pc, #180]	; (8005ab8 <HAL_TIM_PWM_Start+0x1f0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d101      	bne.n	8005a0a <HAL_TIM_PWM_Start+0x142>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <HAL_TIM_PWM_Start+0x144>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d007      	beq.n	8005a20 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a20      	ldr	r2, [pc, #128]	; (8005aa8 <HAL_TIM_PWM_Start+0x1e0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d018      	beq.n	8005a5c <HAL_TIM_PWM_Start+0x194>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a32:	d013      	beq.n	8005a5c <HAL_TIM_PWM_Start+0x194>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a20      	ldr	r2, [pc, #128]	; (8005abc <HAL_TIM_PWM_Start+0x1f4>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00e      	beq.n	8005a5c <HAL_TIM_PWM_Start+0x194>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1f      	ldr	r2, [pc, #124]	; (8005ac0 <HAL_TIM_PWM_Start+0x1f8>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d009      	beq.n	8005a5c <HAL_TIM_PWM_Start+0x194>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a17      	ldr	r2, [pc, #92]	; (8005aac <HAL_TIM_PWM_Start+0x1e4>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d004      	beq.n	8005a5c <HAL_TIM_PWM_Start+0x194>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a16      	ldr	r2, [pc, #88]	; (8005ab0 <HAL_TIM_PWM_Start+0x1e8>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d115      	bne.n	8005a88 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	4b18      	ldr	r3, [pc, #96]	; (8005ac4 <HAL_TIM_PWM_Start+0x1fc>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b06      	cmp	r3, #6
 8005a6c:	d015      	beq.n	8005a9a <HAL_TIM_PWM_Start+0x1d2>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a74:	d011      	beq.n	8005a9a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0201 	orr.w	r2, r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a86:	e008      	b.n	8005a9a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0201 	orr.w	r2, r2, #1
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	e000      	b.n	8005a9c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	40012c00 	.word	0x40012c00
 8005aac:	40013400 	.word	0x40013400
 8005ab0:	40014000 	.word	0x40014000
 8005ab4:	40014400 	.word	0x40014400
 8005ab8:	40014800 	.word	0x40014800
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	00010007 	.word	0x00010007

08005ac8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e049      	b.n	8005b6e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d106      	bne.n	8005af4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7fd fe14 	bl	800371c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3304      	adds	r3, #4
 8005b04:	4619      	mov	r1, r3
 8005b06:	4610      	mov	r0, r2
 8005b08:	f000 fc76 	bl	80063f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b082      	sub	sp, #8
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d122      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d11b      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f06f 0202 	mvn.w	r2, #2
 8005ba2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	f003 0303 	and.w	r3, r3, #3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fbff 	bl	80063bc <HAL_TIM_IC_CaptureCallback>
 8005bbe:	e005      	b.n	8005bcc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 fbf1 	bl	80063a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fc02 	bl	80063d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d122      	bne.n	8005c26 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f003 0304 	and.w	r3, r3, #4
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d11b      	bne.n	8005c26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f06f 0204 	mvn.w	r2, #4
 8005bf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fbd5 	bl	80063bc <HAL_TIM_IC_CaptureCallback>
 8005c12:	e005      	b.n	8005c20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fbc7 	bl	80063a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fbd8 	bl	80063d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d122      	bne.n	8005c7a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f003 0308 	and.w	r3, r3, #8
 8005c3e:	2b08      	cmp	r3, #8
 8005c40:	d11b      	bne.n	8005c7a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f06f 0208 	mvn.w	r2, #8
 8005c4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2204      	movs	r2, #4
 8005c50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	f003 0303 	and.w	r3, r3, #3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fbab 	bl	80063bc <HAL_TIM_IC_CaptureCallback>
 8005c66:	e005      	b.n	8005c74 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fb9d 	bl	80063a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fbae 	bl	80063d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	2b10      	cmp	r3, #16
 8005c86:	d122      	bne.n	8005cce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f003 0310 	and.w	r3, r3, #16
 8005c92:	2b10      	cmp	r3, #16
 8005c94:	d11b      	bne.n	8005cce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f06f 0210 	mvn.w	r2, #16
 8005c9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2208      	movs	r2, #8
 8005ca4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fb81 	bl	80063bc <HAL_TIM_IC_CaptureCallback>
 8005cba:	e005      	b.n	8005cc8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fb73 	bl	80063a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fb84 	bl	80063d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d10e      	bne.n	8005cfa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d107      	bne.n	8005cfa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f06f 0201 	mvn.w	r2, #1
 8005cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7fb fd5d 	bl	80017b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d04:	2b80      	cmp	r3, #128	; 0x80
 8005d06:	d10e      	bne.n	8005d26 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d12:	2b80      	cmp	r3, #128	; 0x80
 8005d14:	d107      	bne.n	8005d26 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f001 f9fb 	bl	800711c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d34:	d10e      	bne.n	8005d54 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d40:	2b80      	cmp	r3, #128	; 0x80
 8005d42:	d107      	bne.n	8005d54 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f001 f9ee 	bl	8007130 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5e:	2b40      	cmp	r3, #64	; 0x40
 8005d60:	d10e      	bne.n	8005d80 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b40      	cmp	r3, #64	; 0x40
 8005d6e:	d107      	bne.n	8005d80 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fb32 	bl	80063e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	f003 0320 	and.w	r3, r3, #32
 8005d8a:	2b20      	cmp	r3, #32
 8005d8c:	d10e      	bne.n	8005dac <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f003 0320 	and.w	r3, r3, #32
 8005d98:	2b20      	cmp	r3, #32
 8005d9a:	d107      	bne.n	8005dac <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f06f 0220 	mvn.w	r2, #32
 8005da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f001 f9ae 	bl	8007108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dba:	d10f      	bne.n	8005ddc <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dca:	d107      	bne.n	8005ddc <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f001 f9b4 	bl	8007144 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005de6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dea:	d10f      	bne.n	8005e0c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005df6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dfa:	d107      	bne.n	8005e0c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 f9a6 	bl	8007158 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e1a:	d10f      	bne.n	8005e3c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e2a:	d107      	bne.n	8005e3c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f001 f998 	bl	800716c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e4a:	d10f      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e5a:	d107      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f001 f98a 	bl	8007180 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e6c:	bf00      	nop
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_TIM_IC_ConfigChannel+0x1a>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e082      	b.n	8005f94 <HAL_TIM_IC_ConfigChannel+0x120>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d11b      	bne.n	8005ed4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	6819      	ldr	r1, [r3, #0]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f000 fe2a 	bl	8006b04 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699a      	ldr	r2, [r3, #24]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 020c 	bic.w	r2, r2, #12
 8005ebe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6999      	ldr	r1, [r3, #24]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	619a      	str	r2, [r3, #24]
 8005ed2:	e05a      	b.n	8005f8a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d11c      	bne.n	8005f14 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6818      	ldr	r0, [r3, #0]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	6819      	ldr	r1, [r3, #0]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f000 fea2 	bl	8006c32 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	699a      	ldr	r2, [r3, #24]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005efc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6999      	ldr	r1, [r3, #24]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	021a      	lsls	r2, r3, #8
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	619a      	str	r2, [r3, #24]
 8005f12:	e03a      	b.n	8005f8a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b08      	cmp	r3, #8
 8005f18:	d11b      	bne.n	8005f52 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6818      	ldr	r0, [r3, #0]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	6819      	ldr	r1, [r3, #0]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f000 feef 	bl	8006d0c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69da      	ldr	r2, [r3, #28]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 020c 	bic.w	r2, r2, #12
 8005f3c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69d9      	ldr	r1, [r3, #28]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	61da      	str	r2, [r3, #28]
 8005f50:	e01b      	b.n	8005f8a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	6819      	ldr	r1, [r3, #0]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f000 ff0f 	bl	8006d84 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69da      	ldr	r2, [r3, #28]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f74:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69d9      	ldr	r1, [r3, #28]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	021a      	lsls	r2, r3, #8
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d101      	bne.n	8005fb6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	e0fd      	b.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b14      	cmp	r3, #20
 8005fc2:	f200 80f0 	bhi.w	80061a6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005fc6:	a201      	add	r2, pc, #4	; (adr r2, 8005fcc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	08006021 	.word	0x08006021
 8005fd0:	080061a7 	.word	0x080061a7
 8005fd4:	080061a7 	.word	0x080061a7
 8005fd8:	080061a7 	.word	0x080061a7
 8005fdc:	08006061 	.word	0x08006061
 8005fe0:	080061a7 	.word	0x080061a7
 8005fe4:	080061a7 	.word	0x080061a7
 8005fe8:	080061a7 	.word	0x080061a7
 8005fec:	080060a3 	.word	0x080060a3
 8005ff0:	080061a7 	.word	0x080061a7
 8005ff4:	080061a7 	.word	0x080061a7
 8005ff8:	080061a7 	.word	0x080061a7
 8005ffc:	080060e3 	.word	0x080060e3
 8006000:	080061a7 	.word	0x080061a7
 8006004:	080061a7 	.word	0x080061a7
 8006008:	080061a7 	.word	0x080061a7
 800600c:	08006125 	.word	0x08006125
 8006010:	080061a7 	.word	0x080061a7
 8006014:	080061a7 	.word	0x080061a7
 8006018:	080061a7 	.word	0x080061a7
 800601c:	08006165 	.word	0x08006165
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68b9      	ldr	r1, [r7, #8]
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fa76 	bl	8006518 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699a      	ldr	r2, [r3, #24]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0208 	orr.w	r2, r2, #8
 800603a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699a      	ldr	r2, [r3, #24]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0204 	bic.w	r2, r2, #4
 800604a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6999      	ldr	r1, [r3, #24]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	691a      	ldr	r2, [r3, #16]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	619a      	str	r2, [r3, #24]
      break;
 800605e:	e0a3      	b.n	80061a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	4618      	mov	r0, r3
 8006068:	f000 fae6 	bl	8006638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800607a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699a      	ldr	r2, [r3, #24]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800608a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6999      	ldr	r1, [r3, #24]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	021a      	lsls	r2, r3, #8
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	619a      	str	r2, [r3, #24]
      break;
 80060a0:	e082      	b.n	80061a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68b9      	ldr	r1, [r7, #8]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fb4f 	bl	800674c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69da      	ldr	r2, [r3, #28]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f042 0208 	orr.w	r2, r2, #8
 80060bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69da      	ldr	r2, [r3, #28]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0204 	bic.w	r2, r2, #4
 80060cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69d9      	ldr	r1, [r3, #28]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	691a      	ldr	r2, [r3, #16]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	61da      	str	r2, [r3, #28]
      break;
 80060e0:	e062      	b.n	80061a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68b9      	ldr	r1, [r7, #8]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 fbb7 	bl	800685c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	69da      	ldr	r2, [r3, #28]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69da      	ldr	r2, [r3, #28]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800610c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69d9      	ldr	r1, [r3, #28]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	021a      	lsls	r2, r3, #8
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	61da      	str	r2, [r3, #28]
      break;
 8006122:	e041      	b.n	80061a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68b9      	ldr	r1, [r7, #8]
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fc20 	bl	8006970 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 0208 	orr.w	r2, r2, #8
 800613e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0204 	bic.w	r2, r2, #4
 800614e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	691a      	ldr	r2, [r3, #16]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006162:	e021      	b.n	80061a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68b9      	ldr	r1, [r7, #8]
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fc64 	bl	8006a38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800617e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800618e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	021a      	lsls	r2, r3, #8
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80061a4:	e000      	b.n	80061a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80061a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop

080061bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_TIM_ConfigClockSource+0x18>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e0dd      	b.n	8006390 <HAL_TIM_ConfigClockSource+0x1d4>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80061f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a62      	ldr	r2, [pc, #392]	; (8006398 <HAL_TIM_ConfigClockSource+0x1dc>)
 800620e:	4293      	cmp	r3, r2
 8006210:	f000 80a9 	beq.w	8006366 <HAL_TIM_ConfigClockSource+0x1aa>
 8006214:	4a60      	ldr	r2, [pc, #384]	; (8006398 <HAL_TIM_ConfigClockSource+0x1dc>)
 8006216:	4293      	cmp	r3, r2
 8006218:	f200 80ae 	bhi.w	8006378 <HAL_TIM_ConfigClockSource+0x1bc>
 800621c:	4a5f      	ldr	r2, [pc, #380]	; (800639c <HAL_TIM_ConfigClockSource+0x1e0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	f000 80a1 	beq.w	8006366 <HAL_TIM_ConfigClockSource+0x1aa>
 8006224:	4a5d      	ldr	r2, [pc, #372]	; (800639c <HAL_TIM_ConfigClockSource+0x1e0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	f200 80a6 	bhi.w	8006378 <HAL_TIM_ConfigClockSource+0x1bc>
 800622c:	4a5c      	ldr	r2, [pc, #368]	; (80063a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	f000 8099 	beq.w	8006366 <HAL_TIM_ConfigClockSource+0x1aa>
 8006234:	4a5a      	ldr	r2, [pc, #360]	; (80063a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	f200 809e 	bhi.w	8006378 <HAL_TIM_ConfigClockSource+0x1bc>
 800623c:	4a59      	ldr	r2, [pc, #356]	; (80063a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	f000 8091 	beq.w	8006366 <HAL_TIM_ConfigClockSource+0x1aa>
 8006244:	4a57      	ldr	r2, [pc, #348]	; (80063a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	f200 8096 	bhi.w	8006378 <HAL_TIM_ConfigClockSource+0x1bc>
 800624c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006250:	f000 8089 	beq.w	8006366 <HAL_TIM_ConfigClockSource+0x1aa>
 8006254:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006258:	f200 808e 	bhi.w	8006378 <HAL_TIM_ConfigClockSource+0x1bc>
 800625c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006260:	d03e      	beq.n	80062e0 <HAL_TIM_ConfigClockSource+0x124>
 8006262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006266:	f200 8087 	bhi.w	8006378 <HAL_TIM_ConfigClockSource+0x1bc>
 800626a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800626e:	f000 8085 	beq.w	800637c <HAL_TIM_ConfigClockSource+0x1c0>
 8006272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006276:	d87f      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x1bc>
 8006278:	2b70      	cmp	r3, #112	; 0x70
 800627a:	d01a      	beq.n	80062b2 <HAL_TIM_ConfigClockSource+0xf6>
 800627c:	2b70      	cmp	r3, #112	; 0x70
 800627e:	d87b      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x1bc>
 8006280:	2b60      	cmp	r3, #96	; 0x60
 8006282:	d050      	beq.n	8006326 <HAL_TIM_ConfigClockSource+0x16a>
 8006284:	2b60      	cmp	r3, #96	; 0x60
 8006286:	d877      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x1bc>
 8006288:	2b50      	cmp	r3, #80	; 0x50
 800628a:	d03c      	beq.n	8006306 <HAL_TIM_ConfigClockSource+0x14a>
 800628c:	2b50      	cmp	r3, #80	; 0x50
 800628e:	d873      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x1bc>
 8006290:	2b40      	cmp	r3, #64	; 0x40
 8006292:	d058      	beq.n	8006346 <HAL_TIM_ConfigClockSource+0x18a>
 8006294:	2b40      	cmp	r3, #64	; 0x40
 8006296:	d86f      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x1bc>
 8006298:	2b30      	cmp	r3, #48	; 0x30
 800629a:	d064      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0x1aa>
 800629c:	2b30      	cmp	r3, #48	; 0x30
 800629e:	d86b      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x1bc>
 80062a0:	2b20      	cmp	r3, #32
 80062a2:	d060      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0x1aa>
 80062a4:	2b20      	cmp	r3, #32
 80062a6:	d867      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x1bc>
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d05c      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0x1aa>
 80062ac:	2b10      	cmp	r3, #16
 80062ae:	d05a      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80062b0:	e062      	b.n	8006378 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6818      	ldr	r0, [r3, #0]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	6899      	ldr	r1, [r3, #8]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	f000 fdb9 	bl	8006e38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	609a      	str	r2, [r3, #8]
      break;
 80062de:	e04e      	b.n	800637e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6818      	ldr	r0, [r3, #0]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	6899      	ldr	r1, [r3, #8]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f000 fda2 	bl	8006e38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006302:	609a      	str	r2, [r3, #8]
      break;
 8006304:	e03b      	b.n	800637e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	6859      	ldr	r1, [r3, #4]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	461a      	mov	r2, r3
 8006314:	f000 fc5e 	bl	8006bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2150      	movs	r1, #80	; 0x50
 800631e:	4618      	mov	r0, r3
 8006320:	f000 fd6d 	bl	8006dfe <TIM_ITRx_SetConfig>
      break;
 8006324:	e02b      	b.n	800637e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6818      	ldr	r0, [r3, #0]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	6859      	ldr	r1, [r3, #4]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	461a      	mov	r2, r3
 8006334:	f000 fcba 	bl	8006cac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2160      	movs	r1, #96	; 0x60
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fd5d 	bl	8006dfe <TIM_ITRx_SetConfig>
      break;
 8006344:	e01b      	b.n	800637e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6818      	ldr	r0, [r3, #0]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	6859      	ldr	r1, [r3, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	461a      	mov	r2, r3
 8006354:	f000 fc3e 	bl	8006bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2140      	movs	r1, #64	; 0x40
 800635e:	4618      	mov	r0, r3
 8006360:	f000 fd4d 	bl	8006dfe <TIM_ITRx_SetConfig>
      break;
 8006364:	e00b      	b.n	800637e <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4619      	mov	r1, r3
 8006370:	4610      	mov	r0, r2
 8006372:	f000 fd44 	bl	8006dfe <TIM_ITRx_SetConfig>
        break;
 8006376:	e002      	b.n	800637e <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8006378:	bf00      	nop
 800637a:	e000      	b.n	800637e <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800637c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	00100070 	.word	0x00100070
 800639c:	00100040 	.word	0x00100040
 80063a0:	00100030 	.word	0x00100030
 80063a4:	00100020 	.word	0x00100020

080063a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a3c      	ldr	r2, [pc, #240]	; (80064fc <TIM_Base_SetConfig+0x104>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d00f      	beq.n	8006430 <TIM_Base_SetConfig+0x38>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006416:	d00b      	beq.n	8006430 <TIM_Base_SetConfig+0x38>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a39      	ldr	r2, [pc, #228]	; (8006500 <TIM_Base_SetConfig+0x108>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d007      	beq.n	8006430 <TIM_Base_SetConfig+0x38>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a38      	ldr	r2, [pc, #224]	; (8006504 <TIM_Base_SetConfig+0x10c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d003      	beq.n	8006430 <TIM_Base_SetConfig+0x38>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a37      	ldr	r2, [pc, #220]	; (8006508 <TIM_Base_SetConfig+0x110>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d108      	bne.n	8006442 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a2d      	ldr	r2, [pc, #180]	; (80064fc <TIM_Base_SetConfig+0x104>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d01b      	beq.n	8006482 <TIM_Base_SetConfig+0x8a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006450:	d017      	beq.n	8006482 <TIM_Base_SetConfig+0x8a>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a2a      	ldr	r2, [pc, #168]	; (8006500 <TIM_Base_SetConfig+0x108>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d013      	beq.n	8006482 <TIM_Base_SetConfig+0x8a>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a29      	ldr	r2, [pc, #164]	; (8006504 <TIM_Base_SetConfig+0x10c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d00f      	beq.n	8006482 <TIM_Base_SetConfig+0x8a>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a28      	ldr	r2, [pc, #160]	; (8006508 <TIM_Base_SetConfig+0x110>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d00b      	beq.n	8006482 <TIM_Base_SetConfig+0x8a>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a27      	ldr	r2, [pc, #156]	; (800650c <TIM_Base_SetConfig+0x114>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d007      	beq.n	8006482 <TIM_Base_SetConfig+0x8a>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a26      	ldr	r2, [pc, #152]	; (8006510 <TIM_Base_SetConfig+0x118>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d003      	beq.n	8006482 <TIM_Base_SetConfig+0x8a>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a25      	ldr	r2, [pc, #148]	; (8006514 <TIM_Base_SetConfig+0x11c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d108      	bne.n	8006494 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4313      	orrs	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a10      	ldr	r2, [pc, #64]	; (80064fc <TIM_Base_SetConfig+0x104>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00f      	beq.n	80064e0 <TIM_Base_SetConfig+0xe8>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a11      	ldr	r2, [pc, #68]	; (8006508 <TIM_Base_SetConfig+0x110>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d00b      	beq.n	80064e0 <TIM_Base_SetConfig+0xe8>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a10      	ldr	r2, [pc, #64]	; (800650c <TIM_Base_SetConfig+0x114>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d007      	beq.n	80064e0 <TIM_Base_SetConfig+0xe8>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a0f      	ldr	r2, [pc, #60]	; (8006510 <TIM_Base_SetConfig+0x118>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d003      	beq.n	80064e0 <TIM_Base_SetConfig+0xe8>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a0e      	ldr	r2, [pc, #56]	; (8006514 <TIM_Base_SetConfig+0x11c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d103      	bne.n	80064e8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	691a      	ldr	r2, [r3, #16]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	615a      	str	r2, [r3, #20]
}
 80064ee:	bf00      	nop
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	40012c00 	.word	0x40012c00
 8006500:	40000400 	.word	0x40000400
 8006504:	40000800 	.word	0x40000800
 8006508:	40013400 	.word	0x40013400
 800650c:	40014000 	.word	0x40014000
 8006510:	40014400 	.word	0x40014400
 8006514:	40014800 	.word	0x40014800

08006518 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	f023 0201 	bic.w	r2, r3, #1
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 0303 	bic.w	r3, r3, #3
 8006552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	4313      	orrs	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f023 0302 	bic.w	r3, r3, #2
 8006564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	4313      	orrs	r3, r2
 800656e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a2c      	ldr	r2, [pc, #176]	; (8006624 <TIM_OC1_SetConfig+0x10c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00f      	beq.n	8006598 <TIM_OC1_SetConfig+0x80>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a2b      	ldr	r2, [pc, #172]	; (8006628 <TIM_OC1_SetConfig+0x110>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d00b      	beq.n	8006598 <TIM_OC1_SetConfig+0x80>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a2a      	ldr	r2, [pc, #168]	; (800662c <TIM_OC1_SetConfig+0x114>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d007      	beq.n	8006598 <TIM_OC1_SetConfig+0x80>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a29      	ldr	r2, [pc, #164]	; (8006630 <TIM_OC1_SetConfig+0x118>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d003      	beq.n	8006598 <TIM_OC1_SetConfig+0x80>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a28      	ldr	r2, [pc, #160]	; (8006634 <TIM_OC1_SetConfig+0x11c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d10c      	bne.n	80065b2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f023 0308 	bic.w	r3, r3, #8
 800659e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f023 0304 	bic.w	r3, r3, #4
 80065b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1b      	ldr	r2, [pc, #108]	; (8006624 <TIM_OC1_SetConfig+0x10c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00f      	beq.n	80065da <TIM_OC1_SetConfig+0xc2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a1a      	ldr	r2, [pc, #104]	; (8006628 <TIM_OC1_SetConfig+0x110>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00b      	beq.n	80065da <TIM_OC1_SetConfig+0xc2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a19      	ldr	r2, [pc, #100]	; (800662c <TIM_OC1_SetConfig+0x114>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d007      	beq.n	80065da <TIM_OC1_SetConfig+0xc2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a18      	ldr	r2, [pc, #96]	; (8006630 <TIM_OC1_SetConfig+0x118>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d003      	beq.n	80065da <TIM_OC1_SetConfig+0xc2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a17      	ldr	r2, [pc, #92]	; (8006634 <TIM_OC1_SetConfig+0x11c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d111      	bne.n	80065fe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	621a      	str	r2, [r3, #32]
}
 8006618:	bf00      	nop
 800661a:	371c      	adds	r7, #28
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	40012c00 	.word	0x40012c00
 8006628:	40013400 	.word	0x40013400
 800662c:	40014000 	.word	0x40014000
 8006630:	40014400 	.word	0x40014400
 8006634:	40014800 	.word	0x40014800

08006638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	f023 0210 	bic.w	r2, r3, #16
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800666a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	021b      	lsls	r3, r3, #8
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	4313      	orrs	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f023 0320 	bic.w	r3, r3, #32
 8006686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	011b      	lsls	r3, r3, #4
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	4313      	orrs	r3, r2
 8006692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a28      	ldr	r2, [pc, #160]	; (8006738 <TIM_OC2_SetConfig+0x100>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d003      	beq.n	80066a4 <TIM_OC2_SetConfig+0x6c>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a27      	ldr	r2, [pc, #156]	; (800673c <TIM_OC2_SetConfig+0x104>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d10d      	bne.n	80066c0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	011b      	lsls	r3, r3, #4
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a1d      	ldr	r2, [pc, #116]	; (8006738 <TIM_OC2_SetConfig+0x100>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00f      	beq.n	80066e8 <TIM_OC2_SetConfig+0xb0>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a1c      	ldr	r2, [pc, #112]	; (800673c <TIM_OC2_SetConfig+0x104>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00b      	beq.n	80066e8 <TIM_OC2_SetConfig+0xb0>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a1b      	ldr	r2, [pc, #108]	; (8006740 <TIM_OC2_SetConfig+0x108>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d007      	beq.n	80066e8 <TIM_OC2_SetConfig+0xb0>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a1a      	ldr	r2, [pc, #104]	; (8006744 <TIM_OC2_SetConfig+0x10c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d003      	beq.n	80066e8 <TIM_OC2_SetConfig+0xb0>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a19      	ldr	r2, [pc, #100]	; (8006748 <TIM_OC2_SetConfig+0x110>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d113      	bne.n	8006710 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	4313      	orrs	r3, r2
 8006702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	621a      	str	r2, [r3, #32]
}
 800672a:	bf00      	nop
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40012c00 	.word	0x40012c00
 800673c:	40013400 	.word	0x40013400
 8006740:	40014000 	.word	0x40014000
 8006744:	40014400 	.word	0x40014400
 8006748:	40014800 	.word	0x40014800

0800674c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800677a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0303 	bic.w	r3, r3, #3
 8006786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	021b      	lsls	r3, r3, #8
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a27      	ldr	r2, [pc, #156]	; (8006848 <TIM_OC3_SetConfig+0xfc>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d003      	beq.n	80067b6 <TIM_OC3_SetConfig+0x6a>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a26      	ldr	r2, [pc, #152]	; (800684c <TIM_OC3_SetConfig+0x100>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d10d      	bne.n	80067d2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a1c      	ldr	r2, [pc, #112]	; (8006848 <TIM_OC3_SetConfig+0xfc>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d00f      	beq.n	80067fa <TIM_OC3_SetConfig+0xae>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a1b      	ldr	r2, [pc, #108]	; (800684c <TIM_OC3_SetConfig+0x100>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d00b      	beq.n	80067fa <TIM_OC3_SetConfig+0xae>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a1a      	ldr	r2, [pc, #104]	; (8006850 <TIM_OC3_SetConfig+0x104>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d007      	beq.n	80067fa <TIM_OC3_SetConfig+0xae>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a19      	ldr	r2, [pc, #100]	; (8006854 <TIM_OC3_SetConfig+0x108>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d003      	beq.n	80067fa <TIM_OC3_SetConfig+0xae>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a18      	ldr	r2, [pc, #96]	; (8006858 <TIM_OC3_SetConfig+0x10c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d113      	bne.n	8006822 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	011b      	lsls	r3, r3, #4
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	4313      	orrs	r3, r2
 8006820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	621a      	str	r2, [r3, #32]
}
 800683c:	bf00      	nop
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	40012c00 	.word	0x40012c00
 800684c:	40013400 	.word	0x40013400
 8006850:	40014000 	.word	0x40014000
 8006854:	40014400 	.word	0x40014400
 8006858:	40014800 	.word	0x40014800

0800685c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800688a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800688e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	021b      	lsls	r3, r3, #8
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	031b      	lsls	r3, r3, #12
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a28      	ldr	r2, [pc, #160]	; (800695c <TIM_OC4_SetConfig+0x100>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d003      	beq.n	80068c8 <TIM_OC4_SetConfig+0x6c>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a27      	ldr	r2, [pc, #156]	; (8006960 <TIM_OC4_SetConfig+0x104>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d10d      	bne.n	80068e4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	031b      	lsls	r3, r3, #12
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a1d      	ldr	r2, [pc, #116]	; (800695c <TIM_OC4_SetConfig+0x100>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00f      	beq.n	800690c <TIM_OC4_SetConfig+0xb0>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a1c      	ldr	r2, [pc, #112]	; (8006960 <TIM_OC4_SetConfig+0x104>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00b      	beq.n	800690c <TIM_OC4_SetConfig+0xb0>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a1b      	ldr	r2, [pc, #108]	; (8006964 <TIM_OC4_SetConfig+0x108>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d007      	beq.n	800690c <TIM_OC4_SetConfig+0xb0>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a1a      	ldr	r2, [pc, #104]	; (8006968 <TIM_OC4_SetConfig+0x10c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d003      	beq.n	800690c <TIM_OC4_SetConfig+0xb0>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a19      	ldr	r2, [pc, #100]	; (800696c <TIM_OC4_SetConfig+0x110>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d113      	bne.n	8006934 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006912:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800691a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	019b      	lsls	r3, r3, #6
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	4313      	orrs	r3, r2
 8006926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	019b      	lsls	r3, r3, #6
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	4313      	orrs	r3, r2
 8006932:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	621a      	str	r2, [r3, #32]
}
 800694e:	bf00      	nop
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40012c00 	.word	0x40012c00
 8006960:	40013400 	.word	0x40013400
 8006964:	40014000 	.word	0x40014000
 8006968:	40014400 	.word	0x40014400
 800696c:	40014800 	.word	0x40014800

08006970 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800699e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80069b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	041b      	lsls	r3, r3, #16
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	4313      	orrs	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a17      	ldr	r2, [pc, #92]	; (8006a24 <TIM_OC5_SetConfig+0xb4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d00f      	beq.n	80069ea <TIM_OC5_SetConfig+0x7a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a16      	ldr	r2, [pc, #88]	; (8006a28 <TIM_OC5_SetConfig+0xb8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d00b      	beq.n	80069ea <TIM_OC5_SetConfig+0x7a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a15      	ldr	r2, [pc, #84]	; (8006a2c <TIM_OC5_SetConfig+0xbc>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d007      	beq.n	80069ea <TIM_OC5_SetConfig+0x7a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a14      	ldr	r2, [pc, #80]	; (8006a30 <TIM_OC5_SetConfig+0xc0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d003      	beq.n	80069ea <TIM_OC5_SetConfig+0x7a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a13      	ldr	r2, [pc, #76]	; (8006a34 <TIM_OC5_SetConfig+0xc4>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d109      	bne.n	80069fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	021b      	lsls	r3, r3, #8
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	621a      	str	r2, [r3, #32]
}
 8006a18:	bf00      	nop
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	40012c00 	.word	0x40012c00
 8006a28:	40013400 	.word	0x40013400
 8006a2c:	40014000 	.word	0x40014000
 8006a30:	40014400 	.word	0x40014400
 8006a34:	40014800 	.word	0x40014800

08006a38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	021b      	lsls	r3, r3, #8
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	051b      	lsls	r3, r3, #20
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a18      	ldr	r2, [pc, #96]	; (8006af0 <TIM_OC6_SetConfig+0xb8>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00f      	beq.n	8006ab4 <TIM_OC6_SetConfig+0x7c>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a17      	ldr	r2, [pc, #92]	; (8006af4 <TIM_OC6_SetConfig+0xbc>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00b      	beq.n	8006ab4 <TIM_OC6_SetConfig+0x7c>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a16      	ldr	r2, [pc, #88]	; (8006af8 <TIM_OC6_SetConfig+0xc0>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d007      	beq.n	8006ab4 <TIM_OC6_SetConfig+0x7c>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a15      	ldr	r2, [pc, #84]	; (8006afc <TIM_OC6_SetConfig+0xc4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_OC6_SetConfig+0x7c>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a14      	ldr	r2, [pc, #80]	; (8006b00 <TIM_OC6_SetConfig+0xc8>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d109      	bne.n	8006ac8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	029b      	lsls	r3, r3, #10
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	621a      	str	r2, [r3, #32]
}
 8006ae2:	bf00      	nop
 8006ae4:	371c      	adds	r7, #28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	40012c00 	.word	0x40012c00
 8006af4:	40013400 	.word	0x40013400
 8006af8:	40014000 	.word	0x40014000
 8006afc:	40014400 	.word	0x40014400
 8006b00:	40014800 	.word	0x40014800

08006b04 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
 8006b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	f023 0201 	bic.w	r2, r3, #1
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4a24      	ldr	r2, [pc, #144]	; (8006bc0 <TIM_TI1_SetConfig+0xbc>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d013      	beq.n	8006b5a <TIM_TI1_SetConfig+0x56>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b38:	d00f      	beq.n	8006b5a <TIM_TI1_SetConfig+0x56>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4a21      	ldr	r2, [pc, #132]	; (8006bc4 <TIM_TI1_SetConfig+0xc0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d00b      	beq.n	8006b5a <TIM_TI1_SetConfig+0x56>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	4a20      	ldr	r2, [pc, #128]	; (8006bc8 <TIM_TI1_SetConfig+0xc4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d007      	beq.n	8006b5a <TIM_TI1_SetConfig+0x56>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4a1f      	ldr	r2, [pc, #124]	; (8006bcc <TIM_TI1_SetConfig+0xc8>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d003      	beq.n	8006b5a <TIM_TI1_SetConfig+0x56>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4a1e      	ldr	r2, [pc, #120]	; (8006bd0 <TIM_TI1_SetConfig+0xcc>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d101      	bne.n	8006b5e <TIM_TI1_SetConfig+0x5a>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e000      	b.n	8006b60 <TIM_TI1_SetConfig+0x5c>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d008      	beq.n	8006b76 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f023 0303 	bic.w	r3, r3, #3
 8006b6a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	e003      	b.n	8006b7e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f043 0301 	orr.w	r3, r3, #1
 8006b7c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	011b      	lsls	r3, r3, #4
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f023 030a 	bic.w	r3, r3, #10
 8006b98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f003 030a 	and.w	r3, r3, #10
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	621a      	str	r2, [r3, #32]
}
 8006bb2:	bf00      	nop
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	40012c00 	.word	0x40012c00
 8006bc4:	40000400 	.word	0x40000400
 8006bc8:	40000800 	.word	0x40000800
 8006bcc:	40013400 	.word	0x40013400
 8006bd0:	40014000 	.word	0x40014000

08006bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f023 0201 	bic.w	r2, r3, #1
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f023 030a 	bic.w	r3, r3, #10
 8006c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	621a      	str	r2, [r3, #32]
}
 8006c26:	bf00      	nop
 8006c28:	371c      	adds	r7, #28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b087      	sub	sp, #28
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	607a      	str	r2, [r7, #4]
 8006c3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	f023 0210 	bic.w	r2, r3, #16
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	021b      	lsls	r3, r3, #8
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	031b      	lsls	r3, r3, #12
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c84:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	011b      	lsls	r3, r3, #4
 8006c8a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	621a      	str	r2, [r3, #32]
}
 8006ca0:	bf00      	nop
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	f023 0210 	bic.w	r2, r3, #16
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	031b      	lsls	r3, r3, #12
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ce8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	011b      	lsls	r3, r3, #4
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	621a      	str	r2, [r3, #32]
}
 8006d00:	bf00      	nop
 8006d02:	371c      	adds	r7, #28
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f023 0303 	bic.w	r3, r3, #3
 8006d38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	011b      	lsls	r3, r3, #4
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006d5c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	021b      	lsls	r3, r3, #8
 8006d62:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	621a      	str	r2, [r3, #32]
}
 8006d78:	bf00      	nop
 8006d7a:	371c      	adds	r7, #28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
 8006d90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	021b      	lsls	r3, r3, #8
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dc2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	031b      	lsls	r3, r3, #12
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006dd6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	031b      	lsls	r3, r3, #12
 8006ddc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	621a      	str	r2, [r3, #32]
}
 8006df2:	bf00      	nop
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b085      	sub	sp, #20
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	f043 0307 	orr.w	r3, r3, #7
 8006e24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	609a      	str	r2, [r3, #8]
}
 8006e2c:	bf00      	nop
 8006e2e:	3714      	adds	r7, #20
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
 8006e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	021a      	lsls	r2, r3, #8
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	609a      	str	r2, [r3, #8]
}
 8006e6c:	bf00      	nop
 8006e6e:	371c      	adds	r7, #28
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	f003 031f 	and.w	r3, r3, #31
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6a1a      	ldr	r2, [r3, #32]
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	43db      	mvns	r3, r3
 8006e9a:	401a      	ands	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a1a      	ldr	r2, [r3, #32]
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f003 031f 	and.w	r3, r3, #31
 8006eaa:	6879      	ldr	r1, [r7, #4]
 8006eac:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	621a      	str	r2, [r3, #32]
}
 8006eb6:	bf00      	nop
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
	...

08006ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d101      	bne.n	8006edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ed8:	2302      	movs	r3, #2
 8006eda:	e065      	b.n	8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a2c      	ldr	r2, [pc, #176]	; (8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d004      	beq.n	8006f10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a2b      	ldr	r2, [pc, #172]	; (8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d108      	bne.n	8006f22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a1b      	ldr	r2, [pc, #108]	; (8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d018      	beq.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f52:	d013      	beq.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a18      	ldr	r2, [pc, #96]	; (8006fbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d00e      	beq.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a17      	ldr	r2, [pc, #92]	; (8006fc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d009      	beq.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a12      	ldr	r2, [pc, #72]	; (8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d004      	beq.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a13      	ldr	r2, [pc, #76]	; (8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d10c      	bne.n	8006f96 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	40012c00 	.word	0x40012c00
 8006fb8:	40013400 	.word	0x40013400
 8006fbc:	40000400 	.word	0x40000400
 8006fc0:	40000800 	.word	0x40000800
 8006fc4:	40014000 	.word	0x40014000

08006fc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d101      	bne.n	8006fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e087      	b.n	80070f4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	4313      	orrs	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	4313      	orrs	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4313      	orrs	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	4313      	orrs	r3, r2
 800703e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704a:	4313      	orrs	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	041b      	lsls	r3, r3, #16
 800705a:	4313      	orrs	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a27      	ldr	r2, [pc, #156]	; (8007100 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d004      	beq.n	8007072 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a25      	ldr	r2, [pc, #148]	; (8007104 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d106      	bne.n	8007080 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	4313      	orrs	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a1e      	ldr	r2, [pc, #120]	; (8007100 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d004      	beq.n	8007094 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a1d      	ldr	r2, [pc, #116]	; (8007104 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d126      	bne.n	80070e2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709e:	051b      	lsls	r3, r3, #20
 80070a0:	4313      	orrs	r3, r2
 80070a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a0e      	ldr	r2, [pc, #56]	; (8007100 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d004      	beq.n	80070d4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a0d      	ldr	r2, [pc, #52]	; (8007104 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d106      	bne.n	80070e2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	40012c00 	.word	0x40012c00
 8007104:	40013400 	.word	0x40013400

08007108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e042      	b.n	800722c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d106      	bne.n	80071be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7fc fb27 	bl	800380c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2224      	movs	r2, #36	; 0x24
 80071c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0201 	bic.w	r2, r2, #1
 80071d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f966 	bl	80074a8 <UART_SetConfig>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d101      	bne.n	80071e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e022      	b.n	800722c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d002      	beq.n	80071f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fbfe 	bl	80079f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007202:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	689a      	ldr	r2, [r3, #8]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007212:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f042 0201 	orr.w	r2, r2, #1
 8007222:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fc85 	bl	8007b34 <UART_CheckIdleState>
 800722a:	4603      	mov	r3, r0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	4613      	mov	r3, r2
 8007240:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007248:	2b20      	cmp	r3, #32
 800724a:	d168      	bne.n	800731e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d002      	beq.n	8007258 <HAL_UART_Transmit_DMA+0x24>
 8007252:	88fb      	ldrh	r3, [r7, #6]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e061      	b.n	8007320 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007262:	2b01      	cmp	r3, #1
 8007264:	d101      	bne.n	800726a <HAL_UART_Transmit_DMA+0x36>
 8007266:	2302      	movs	r3, #2
 8007268:	e05a      	b.n	8007320 <HAL_UART_Transmit_DMA+0xec>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	88fa      	ldrh	r2, [r7, #6]
 800727c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	88fa      	ldrh	r2, [r7, #6]
 8007284:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2221      	movs	r2, #33	; 0x21
 8007294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800729c:	2b00      	cmp	r3, #0
 800729e:	d02c      	beq.n	80072fa <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072a4:	4a20      	ldr	r2, [pc, #128]	; (8007328 <HAL_UART_Transmit_DMA+0xf4>)
 80072a6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ac:	4a1f      	ldr	r2, [pc, #124]	; (800732c <HAL_UART_Transmit_DMA+0xf8>)
 80072ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072b4:	4a1e      	ldr	r2, [pc, #120]	; (8007330 <HAL_UART_Transmit_DMA+0xfc>)
 80072b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072bc:	2200      	movs	r2, #0
 80072be:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c8:	4619      	mov	r1, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3328      	adds	r3, #40	; 0x28
 80072d0:	461a      	mov	r2, r3
 80072d2:	88fb      	ldrh	r3, [r7, #6]
 80072d4:	f7fc fe66 	bl	8003fa4 <HAL_DMA_Start_IT>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00d      	beq.n	80072fa <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2210      	movs	r2, #16
 80072e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2220      	movs	r2, #32
 80072f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e012      	b.n	8007320 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2240      	movs	r2, #64	; 0x40
 8007300:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	689a      	ldr	r2, [r3, #8]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007318:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800731a:	2300      	movs	r3, #0
 800731c:	e000      	b.n	8007320 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800731e:	2302      	movs	r3, #2
  }
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	08007d47 	.word	0x08007d47
 800732c:	08007d9b 	.word	0x08007d9b
 8007330:	08007e3d 	.word	0x08007e3d

08007334 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	4613      	mov	r3, r2
 8007340:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007348:	2b20      	cmp	r3, #32
 800734a:	d170      	bne.n	800742e <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d002      	beq.n	8007358 <HAL_UART_Receive_DMA+0x24>
 8007352:	88fb      	ldrh	r3, [r7, #6]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e069      	b.n	8007430 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007362:	2b01      	cmp	r3, #1
 8007364:	d101      	bne.n	800736a <HAL_UART_Receive_DMA+0x36>
 8007366:	2302      	movs	r3, #2
 8007368:	e062      	b.n	8007430 <HAL_UART_Receive_DMA+0xfc>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	88fa      	ldrh	r2, [r7, #6]
 800737c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2222      	movs	r2, #34	; 0x22
 800738c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007394:	2b00      	cmp	r3, #0
 8007396:	d02c      	beq.n	80073f2 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800739c:	4a26      	ldr	r2, [pc, #152]	; (8007438 <HAL_UART_Receive_DMA+0x104>)
 800739e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073a4:	4a25      	ldr	r2, [pc, #148]	; (800743c <HAL_UART_Receive_DMA+0x108>)
 80073a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073ac:	4a24      	ldr	r2, [pc, #144]	; (8007440 <HAL_UART_Receive_DMA+0x10c>)
 80073ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073b4:	2200      	movs	r2, #0
 80073b6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3324      	adds	r3, #36	; 0x24
 80073c2:	4619      	mov	r1, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c8:	461a      	mov	r2, r3
 80073ca:	88fb      	ldrh	r3, [r7, #6]
 80073cc:	f7fc fdea 	bl	8003fa4 <HAL_DMA_Start_IT>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00d      	beq.n	80073f2 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2210      	movs	r2, #16
 80073da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2220      	movs	r2, #32
 80073ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e01e      	b.n	8007430 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007408:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f042 0201 	orr.w	r2, r2, #1
 8007418:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689a      	ldr	r2, [r3, #8]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007428:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800742a:	2300      	movs	r3, #0
 800742c:	e000      	b.n	8007430 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800742e:	2302      	movs	r3, #2
  }
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	08007db7 	.word	0x08007db7
 800743c:	08007e21 	.word	0x08007e21
 8007440:	08007e3d 	.word	0x08007e3d

08007444 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074a8:	b5b0      	push	{r4, r5, r7, lr}
 80074aa:	b088      	sub	sp, #32
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	689a      	ldr	r2, [r3, #8]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	431a      	orrs	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	431a      	orrs	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	69db      	ldr	r3, [r3, #28]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074d0:	69fa      	ldr	r2, [r7, #28]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	4baf      	ldr	r3, [pc, #700]	; (800779c <UART_SetConfig+0x2f4>)
 80074de:	4013      	ands	r3, r2
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6812      	ldr	r2, [r2, #0]
 80074e4:	69f9      	ldr	r1, [r7, #28]
 80074e6:	430b      	orrs	r3, r1
 80074e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	68da      	ldr	r2, [r3, #12]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	430a      	orrs	r2, r1
 80074fe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4aa5      	ldr	r2, [pc, #660]	; (80077a0 <UART_SetConfig+0x2f8>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d004      	beq.n	800751a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	4313      	orrs	r3, r2
 8007518:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007524:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	6812      	ldr	r2, [r2, #0]
 800752c:	69f9      	ldr	r1, [r7, #28]
 800752e:	430b      	orrs	r3, r1
 8007530:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	f023 010f 	bic.w	r1, r3, #15
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	430a      	orrs	r2, r1
 8007546:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a95      	ldr	r2, [pc, #596]	; (80077a4 <UART_SetConfig+0x2fc>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d121      	bne.n	8007596 <UART_SetConfig+0xee>
 8007552:	4b95      	ldr	r3, [pc, #596]	; (80077a8 <UART_SetConfig+0x300>)
 8007554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007558:	f003 0303 	and.w	r3, r3, #3
 800755c:	2b03      	cmp	r3, #3
 800755e:	d817      	bhi.n	8007590 <UART_SetConfig+0xe8>
 8007560:	a201      	add	r2, pc, #4	; (adr r2, 8007568 <UART_SetConfig+0xc0>)
 8007562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007566:	bf00      	nop
 8007568:	08007579 	.word	0x08007579
 800756c:	08007585 	.word	0x08007585
 8007570:	0800757f 	.word	0x0800757f
 8007574:	0800758b 	.word	0x0800758b
 8007578:	2301      	movs	r3, #1
 800757a:	76fb      	strb	r3, [r7, #27]
 800757c:	e0bc      	b.n	80076f8 <UART_SetConfig+0x250>
 800757e:	2302      	movs	r3, #2
 8007580:	76fb      	strb	r3, [r7, #27]
 8007582:	e0b9      	b.n	80076f8 <UART_SetConfig+0x250>
 8007584:	2304      	movs	r3, #4
 8007586:	76fb      	strb	r3, [r7, #27]
 8007588:	e0b6      	b.n	80076f8 <UART_SetConfig+0x250>
 800758a:	2308      	movs	r3, #8
 800758c:	76fb      	strb	r3, [r7, #27]
 800758e:	e0b3      	b.n	80076f8 <UART_SetConfig+0x250>
 8007590:	2310      	movs	r3, #16
 8007592:	76fb      	strb	r3, [r7, #27]
 8007594:	e0b0      	b.n	80076f8 <UART_SetConfig+0x250>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a84      	ldr	r2, [pc, #528]	; (80077ac <UART_SetConfig+0x304>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d132      	bne.n	8007606 <UART_SetConfig+0x15e>
 80075a0:	4b81      	ldr	r3, [pc, #516]	; (80077a8 <UART_SetConfig+0x300>)
 80075a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a6:	f003 030c 	and.w	r3, r3, #12
 80075aa:	2b0c      	cmp	r3, #12
 80075ac:	d828      	bhi.n	8007600 <UART_SetConfig+0x158>
 80075ae:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <UART_SetConfig+0x10c>)
 80075b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b4:	080075e9 	.word	0x080075e9
 80075b8:	08007601 	.word	0x08007601
 80075bc:	08007601 	.word	0x08007601
 80075c0:	08007601 	.word	0x08007601
 80075c4:	080075f5 	.word	0x080075f5
 80075c8:	08007601 	.word	0x08007601
 80075cc:	08007601 	.word	0x08007601
 80075d0:	08007601 	.word	0x08007601
 80075d4:	080075ef 	.word	0x080075ef
 80075d8:	08007601 	.word	0x08007601
 80075dc:	08007601 	.word	0x08007601
 80075e0:	08007601 	.word	0x08007601
 80075e4:	080075fb 	.word	0x080075fb
 80075e8:	2300      	movs	r3, #0
 80075ea:	76fb      	strb	r3, [r7, #27]
 80075ec:	e084      	b.n	80076f8 <UART_SetConfig+0x250>
 80075ee:	2302      	movs	r3, #2
 80075f0:	76fb      	strb	r3, [r7, #27]
 80075f2:	e081      	b.n	80076f8 <UART_SetConfig+0x250>
 80075f4:	2304      	movs	r3, #4
 80075f6:	76fb      	strb	r3, [r7, #27]
 80075f8:	e07e      	b.n	80076f8 <UART_SetConfig+0x250>
 80075fa:	2308      	movs	r3, #8
 80075fc:	76fb      	strb	r3, [r7, #27]
 80075fe:	e07b      	b.n	80076f8 <UART_SetConfig+0x250>
 8007600:	2310      	movs	r3, #16
 8007602:	76fb      	strb	r3, [r7, #27]
 8007604:	e078      	b.n	80076f8 <UART_SetConfig+0x250>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a69      	ldr	r2, [pc, #420]	; (80077b0 <UART_SetConfig+0x308>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d120      	bne.n	8007652 <UART_SetConfig+0x1aa>
 8007610:	4b65      	ldr	r3, [pc, #404]	; (80077a8 <UART_SetConfig+0x300>)
 8007612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007616:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800761a:	2b30      	cmp	r3, #48	; 0x30
 800761c:	d013      	beq.n	8007646 <UART_SetConfig+0x19e>
 800761e:	2b30      	cmp	r3, #48	; 0x30
 8007620:	d814      	bhi.n	800764c <UART_SetConfig+0x1a4>
 8007622:	2b20      	cmp	r3, #32
 8007624:	d009      	beq.n	800763a <UART_SetConfig+0x192>
 8007626:	2b20      	cmp	r3, #32
 8007628:	d810      	bhi.n	800764c <UART_SetConfig+0x1a4>
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <UART_SetConfig+0x18c>
 800762e:	2b10      	cmp	r3, #16
 8007630:	d006      	beq.n	8007640 <UART_SetConfig+0x198>
 8007632:	e00b      	b.n	800764c <UART_SetConfig+0x1a4>
 8007634:	2300      	movs	r3, #0
 8007636:	76fb      	strb	r3, [r7, #27]
 8007638:	e05e      	b.n	80076f8 <UART_SetConfig+0x250>
 800763a:	2302      	movs	r3, #2
 800763c:	76fb      	strb	r3, [r7, #27]
 800763e:	e05b      	b.n	80076f8 <UART_SetConfig+0x250>
 8007640:	2304      	movs	r3, #4
 8007642:	76fb      	strb	r3, [r7, #27]
 8007644:	e058      	b.n	80076f8 <UART_SetConfig+0x250>
 8007646:	2308      	movs	r3, #8
 8007648:	76fb      	strb	r3, [r7, #27]
 800764a:	e055      	b.n	80076f8 <UART_SetConfig+0x250>
 800764c:	2310      	movs	r3, #16
 800764e:	76fb      	strb	r3, [r7, #27]
 8007650:	e052      	b.n	80076f8 <UART_SetConfig+0x250>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a57      	ldr	r2, [pc, #348]	; (80077b4 <UART_SetConfig+0x30c>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d120      	bne.n	800769e <UART_SetConfig+0x1f6>
 800765c:	4b52      	ldr	r3, [pc, #328]	; (80077a8 <UART_SetConfig+0x300>)
 800765e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007662:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007666:	2bc0      	cmp	r3, #192	; 0xc0
 8007668:	d013      	beq.n	8007692 <UART_SetConfig+0x1ea>
 800766a:	2bc0      	cmp	r3, #192	; 0xc0
 800766c:	d814      	bhi.n	8007698 <UART_SetConfig+0x1f0>
 800766e:	2b80      	cmp	r3, #128	; 0x80
 8007670:	d009      	beq.n	8007686 <UART_SetConfig+0x1de>
 8007672:	2b80      	cmp	r3, #128	; 0x80
 8007674:	d810      	bhi.n	8007698 <UART_SetConfig+0x1f0>
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <UART_SetConfig+0x1d8>
 800767a:	2b40      	cmp	r3, #64	; 0x40
 800767c:	d006      	beq.n	800768c <UART_SetConfig+0x1e4>
 800767e:	e00b      	b.n	8007698 <UART_SetConfig+0x1f0>
 8007680:	2300      	movs	r3, #0
 8007682:	76fb      	strb	r3, [r7, #27]
 8007684:	e038      	b.n	80076f8 <UART_SetConfig+0x250>
 8007686:	2302      	movs	r3, #2
 8007688:	76fb      	strb	r3, [r7, #27]
 800768a:	e035      	b.n	80076f8 <UART_SetConfig+0x250>
 800768c:	2304      	movs	r3, #4
 800768e:	76fb      	strb	r3, [r7, #27]
 8007690:	e032      	b.n	80076f8 <UART_SetConfig+0x250>
 8007692:	2308      	movs	r3, #8
 8007694:	76fb      	strb	r3, [r7, #27]
 8007696:	e02f      	b.n	80076f8 <UART_SetConfig+0x250>
 8007698:	2310      	movs	r3, #16
 800769a:	76fb      	strb	r3, [r7, #27]
 800769c:	e02c      	b.n	80076f8 <UART_SetConfig+0x250>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a3f      	ldr	r2, [pc, #252]	; (80077a0 <UART_SetConfig+0x2f8>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d125      	bne.n	80076f4 <UART_SetConfig+0x24c>
 80076a8:	4b3f      	ldr	r3, [pc, #252]	; (80077a8 <UART_SetConfig+0x300>)
 80076aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80076b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076b6:	d017      	beq.n	80076e8 <UART_SetConfig+0x240>
 80076b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076bc:	d817      	bhi.n	80076ee <UART_SetConfig+0x246>
 80076be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076c2:	d00b      	beq.n	80076dc <UART_SetConfig+0x234>
 80076c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076c8:	d811      	bhi.n	80076ee <UART_SetConfig+0x246>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <UART_SetConfig+0x22e>
 80076ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076d2:	d006      	beq.n	80076e2 <UART_SetConfig+0x23a>
 80076d4:	e00b      	b.n	80076ee <UART_SetConfig+0x246>
 80076d6:	2300      	movs	r3, #0
 80076d8:	76fb      	strb	r3, [r7, #27]
 80076da:	e00d      	b.n	80076f8 <UART_SetConfig+0x250>
 80076dc:	2302      	movs	r3, #2
 80076de:	76fb      	strb	r3, [r7, #27]
 80076e0:	e00a      	b.n	80076f8 <UART_SetConfig+0x250>
 80076e2:	2304      	movs	r3, #4
 80076e4:	76fb      	strb	r3, [r7, #27]
 80076e6:	e007      	b.n	80076f8 <UART_SetConfig+0x250>
 80076e8:	2308      	movs	r3, #8
 80076ea:	76fb      	strb	r3, [r7, #27]
 80076ec:	e004      	b.n	80076f8 <UART_SetConfig+0x250>
 80076ee:	2310      	movs	r3, #16
 80076f0:	76fb      	strb	r3, [r7, #27]
 80076f2:	e001      	b.n	80076f8 <UART_SetConfig+0x250>
 80076f4:	2310      	movs	r3, #16
 80076f6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a28      	ldr	r2, [pc, #160]	; (80077a0 <UART_SetConfig+0x2f8>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	f040 809e 	bne.w	8007840 <UART_SetConfig+0x398>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007704:	7efb      	ldrb	r3, [r7, #27]
 8007706:	2b08      	cmp	r3, #8
 8007708:	d823      	bhi.n	8007752 <UART_SetConfig+0x2aa>
 800770a:	a201      	add	r2, pc, #4	; (adr r2, 8007710 <UART_SetConfig+0x268>)
 800770c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007710:	08007735 	.word	0x08007735
 8007714:	08007753 	.word	0x08007753
 8007718:	0800773d 	.word	0x0800773d
 800771c:	08007753 	.word	0x08007753
 8007720:	08007743 	.word	0x08007743
 8007724:	08007753 	.word	0x08007753
 8007728:	08007753 	.word	0x08007753
 800772c:	08007753 	.word	0x08007753
 8007730:	0800774b 	.word	0x0800774b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007734:	f7fd fd10 	bl	8005158 <HAL_RCC_GetPCLK1Freq>
 8007738:	6178      	str	r0, [r7, #20]
        break;
 800773a:	e00f      	b.n	800775c <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800773c:	4b1e      	ldr	r3, [pc, #120]	; (80077b8 <UART_SetConfig+0x310>)
 800773e:	617b      	str	r3, [r7, #20]
        break;
 8007740:	e00c      	b.n	800775c <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007742:	f7fd fc9b 	bl	800507c <HAL_RCC_GetSysClockFreq>
 8007746:	6178      	str	r0, [r7, #20]
        break;
 8007748:	e008      	b.n	800775c <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800774a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800774e:	617b      	str	r3, [r7, #20]
        break;
 8007750:	e004      	b.n	800775c <UART_SetConfig+0x2b4>
      default:
        pclk = 0U;
 8007752:	2300      	movs	r3, #0
 8007754:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	76bb      	strb	r3, [r7, #26]
        break;
 800775a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 812e 	beq.w	80079c0 <UART_SetConfig+0x518>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	4a14      	ldr	r2, [pc, #80]	; (80077bc <UART_SetConfig+0x314>)
 800776a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800776e:	461a      	mov	r2, r3
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	fbb3 f3f2 	udiv	r3, r3, r2
 8007776:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	4613      	mov	r3, r2
 800777e:	005b      	lsls	r3, r3, #1
 8007780:	4413      	add	r3, r2
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	429a      	cmp	r2, r3
 8007786:	d305      	bcc.n	8007794 <UART_SetConfig+0x2ec>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	429a      	cmp	r2, r3
 8007792:	d915      	bls.n	80077c0 <UART_SetConfig+0x318>
      {
        ret = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	76bb      	strb	r3, [r7, #26]
 8007798:	e112      	b.n	80079c0 <UART_SetConfig+0x518>
 800779a:	bf00      	nop
 800779c:	cfff69f3 	.word	0xcfff69f3
 80077a0:	40008000 	.word	0x40008000
 80077a4:	40013800 	.word	0x40013800
 80077a8:	40021000 	.word	0x40021000
 80077ac:	40004400 	.word	0x40004400
 80077b0:	40004800 	.word	0x40004800
 80077b4:	40004c00 	.word	0x40004c00
 80077b8:	00f42400 	.word	0x00f42400
 80077bc:	0800b234 	.word	0x0800b234
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f04f 0100 	mov.w	r1, #0
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077cc:	4a86      	ldr	r2, [pc, #536]	; (80079e8 <UART_SetConfig+0x540>)
 80077ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	f04f 0300 	mov.w	r3, #0
 80077d8:	f7f9 f948 	bl	8000a6c <__aeabi_uldivmod>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4610      	mov	r0, r2
 80077e2:	4619      	mov	r1, r3
 80077e4:	f04f 0200 	mov.w	r2, #0
 80077e8:	f04f 0300 	mov.w	r3, #0
 80077ec:	020b      	lsls	r3, r1, #8
 80077ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077f2:	0202      	lsls	r2, r0, #8
 80077f4:	6879      	ldr	r1, [r7, #4]
 80077f6:	6849      	ldr	r1, [r1, #4]
 80077f8:	0849      	lsrs	r1, r1, #1
 80077fa:	4608      	mov	r0, r1
 80077fc:	f04f 0100 	mov.w	r1, #0
 8007800:	1814      	adds	r4, r2, r0
 8007802:	eb43 0501 	adc.w	r5, r3, r1
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	461a      	mov	r2, r3
 800780c:	f04f 0300 	mov.w	r3, #0
 8007810:	4620      	mov	r0, r4
 8007812:	4629      	mov	r1, r5
 8007814:	f7f9 f92a 	bl	8000a6c <__aeabi_uldivmod>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	4613      	mov	r3, r2
 800781e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007826:	d308      	bcc.n	800783a <UART_SetConfig+0x392>
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800782e:	d204      	bcs.n	800783a <UART_SetConfig+0x392>
        {
          huart->Instance->BRR = usartdiv;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	60da      	str	r2, [r3, #12]
 8007838:	e0c2      	b.n	80079c0 <UART_SetConfig+0x518>
        }
        else
        {
          ret = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	76bb      	strb	r3, [r7, #26]
 800783e:	e0bf      	b.n	80079c0 <UART_SetConfig+0x518>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	69db      	ldr	r3, [r3, #28]
 8007844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007848:	d165      	bne.n	8007916 <UART_SetConfig+0x46e>
  {
    switch (clocksource)
 800784a:	7efb      	ldrb	r3, [r7, #27]
 800784c:	2b08      	cmp	r3, #8
 800784e:	d828      	bhi.n	80078a2 <UART_SetConfig+0x3fa>
 8007850:	a201      	add	r2, pc, #4	; (adr r2, 8007858 <UART_SetConfig+0x3b0>)
 8007852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007856:	bf00      	nop
 8007858:	0800787d 	.word	0x0800787d
 800785c:	08007885 	.word	0x08007885
 8007860:	0800788d 	.word	0x0800788d
 8007864:	080078a3 	.word	0x080078a3
 8007868:	08007893 	.word	0x08007893
 800786c:	080078a3 	.word	0x080078a3
 8007870:	080078a3 	.word	0x080078a3
 8007874:	080078a3 	.word	0x080078a3
 8007878:	0800789b 	.word	0x0800789b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800787c:	f7fd fc6c 	bl	8005158 <HAL_RCC_GetPCLK1Freq>
 8007880:	6178      	str	r0, [r7, #20]
        break;
 8007882:	e013      	b.n	80078ac <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007884:	f7fd fc7e 	bl	8005184 <HAL_RCC_GetPCLK2Freq>
 8007888:	6178      	str	r0, [r7, #20]
        break;
 800788a:	e00f      	b.n	80078ac <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800788c:	4b57      	ldr	r3, [pc, #348]	; (80079ec <UART_SetConfig+0x544>)
 800788e:	617b      	str	r3, [r7, #20]
        break;
 8007890:	e00c      	b.n	80078ac <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007892:	f7fd fbf3 	bl	800507c <HAL_RCC_GetSysClockFreq>
 8007896:	6178      	str	r0, [r7, #20]
        break;
 8007898:	e008      	b.n	80078ac <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800789a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800789e:	617b      	str	r3, [r7, #20]
        break;
 80078a0:	e004      	b.n	80078ac <UART_SetConfig+0x404>
      default:
        pclk = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	76bb      	strb	r3, [r7, #26]
        break;
 80078aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f000 8086 	beq.w	80079c0 <UART_SetConfig+0x518>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	4a4b      	ldr	r2, [pc, #300]	; (80079e8 <UART_SetConfig+0x540>)
 80078ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078be:	461a      	mov	r2, r3
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80078c6:	005a      	lsls	r2, r3, #1
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	085b      	lsrs	r3, r3, #1
 80078ce:	441a      	add	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d8:	b29b      	uxth	r3, r3
 80078da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	2b0f      	cmp	r3, #15
 80078e0:	d916      	bls.n	8007910 <UART_SetConfig+0x468>
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078e8:	d212      	bcs.n	8007910 <UART_SetConfig+0x468>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	f023 030f 	bic.w	r3, r3, #15
 80078f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	085b      	lsrs	r3, r3, #1
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	f003 0307 	and.w	r3, r3, #7
 80078fe:	b29a      	uxth	r2, r3
 8007900:	89fb      	ldrh	r3, [r7, #14]
 8007902:	4313      	orrs	r3, r2
 8007904:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	89fa      	ldrh	r2, [r7, #14]
 800790c:	60da      	str	r2, [r3, #12]
 800790e:	e057      	b.n	80079c0 <UART_SetConfig+0x518>
      }
      else
      {
        ret = HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	76bb      	strb	r3, [r7, #26]
 8007914:	e054      	b.n	80079c0 <UART_SetConfig+0x518>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007916:	7efb      	ldrb	r3, [r7, #27]
 8007918:	2b08      	cmp	r3, #8
 800791a:	d828      	bhi.n	800796e <UART_SetConfig+0x4c6>
 800791c:	a201      	add	r2, pc, #4	; (adr r2, 8007924 <UART_SetConfig+0x47c>)
 800791e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007922:	bf00      	nop
 8007924:	08007949 	.word	0x08007949
 8007928:	08007951 	.word	0x08007951
 800792c:	08007959 	.word	0x08007959
 8007930:	0800796f 	.word	0x0800796f
 8007934:	0800795f 	.word	0x0800795f
 8007938:	0800796f 	.word	0x0800796f
 800793c:	0800796f 	.word	0x0800796f
 8007940:	0800796f 	.word	0x0800796f
 8007944:	08007967 	.word	0x08007967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007948:	f7fd fc06 	bl	8005158 <HAL_RCC_GetPCLK1Freq>
 800794c:	6178      	str	r0, [r7, #20]
        break;
 800794e:	e013      	b.n	8007978 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007950:	f7fd fc18 	bl	8005184 <HAL_RCC_GetPCLK2Freq>
 8007954:	6178      	str	r0, [r7, #20]
        break;
 8007956:	e00f      	b.n	8007978 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007958:	4b24      	ldr	r3, [pc, #144]	; (80079ec <UART_SetConfig+0x544>)
 800795a:	617b      	str	r3, [r7, #20]
        break;
 800795c:	e00c      	b.n	8007978 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800795e:	f7fd fb8d 	bl	800507c <HAL_RCC_GetSysClockFreq>
 8007962:	6178      	str	r0, [r7, #20]
        break;
 8007964:	e008      	b.n	8007978 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800796a:	617b      	str	r3, [r7, #20]
        break;
 800796c:	e004      	b.n	8007978 <UART_SetConfig+0x4d0>
      default:
        pclk = 0U;
 800796e:	2300      	movs	r3, #0
 8007970:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	76bb      	strb	r3, [r7, #26]
        break;
 8007976:	bf00      	nop
    }

    if (pclk != 0U)
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d020      	beq.n	80079c0 <UART_SetConfig+0x518>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007982:	4a19      	ldr	r2, [pc, #100]	; (80079e8 <UART_SetConfig+0x540>)
 8007984:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007988:	461a      	mov	r2, r3
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	085b      	lsrs	r3, r3, #1
 8007996:	441a      	add	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	2b0f      	cmp	r3, #15
 80079a8:	d908      	bls.n	80079bc <UART_SetConfig+0x514>
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079b0:	d204      	bcs.n	80079bc <UART_SetConfig+0x514>
      {
        huart->Instance->BRR = usartdiv;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	60da      	str	r2, [r3, #12]
 80079ba:	e001      	b.n	80079c0 <UART_SetConfig+0x518>
      }
      else
      {
        ret = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80079dc:	7ebb      	ldrb	r3, [r7, #26]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3720      	adds	r7, #32
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bdb0      	pop	{r4, r5, r7, pc}
 80079e6:	bf00      	nop
 80079e8:	0800b234 	.word	0x0800b234
 80079ec:	00f42400 	.word	0x00f42400

080079f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00a      	beq.n	8007a1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00a      	beq.n	8007a3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a40:	f003 0304 	and.w	r3, r3, #4
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00a      	beq.n	8007a5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a62:	f003 0308 	and.w	r3, r3, #8
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00a      	beq.n	8007a80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a84:	f003 0310 	and.w	r3, r3, #16
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00a      	beq.n	8007aa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa6:	f003 0320 	and.w	r3, r3, #32
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00a      	beq.n	8007ac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01a      	beq.n	8007b06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aee:	d10a      	bne.n	8007b06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	605a      	str	r2, [r3, #4]
  }
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af02      	add	r7, sp, #8
 8007b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b44:	f7fc f89a 	bl	8003c7c <HAL_GetTick>
 8007b48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0308 	and.w	r3, r3, #8
 8007b54:	2b08      	cmp	r3, #8
 8007b56:	d10e      	bne.n	8007b76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f82c 	bl	8007bc4 <UART_WaitOnFlagUntilTimeout>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e022      	b.n	8007bbc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0304 	and.w	r3, r3, #4
 8007b80:	2b04      	cmp	r3, #4
 8007b82:	d10e      	bne.n	8007ba2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f816 	bl	8007bc4 <UART_WaitOnFlagUntilTimeout>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d001      	beq.n	8007ba2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e00c      	b.n	8007bbc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2220      	movs	r2, #32
 8007bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	603b      	str	r3, [r7, #0]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bd4:	e062      	b.n	8007c9c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bdc:	d05e      	beq.n	8007c9c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bde:	f7fc f84d 	bl	8003c7c <HAL_GetTick>
 8007be2:	4602      	mov	r2, r0
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d302      	bcc.n	8007bf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d11d      	bne.n	8007c30 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c02:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689a      	ldr	r2, [r3, #8]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f022 0201 	bic.w	r2, r2, #1
 8007c12:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e045      	b.n	8007cbc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0304 	and.w	r3, r3, #4
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d02e      	beq.n	8007c9c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	69db      	ldr	r3, [r3, #28]
 8007c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c4c:	d126      	bne.n	8007c9c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c56:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c66:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f022 0201 	bic.w	r2, r2, #1
 8007c76:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2220      	movs	r2, #32
 8007c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2220      	movs	r2, #32
 8007c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e00f      	b.n	8007cbc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	69da      	ldr	r2, [r3, #28]
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	bf0c      	ite	eq
 8007cac:	2301      	moveq	r3, #1
 8007cae:	2300      	movne	r3, #0
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	79fb      	ldrb	r3, [r7, #7]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d08d      	beq.n	8007bd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007cda:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	689a      	ldr	r2, [r3, #8]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007cea:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007d16:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	6812      	ldr	r2, [r2, #0]
 8007d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d26:	f023 0301 	bic.w	r3, r3, #1
 8007d2a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2220      	movs	r2, #32
 8007d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8007d3a:	bf00      	nop
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b084      	sub	sp, #16
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d52:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0320 	and.w	r3, r3, #32
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d114      	bne.n	8007d8c <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d78:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d88:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d8a:	e002      	b.n	8007d92 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f7ff fb59 	bl	8007444 <HAL_UART_TxCpltCallback>
}
 8007d92:	bf00      	nop
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f7ff fb55 	bl	8007458 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dae:	bf00      	nop
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b084      	sub	sp, #16
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d11f      	bne.n	8007e12 <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007de8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 0201 	bic.w	r2, r2, #1
 8007df8:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689a      	ldr	r2, [r3, #8]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e08:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f7ff fb2a 	bl	800746c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e18:	bf00      	nop
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f7ff fb26 	bl	8007480 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e34:	bf00      	nop
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e48:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e50:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e58:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e64:	2b80      	cmp	r3, #128	; 0x80
 8007e66:	d109      	bne.n	8007e7c <UART_DMAError+0x40>
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	2b21      	cmp	r3, #33	; 0x21
 8007e6c:	d106      	bne.n	8007e7c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007e76:	6978      	ldr	r0, [r7, #20]
 8007e78:	f7ff ff24 	bl	8007cc4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e86:	2b40      	cmp	r3, #64	; 0x40
 8007e88:	d109      	bne.n	8007e9e <UART_DMAError+0x62>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b22      	cmp	r3, #34	; 0x22
 8007e8e:	d106      	bne.n	8007e9e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007e98:	6978      	ldr	r0, [r7, #20]
 8007e9a:	f7ff ff31 	bl	8007d00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea4:	f043 0210 	orr.w	r2, r3, #16
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007eae:	6978      	ldr	r0, [r7, #20]
 8007eb0:	f7ff faf0 	bl	8007494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eb4:	bf00      	nop
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d101      	bne.n	8007ed2 <HAL_UARTEx_DisableFifoMode+0x16>
 8007ece:	2302      	movs	r3, #2
 8007ed0:	e027      	b.n	8007f22 <HAL_UARTEx_DisableFifoMode+0x66>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2224      	movs	r2, #36	; 0x24
 8007ede:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f022 0201 	bic.w	r2, r2, #1
 8007ef8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007f00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2220      	movs	r2, #32
 8007f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b084      	sub	sp, #16
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d101      	bne.n	8007f46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f42:	2302      	movs	r3, #2
 8007f44:	e02d      	b.n	8007fa2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2224      	movs	r2, #36	; 0x24
 8007f52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f022 0201 	bic.w	r2, r2, #1
 8007f6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	683a      	ldr	r2, [r7, #0]
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f850 	bl	8008028 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2220      	movs	r2, #32
 8007f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d101      	bne.n	8007fc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	e02d      	b.n	800801e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2224      	movs	r2, #36	; 0x24
 8007fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 0201 	bic.w	r2, r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f812 	bl	8008028 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2220      	movs	r2, #32
 8008010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
	...

08008028 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008028:	b480      	push	{r7}
 800802a:	b089      	sub	sp, #36	; 0x24
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008030:	4a2f      	ldr	r2, [pc, #188]	; (80080f0 <UARTEx_SetNbDataToProcess+0xc8>)
 8008032:	f107 0314 	add.w	r3, r7, #20
 8008036:	e892 0003 	ldmia.w	r2, {r0, r1}
 800803a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800803e:	4a2d      	ldr	r2, [pc, #180]	; (80080f4 <UARTEx_SetNbDataToProcess+0xcc>)
 8008040:	f107 030c 	add.w	r3, r7, #12
 8008044:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008048:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008050:	2b00      	cmp	r3, #0
 8008052:	d108      	bne.n	8008066 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008064:	e03d      	b.n	80080e2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008066:	2308      	movs	r3, #8
 8008068:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800806a:	2308      	movs	r3, #8
 800806c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	0e5b      	lsrs	r3, r3, #25
 8008076:	b2db      	uxtb	r3, r3
 8008078:	f003 0307 	and.w	r3, r3, #7
 800807c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	0f5b      	lsrs	r3, r3, #29
 8008086:	b2db      	uxtb	r3, r3
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800808e:	7fbb      	ldrb	r3, [r7, #30]
 8008090:	7f3a      	ldrb	r2, [r7, #28]
 8008092:	f107 0120 	add.w	r1, r7, #32
 8008096:	440a      	add	r2, r1
 8008098:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800809c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080a0:	7f3a      	ldrb	r2, [r7, #28]
 80080a2:	f107 0120 	add.w	r1, r7, #32
 80080a6:	440a      	add	r2, r1
 80080a8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080b8:	7ffb      	ldrb	r3, [r7, #31]
 80080ba:	7f7a      	ldrb	r2, [r7, #29]
 80080bc:	f107 0120 	add.w	r1, r7, #32
 80080c0:	440a      	add	r2, r1
 80080c2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80080c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080ca:	7f7a      	ldrb	r2, [r7, #29]
 80080cc:	f107 0120 	add.w	r1, r7, #32
 80080d0:	440a      	add	r2, r1
 80080d2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80080da:	b29a      	uxth	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80080e2:	bf00      	nop
 80080e4:	3724      	adds	r7, #36	; 0x24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	0800b090 	.word	0x0800b090
 80080f4:	0800b098 	.word	0x0800b098

080080f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80080f8:	b480      	push	{r7}
 80080fa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80080fc:	bf00      	nop
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
	...

08008108 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800810e:	f3ef 8305 	mrs	r3, IPSR
 8008112:	60bb      	str	r3, [r7, #8]
  return(result);
 8008114:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10f      	bne.n	800813a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800811a:	f3ef 8310 	mrs	r3, PRIMASK
 800811e:	607b      	str	r3, [r7, #4]
  return(result);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d105      	bne.n	8008132 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008126:	f3ef 8311 	mrs	r3, BASEPRI
 800812a:	603b      	str	r3, [r7, #0]
  return(result);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d007      	beq.n	8008142 <osKernelInitialize+0x3a>
 8008132:	4b0e      	ldr	r3, [pc, #56]	; (800816c <osKernelInitialize+0x64>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b02      	cmp	r3, #2
 8008138:	d103      	bne.n	8008142 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800813a:	f06f 0305 	mvn.w	r3, #5
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	e00c      	b.n	800815c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008142:	4b0a      	ldr	r3, [pc, #40]	; (800816c <osKernelInitialize+0x64>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d105      	bne.n	8008156 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800814a:	4b08      	ldr	r3, [pc, #32]	; (800816c <osKernelInitialize+0x64>)
 800814c:	2201      	movs	r2, #1
 800814e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008150:	2300      	movs	r3, #0
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	e002      	b.n	800815c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800815a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800815c:	68fb      	ldr	r3, [r7, #12]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	200000a4 	.word	0x200000a4

08008170 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008176:	f3ef 8305 	mrs	r3, IPSR
 800817a:	60bb      	str	r3, [r7, #8]
  return(result);
 800817c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10f      	bne.n	80081a2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008182:	f3ef 8310 	mrs	r3, PRIMASK
 8008186:	607b      	str	r3, [r7, #4]
  return(result);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d105      	bne.n	800819a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800818e:	f3ef 8311 	mrs	r3, BASEPRI
 8008192:	603b      	str	r3, [r7, #0]
  return(result);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d007      	beq.n	80081aa <osKernelStart+0x3a>
 800819a:	4b0f      	ldr	r3, [pc, #60]	; (80081d8 <osKernelStart+0x68>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d103      	bne.n	80081aa <osKernelStart+0x3a>
    stat = osErrorISR;
 80081a2:	f06f 0305 	mvn.w	r3, #5
 80081a6:	60fb      	str	r3, [r7, #12]
 80081a8:	e010      	b.n	80081cc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80081aa:	4b0b      	ldr	r3, [pc, #44]	; (80081d8 <osKernelStart+0x68>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d109      	bne.n	80081c6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80081b2:	f7ff ffa1 	bl	80080f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80081b6:	4b08      	ldr	r3, [pc, #32]	; (80081d8 <osKernelStart+0x68>)
 80081b8:	2202      	movs	r2, #2
 80081ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80081bc:	f001 f846 	bl	800924c <vTaskStartScheduler>
      stat = osOK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	60fb      	str	r3, [r7, #12]
 80081c4:	e002      	b.n	80081cc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80081c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80081cc:	68fb      	ldr	r3, [r7, #12]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	200000a4 	.word	0x200000a4

080081dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80081dc:	b580      	push	{r7, lr}
 80081de:	b090      	sub	sp, #64	; 0x40
 80081e0:	af04      	add	r7, sp, #16
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80081e8:	2300      	movs	r3, #0
 80081ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081ec:	f3ef 8305 	mrs	r3, IPSR
 80081f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80081f2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f040 808f 	bne.w	8008318 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081fa:	f3ef 8310 	mrs	r3, PRIMASK
 80081fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d105      	bne.n	8008212 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008206:	f3ef 8311 	mrs	r3, BASEPRI
 800820a:	617b      	str	r3, [r7, #20]
  return(result);
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <osThreadNew+0x3e>
 8008212:	4b44      	ldr	r3, [pc, #272]	; (8008324 <osThreadNew+0x148>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b02      	cmp	r3, #2
 8008218:	d07e      	beq.n	8008318 <osThreadNew+0x13c>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d07b      	beq.n	8008318 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008220:	2380      	movs	r3, #128	; 0x80
 8008222:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008224:	2318      	movs	r3, #24
 8008226:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008228:	2300      	movs	r3, #0
 800822a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800822c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008230:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d045      	beq.n	80082c4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d002      	beq.n	8008246 <osThreadNew+0x6a>
        name = attr->name;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d002      	beq.n	8008254 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	2b00      	cmp	r3, #0
 8008258:	d008      	beq.n	800826c <osThreadNew+0x90>
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	2b38      	cmp	r3, #56	; 0x38
 800825e:	d805      	bhi.n	800826c <osThreadNew+0x90>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f003 0301 	and.w	r3, r3, #1
 8008268:	2b00      	cmp	r3, #0
 800826a:	d001      	beq.n	8008270 <osThreadNew+0x94>
        return (NULL);
 800826c:	2300      	movs	r3, #0
 800826e:	e054      	b.n	800831a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d003      	beq.n	8008280 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	089b      	lsrs	r3, r3, #2
 800827e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00e      	beq.n	80082a6 <osThreadNew+0xca>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	2b5b      	cmp	r3, #91	; 0x5b
 800828e:	d90a      	bls.n	80082a6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008294:	2b00      	cmp	r3, #0
 8008296:	d006      	beq.n	80082a6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <osThreadNew+0xca>
        mem = 1;
 80082a0:	2301      	movs	r3, #1
 80082a2:	623b      	str	r3, [r7, #32]
 80082a4:	e010      	b.n	80082c8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10c      	bne.n	80082c8 <osThreadNew+0xec>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d108      	bne.n	80082c8 <osThreadNew+0xec>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d104      	bne.n	80082c8 <osThreadNew+0xec>
          mem = 0;
 80082be:	2300      	movs	r3, #0
 80082c0:	623b      	str	r3, [r7, #32]
 80082c2:	e001      	b.n	80082c8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80082c4:	2300      	movs	r3, #0
 80082c6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80082c8:	6a3b      	ldr	r3, [r7, #32]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d110      	bne.n	80082f0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80082d6:	9202      	str	r2, [sp, #8]
 80082d8:	9301      	str	r3, [sp, #4]
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 fdeb 	bl	8008ec0 <xTaskCreateStatic>
 80082ea:	4603      	mov	r3, r0
 80082ec:	613b      	str	r3, [r7, #16]
 80082ee:	e013      	b.n	8008318 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d110      	bne.n	8008318 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	f107 0310 	add.w	r3, r7, #16
 80082fe:	9301      	str	r3, [sp, #4]
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f000 fe36 	bl	8008f7a <xTaskCreate>
 800830e:	4603      	mov	r3, r0
 8008310:	2b01      	cmp	r3, #1
 8008312:	d001      	beq.n	8008318 <osThreadNew+0x13c>
          hTask = NULL;
 8008314:	2300      	movs	r3, #0
 8008316:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008318:	693b      	ldr	r3, [r7, #16]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3730      	adds	r7, #48	; 0x30
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	200000a4 	.word	0x200000a4

08008328 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008330:	f3ef 8305 	mrs	r3, IPSR
 8008334:	613b      	str	r3, [r7, #16]
  return(result);
 8008336:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10f      	bne.n	800835c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800833c:	f3ef 8310 	mrs	r3, PRIMASK
 8008340:	60fb      	str	r3, [r7, #12]
  return(result);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d105      	bne.n	8008354 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008348:	f3ef 8311 	mrs	r3, BASEPRI
 800834c:	60bb      	str	r3, [r7, #8]
  return(result);
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d007      	beq.n	8008364 <osDelay+0x3c>
 8008354:	4b0a      	ldr	r3, [pc, #40]	; (8008380 <osDelay+0x58>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b02      	cmp	r3, #2
 800835a:	d103      	bne.n	8008364 <osDelay+0x3c>
    stat = osErrorISR;
 800835c:	f06f 0305 	mvn.w	r3, #5
 8008360:	617b      	str	r3, [r7, #20]
 8008362:	e007      	b.n	8008374 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008364:	2300      	movs	r3, #0
 8008366:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d002      	beq.n	8008374 <osDelay+0x4c>
      vTaskDelay(ticks);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 ff38 	bl	80091e4 <vTaskDelay>
    }
  }

  return (stat);
 8008374:	697b      	ldr	r3, [r7, #20]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3718      	adds	r7, #24
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	200000a4 	.word	0x200000a4

08008384 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	4a07      	ldr	r2, [pc, #28]	; (80083b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008394:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	4a06      	ldr	r2, [pc, #24]	; (80083b4 <vApplicationGetIdleTaskMemory+0x30>)
 800839a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2280      	movs	r2, #128	; 0x80
 80083a0:	601a      	str	r2, [r3, #0]
}
 80083a2:	bf00      	nop
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	200000a8 	.word	0x200000a8
 80083b4:	20000104 	.word	0x20000104

080083b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4a07      	ldr	r2, [pc, #28]	; (80083e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80083c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	4a06      	ldr	r2, [pc, #24]	; (80083e8 <vApplicationGetTimerTaskMemory+0x30>)
 80083ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083d6:	601a      	str	r2, [r3, #0]
}
 80083d8:	bf00      	nop
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	20000304 	.word	0x20000304
 80083e8:	20000360 	.word	0x20000360

080083ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f103 0208 	add.w	r2, r3, #8
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008404:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f103 0208 	add.w	r2, r3, #8
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f103 0208 	add.w	r2, r3, #8
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800843a:	bf00      	nop
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008446:	b480      	push	{r7}
 8008448:	b085      	sub	sp, #20
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	689a      	ldr	r2, [r3, #8]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	1c5a      	adds	r2, r3, #1
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	601a      	str	r2, [r3, #0]
}
 8008482:	bf00      	nop
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800848e:	b480      	push	{r7}
 8008490:	b085      	sub	sp, #20
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084a4:	d103      	bne.n	80084ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	e00c      	b.n	80084c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	3308      	adds	r3, #8
 80084b2:	60fb      	str	r3, [r7, #12]
 80084b4:	e002      	b.n	80084bc <vListInsert+0x2e>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d2f6      	bcs.n	80084b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	683a      	ldr	r2, [r7, #0]
 80084e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	601a      	str	r2, [r3, #0]
}
 80084f4:	bf00      	nop
 80084f6:	3714      	adds	r7, #20
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	6892      	ldr	r2, [r2, #8]
 8008516:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	6852      	ldr	r2, [r2, #4]
 8008520:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	429a      	cmp	r2, r3
 800852a:	d103      	bne.n	8008534 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	689a      	ldr	r2, [r3, #8]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	1e5a      	subs	r2, r3, #1
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10a      	bne.n	800857e <xQueueGenericReset+0x2a>
	__asm volatile
 8008568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856c:	f383 8811 	msr	BASEPRI, r3
 8008570:	f3bf 8f6f 	isb	sy
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	60bb      	str	r3, [r7, #8]
}
 800857a:	bf00      	nop
 800857c:	e7fe      	b.n	800857c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800857e:	f001 ffe1 	bl	800a544 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858a:	68f9      	ldr	r1, [r7, #12]
 800858c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800858e:	fb01 f303 	mul.w	r3, r1, r3
 8008592:	441a      	add	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ae:	3b01      	subs	r3, #1
 80085b0:	68f9      	ldr	r1, [r7, #12]
 80085b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085b4:	fb01 f303 	mul.w	r3, r1, r3
 80085b8:	441a      	add	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	22ff      	movs	r2, #255	; 0xff
 80085c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	22ff      	movs	r2, #255	; 0xff
 80085ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d109      	bne.n	80085e8 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00f      	beq.n	80085fc <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3310      	adds	r3, #16
 80085e0:	4618      	mov	r0, r3
 80085e2:	f001 f899 	bl	8009718 <xTaskRemoveFromEventList>
 80085e6:	e009      	b.n	80085fc <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	3310      	adds	r3, #16
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7ff fefd 	bl	80083ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	3324      	adds	r3, #36	; 0x24
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7ff fef8 	bl	80083ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80085fc:	f001 ffd2 	bl	800a5a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008600:	2301      	movs	r3, #1
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800860a:	b580      	push	{r7, lr}
 800860c:	b08e      	sub	sp, #56	; 0x38
 800860e:	af02      	add	r7, sp, #8
 8008610:	60f8      	str	r0, [r7, #12]
 8008612:	60b9      	str	r1, [r7, #8]
 8008614:	607a      	str	r2, [r7, #4]
 8008616:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10a      	bne.n	8008634 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008630:	bf00      	nop
 8008632:	e7fe      	b.n	8008632 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10a      	bne.n	8008650 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800863a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863e:	f383 8811 	msr	BASEPRI, r3
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800864c:	bf00      	nop
 800864e:	e7fe      	b.n	800864e <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <xQueueGenericCreateStatic+0x52>
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d001      	beq.n	8008660 <xQueueGenericCreateStatic+0x56>
 800865c:	2301      	movs	r3, #1
 800865e:	e000      	b.n	8008662 <xQueueGenericCreateStatic+0x58>
 8008660:	2300      	movs	r3, #0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10a      	bne.n	800867c <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	623b      	str	r3, [r7, #32]
}
 8008678:	bf00      	nop
 800867a:	e7fe      	b.n	800867a <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d102      	bne.n	8008688 <xQueueGenericCreateStatic+0x7e>
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d101      	bne.n	800868c <xQueueGenericCreateStatic+0x82>
 8008688:	2301      	movs	r3, #1
 800868a:	e000      	b.n	800868e <xQueueGenericCreateStatic+0x84>
 800868c:	2300      	movs	r3, #0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10a      	bne.n	80086a8 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	61fb      	str	r3, [r7, #28]
}
 80086a4:	bf00      	nop
 80086a6:	e7fe      	b.n	80086a6 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80086a8:	2350      	movs	r3, #80	; 0x50
 80086aa:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	2b50      	cmp	r3, #80	; 0x50
 80086b0:	d00a      	beq.n	80086c8 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80086b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b6:	f383 8811 	msr	BASEPRI, r3
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	61bb      	str	r3, [r7, #24]
}
 80086c4:	bf00      	nop
 80086c6:	e7fe      	b.n	80086c6 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80086c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80086ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00d      	beq.n	80086f0 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80086d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086dc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80086e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	4613      	mov	r3, r2
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	68b9      	ldr	r1, [r7, #8]
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f000 f805 	bl	80086fa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3730      	adds	r7, #48	; 0x30
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b084      	sub	sp, #16
 80086fe:	af00      	add	r7, sp, #0
 8008700:	60f8      	str	r0, [r7, #12]
 8008702:	60b9      	str	r1, [r7, #8]
 8008704:	607a      	str	r2, [r7, #4]
 8008706:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d103      	bne.n	8008716 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	69ba      	ldr	r2, [r7, #24]
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	e002      	b.n	800871c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008728:	2101      	movs	r1, #1
 800872a:	69b8      	ldr	r0, [r7, #24]
 800872c:	f7ff ff12 	bl	8008554 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	78fa      	ldrb	r2, [r7, #3]
 8008734:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008738:	bf00      	nop
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b08e      	sub	sp, #56	; 0x38
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
 800874c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800874e:	2300      	movs	r3, #0
 8008750:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10a      	bne.n	8008772 <xQueueGenericSend+0x32>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800876e:	bf00      	nop
 8008770:	e7fe      	b.n	8008770 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d103      	bne.n	8008780 <xQueueGenericSend+0x40>
 8008778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <xQueueGenericSend+0x44>
 8008780:	2301      	movs	r3, #1
 8008782:	e000      	b.n	8008786 <xQueueGenericSend+0x46>
 8008784:	2300      	movs	r3, #0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10a      	bne.n	80087a0 <xQueueGenericSend+0x60>
	__asm volatile
 800878a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878e:	f383 8811 	msr	BASEPRI, r3
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800879c:	bf00      	nop
 800879e:	e7fe      	b.n	800879e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d103      	bne.n	80087ae <xQueueGenericSend+0x6e>
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d101      	bne.n	80087b2 <xQueueGenericSend+0x72>
 80087ae:	2301      	movs	r3, #1
 80087b0:	e000      	b.n	80087b4 <xQueueGenericSend+0x74>
 80087b2:	2300      	movs	r3, #0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10a      	bne.n	80087ce <xQueueGenericSend+0x8e>
	__asm volatile
 80087b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087bc:	f383 8811 	msr	BASEPRI, r3
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	623b      	str	r3, [r7, #32]
}
 80087ca:	bf00      	nop
 80087cc:	e7fe      	b.n	80087cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087ce:	f001 f95b 	bl	8009a88 <xTaskGetSchedulerState>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d102      	bne.n	80087de <xQueueGenericSend+0x9e>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <xQueueGenericSend+0xa2>
 80087de:	2301      	movs	r3, #1
 80087e0:	e000      	b.n	80087e4 <xQueueGenericSend+0xa4>
 80087e2:	2300      	movs	r3, #0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10a      	bne.n	80087fe <xQueueGenericSend+0xbe>
	__asm volatile
 80087e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ec:	f383 8811 	msr	BASEPRI, r3
 80087f0:	f3bf 8f6f 	isb	sy
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	61fb      	str	r3, [r7, #28]
}
 80087fa:	bf00      	nop
 80087fc:	e7fe      	b.n	80087fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087fe:	f001 fea1 	bl	800a544 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800880a:	429a      	cmp	r2, r3
 800880c:	d302      	bcc.n	8008814 <xQueueGenericSend+0xd4>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b02      	cmp	r3, #2
 8008812:	d112      	bne.n	800883a <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	68b9      	ldr	r1, [r7, #8]
 8008818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800881a:	f000 f9e3 	bl	8008be4 <prvCopyDataToQueue>
 800881e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008824:	2b00      	cmp	r3, #0
 8008826:	d004      	beq.n	8008832 <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882a:	3324      	adds	r3, #36	; 0x24
 800882c:	4618      	mov	r0, r3
 800882e:	f000 ff73 	bl	8009718 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008832:	f001 feb7 	bl	800a5a4 <vPortExitCritical>
				return pdPASS;
 8008836:	2301      	movs	r3, #1
 8008838:	e062      	b.n	8008900 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d103      	bne.n	8008848 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008840:	f001 feb0 	bl	800a5a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008844:	2300      	movs	r3, #0
 8008846:	e05b      	b.n	8008900 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884a:	2b00      	cmp	r3, #0
 800884c:	d106      	bne.n	800885c <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800884e:	f107 0314 	add.w	r3, r7, #20
 8008852:	4618      	mov	r0, r3
 8008854:	f000 ffc4 	bl	80097e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008858:	2301      	movs	r3, #1
 800885a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800885c:	f001 fea2 	bl	800a5a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008860:	f000 fd5a 	bl	8009318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008864:	f001 fe6e 	bl	800a544 <vPortEnterCritical>
 8008868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800886e:	b25b      	sxtb	r3, r3
 8008870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008874:	d103      	bne.n	800887e <xQueueGenericSend+0x13e>
 8008876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008884:	b25b      	sxtb	r3, r3
 8008886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800888a:	d103      	bne.n	8008894 <xQueueGenericSend+0x154>
 800888c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888e:	2200      	movs	r2, #0
 8008890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008894:	f001 fe86 	bl	800a5a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008898:	1d3a      	adds	r2, r7, #4
 800889a:	f107 0314 	add.w	r3, r7, #20
 800889e:	4611      	mov	r1, r2
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 ffb3 	bl	800980c <xTaskCheckForTimeOut>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d123      	bne.n	80088f4 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088ae:	f000 fa91 	bl	8008dd4 <prvIsQueueFull>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d017      	beq.n	80088e8 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ba:	3310      	adds	r3, #16
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	4611      	mov	r1, r2
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 fed9 	bl	8009678 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80088c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088c8:	f000 fa1c 	bl	8008d04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80088cc:	f000 fd32 	bl	8009334 <xTaskResumeAll>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d193      	bne.n	80087fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80088d6:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <xQueueGenericSend+0x1c8>)
 80088d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	e78a      	b.n	80087fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80088e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088ea:	f000 fa0b 	bl	8008d04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088ee:	f000 fd21 	bl	8009334 <xTaskResumeAll>
 80088f2:	e784      	b.n	80087fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80088f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088f6:	f000 fa05 	bl	8008d04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088fa:	f000 fd1b 	bl	8009334 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80088fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008900:	4618      	mov	r0, r3
 8008902:	3738      	adds	r7, #56	; 0x38
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	e000ed04 	.word	0xe000ed04

0800890c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b08e      	sub	sp, #56	; 0x38
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
 8008918:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10a      	bne.n	800893a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008936:	bf00      	nop
 8008938:	e7fe      	b.n	8008938 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d103      	bne.n	8008948 <xQueueGenericSendFromISR+0x3c>
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008944:	2b00      	cmp	r3, #0
 8008946:	d101      	bne.n	800894c <xQueueGenericSendFromISR+0x40>
 8008948:	2301      	movs	r3, #1
 800894a:	e000      	b.n	800894e <xQueueGenericSendFromISR+0x42>
 800894c:	2300      	movs	r3, #0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10a      	bne.n	8008968 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008956:	f383 8811 	msr	BASEPRI, r3
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	623b      	str	r3, [r7, #32]
}
 8008964:	bf00      	nop
 8008966:	e7fe      	b.n	8008966 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	2b02      	cmp	r3, #2
 800896c:	d103      	bne.n	8008976 <xQueueGenericSendFromISR+0x6a>
 800896e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008972:	2b01      	cmp	r3, #1
 8008974:	d101      	bne.n	800897a <xQueueGenericSendFromISR+0x6e>
 8008976:	2301      	movs	r3, #1
 8008978:	e000      	b.n	800897c <xQueueGenericSendFromISR+0x70>
 800897a:	2300      	movs	r3, #0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10a      	bne.n	8008996 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	61fb      	str	r3, [r7, #28]
}
 8008992:	bf00      	nop
 8008994:	e7fe      	b.n	8008994 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008996:	f001 feb7 	bl	800a708 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800899a:	f3ef 8211 	mrs	r2, BASEPRI
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	61ba      	str	r2, [r7, #24]
 80089b0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089b2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089be:	429a      	cmp	r2, r3
 80089c0:	d302      	bcc.n	80089c8 <xQueueGenericSendFromISR+0xbc>
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d12c      	bne.n	8008a22 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089d2:	683a      	ldr	r2, [r7, #0]
 80089d4:	68b9      	ldr	r1, [r7, #8]
 80089d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089d8:	f000 f904 	bl	8008be4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089dc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80089e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089e4:	d112      	bne.n	8008a0c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d016      	beq.n	8008a1c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f0:	3324      	adds	r3, #36	; 0x24
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 fe90 	bl	8009718 <xTaskRemoveFromEventList>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00e      	beq.n	8008a1c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00b      	beq.n	8008a1c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	e007      	b.n	8008a1c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a10:	3301      	adds	r3, #1
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	b25a      	sxtb	r2, r3
 8008a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008a20:	e001      	b.n	8008a26 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a22:	2300      	movs	r3, #0
 8008a24:	637b      	str	r3, [r7, #52]	; 0x34
 8008a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a28:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3738      	adds	r7, #56	; 0x38
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b08c      	sub	sp, #48	; 0x30
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10a      	bne.n	8008a6c <xQueueReceive+0x30>
	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	623b      	str	r3, [r7, #32]
}
 8008a68:	bf00      	nop
 8008a6a:	e7fe      	b.n	8008a6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d103      	bne.n	8008a7a <xQueueReceive+0x3e>
 8008a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d101      	bne.n	8008a7e <xQueueReceive+0x42>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e000      	b.n	8008a80 <xQueueReceive+0x44>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10a      	bne.n	8008a9a <xQueueReceive+0x5e>
	__asm volatile
 8008a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	61fb      	str	r3, [r7, #28]
}
 8008a96:	bf00      	nop
 8008a98:	e7fe      	b.n	8008a98 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a9a:	f000 fff5 	bl	8009a88 <xTaskGetSchedulerState>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d102      	bne.n	8008aaa <xQueueReceive+0x6e>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d101      	bne.n	8008aae <xQueueReceive+0x72>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e000      	b.n	8008ab0 <xQueueReceive+0x74>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d10a      	bne.n	8008aca <xQueueReceive+0x8e>
	__asm volatile
 8008ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab8:	f383 8811 	msr	BASEPRI, r3
 8008abc:	f3bf 8f6f 	isb	sy
 8008ac0:	f3bf 8f4f 	dsb	sy
 8008ac4:	61bb      	str	r3, [r7, #24]
}
 8008ac6:	bf00      	nop
 8008ac8:	e7fe      	b.n	8008ac8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008aca:	f001 fd3b 	bl	800a544 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d014      	beq.n	8008b04 <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ada:	68b9      	ldr	r1, [r7, #8]
 8008adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ade:	f000 f8eb 	bl	8008cb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	1e5a      	subs	r2, r3, #1
 8008ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d004      	beq.n	8008afc <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af4:	3310      	adds	r3, #16
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 fe0e 	bl	8009718 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008afc:	f001 fd52 	bl	800a5a4 <vPortExitCritical>
				return pdPASS;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e069      	b.n	8008bd8 <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d103      	bne.n	8008b12 <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b0a:	f001 fd4b 	bl	800a5a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	e062      	b.n	8008bd8 <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d106      	bne.n	8008b26 <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b18:	f107 0310 	add.w	r3, r7, #16
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f000 fe5f 	bl	80097e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b22:	2301      	movs	r3, #1
 8008b24:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b26:	f001 fd3d 	bl	800a5a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b2a:	f000 fbf5 	bl	8009318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b2e:	f001 fd09 	bl	800a544 <vPortEnterCritical>
 8008b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b38:	b25b      	sxtb	r3, r3
 8008b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b3e:	d103      	bne.n	8008b48 <xQueueReceive+0x10c>
 8008b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b4e:	b25b      	sxtb	r3, r3
 8008b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b54:	d103      	bne.n	8008b5e <xQueueReceive+0x122>
 8008b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b5e:	f001 fd21 	bl	800a5a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b62:	1d3a      	adds	r2, r7, #4
 8008b64:	f107 0310 	add.w	r3, r7, #16
 8008b68:	4611      	mov	r1, r2
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 fe4e 	bl	800980c <xTaskCheckForTimeOut>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d123      	bne.n	8008bbe <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b78:	f000 f916 	bl	8008da8 <prvIsQueueEmpty>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d017      	beq.n	8008bb2 <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b84:	3324      	adds	r3, #36	; 0x24
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	4611      	mov	r1, r2
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 fd74 	bl	8009678 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b92:	f000 f8b7 	bl	8008d04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b96:	f000 fbcd 	bl	8009334 <xTaskResumeAll>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d194      	bne.n	8008aca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008ba0:	4b0f      	ldr	r3, [pc, #60]	; (8008be0 <xQueueReceive+0x1a4>)
 8008ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ba6:	601a      	str	r2, [r3, #0]
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	e78b      	b.n	8008aca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bb4:	f000 f8a6 	bl	8008d04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008bb8:	f000 fbbc 	bl	8009334 <xTaskResumeAll>
 8008bbc:	e785      	b.n	8008aca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bc0:	f000 f8a0 	bl	8008d04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bc4:	f000 fbb6 	bl	8009334 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bca:	f000 f8ed 	bl	8008da8 <prvIsQueueEmpty>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f43f af7a 	beq.w	8008aca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008bd6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3730      	adds	r7, #48	; 0x30
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	e000ed04 	.word	0xe000ed04

08008be4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10d      	bne.n	8008c1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d14d      	bne.n	8008ca6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 ff58 	bl	8009ac4 <xTaskPriorityDisinherit>
 8008c14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	609a      	str	r2, [r3, #8]
 8008c1c:	e043      	b.n	8008ca6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d119      	bne.n	8008c58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6858      	ldr	r0, [r3, #4]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	68b9      	ldr	r1, [r7, #8]
 8008c30:	f001 fff6 	bl	800ac20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3c:	441a      	add	r2, r3
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d32b      	bcc.n	8008ca6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	605a      	str	r2, [r3, #4]
 8008c56:	e026      	b.n	8008ca6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	68d8      	ldr	r0, [r3, #12]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c60:	461a      	mov	r2, r3
 8008c62:	68b9      	ldr	r1, [r7, #8]
 8008c64:	f001 ffdc 	bl	800ac20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	68da      	ldr	r2, [r3, #12]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c70:	425b      	negs	r3, r3
 8008c72:	441a      	add	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	68da      	ldr	r2, [r3, #12]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d207      	bcs.n	8008c94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	689a      	ldr	r2, [r3, #8]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8c:	425b      	negs	r3, r3
 8008c8e:	441a      	add	r2, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d105      	bne.n	8008ca6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008cae:	697b      	ldr	r3, [r7, #20]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3718      	adds	r7, #24
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d018      	beq.n	8008cfc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	68da      	ldr	r2, [r3, #12]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd2:	441a      	add	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68da      	ldr	r2, [r3, #12]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d303      	bcc.n	8008cec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	68d9      	ldr	r1, [r3, #12]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	6838      	ldr	r0, [r7, #0]
 8008cf8:	f001 ff92 	bl	800ac20 <memcpy>
	}
}
 8008cfc:	bf00      	nop
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d0c:	f001 fc1a 	bl	800a544 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d18:	e011      	b.n	8008d3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d012      	beq.n	8008d48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	3324      	adds	r3, #36	; 0x24
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 fcf6 	bl	8009718 <xTaskRemoveFromEventList>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d32:	f000 fdcd 	bl	80098d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	dce9      	bgt.n	8008d1a <prvUnlockQueue+0x16>
 8008d46:	e000      	b.n	8008d4a <prvUnlockQueue+0x46>
					break;
 8008d48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	22ff      	movs	r2, #255	; 0xff
 8008d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008d52:	f001 fc27 	bl	800a5a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d56:	f001 fbf5 	bl	800a544 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d62:	e011      	b.n	8008d88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d012      	beq.n	8008d92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	3310      	adds	r3, #16
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 fcd1 	bl	8009718 <xTaskRemoveFromEventList>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d7c:	f000 fda8 	bl	80098d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d80:	7bbb      	ldrb	r3, [r7, #14]
 8008d82:	3b01      	subs	r3, #1
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	dce9      	bgt.n	8008d64 <prvUnlockQueue+0x60>
 8008d90:	e000      	b.n	8008d94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	22ff      	movs	r2, #255	; 0xff
 8008d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008d9c:	f001 fc02 	bl	800a5a4 <vPortExitCritical>
}
 8008da0:	bf00      	nop
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008db0:	f001 fbc8 	bl	800a544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d102      	bne.n	8008dc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	60fb      	str	r3, [r7, #12]
 8008dc0:	e001      	b.n	8008dc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008dc6:	f001 fbed 	bl	800a5a4 <vPortExitCritical>

	return xReturn;
 8008dca:	68fb      	ldr	r3, [r7, #12]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ddc:	f001 fbb2 	bl	800a544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d102      	bne.n	8008df2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008dec:	2301      	movs	r3, #1
 8008dee:	60fb      	str	r3, [r7, #12]
 8008df0:	e001      	b.n	8008df6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008df2:	2300      	movs	r3, #0
 8008df4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008df6:	f001 fbd5 	bl	800a5a4 <vPortExitCritical>

	return xReturn;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60fb      	str	r3, [r7, #12]
 8008e12:	e014      	b.n	8008e3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e14:	4a0f      	ldr	r2, [pc, #60]	; (8008e54 <vQueueAddToRegistry+0x50>)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10b      	bne.n	8008e38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008e20:	490c      	ldr	r1, [pc, #48]	; (8008e54 <vQueueAddToRegistry+0x50>)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008e2a:	4a0a      	ldr	r2, [pc, #40]	; (8008e54 <vQueueAddToRegistry+0x50>)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	00db      	lsls	r3, r3, #3
 8008e30:	4413      	add	r3, r2
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008e36:	e006      	b.n	8008e46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	60fb      	str	r3, [r7, #12]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2b07      	cmp	r3, #7
 8008e42:	d9e7      	bls.n	8008e14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e44:	bf00      	nop
 8008e46:	bf00      	nop
 8008e48:	3714      	adds	r7, #20
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	2000307c 	.word	0x2000307c

08008e58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e68:	f001 fb6c 	bl	800a544 <vPortEnterCritical>
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e72:	b25b      	sxtb	r3, r3
 8008e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e78:	d103      	bne.n	8008e82 <vQueueWaitForMessageRestricted+0x2a>
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e88:	b25b      	sxtb	r3, r3
 8008e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e8e:	d103      	bne.n	8008e98 <vQueueWaitForMessageRestricted+0x40>
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e98:	f001 fb84 	bl	800a5a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d106      	bne.n	8008eb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	3324      	adds	r3, #36	; 0x24
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	68b9      	ldr	r1, [r7, #8]
 8008eac:	4618      	mov	r0, r3
 8008eae:	f000 fc07 	bl	80096c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008eb2:	6978      	ldr	r0, [r7, #20]
 8008eb4:	f7ff ff26 	bl	8008d04 <prvUnlockQueue>
	}
 8008eb8:	bf00      	nop
 8008eba:	3718      	adds	r7, #24
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b08e      	sub	sp, #56	; 0x38
 8008ec4:	af04      	add	r7, sp, #16
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
 8008ecc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10a      	bne.n	8008eea <xTaskCreateStatic+0x2a>
	__asm volatile
 8008ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	623b      	str	r3, [r7, #32]
}
 8008ee6:	bf00      	nop
 8008ee8:	e7fe      	b.n	8008ee8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10a      	bne.n	8008f06 <xTaskCreateStatic+0x46>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	61fb      	str	r3, [r7, #28]
}
 8008f02:	bf00      	nop
 8008f04:	e7fe      	b.n	8008f04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f06:	235c      	movs	r3, #92	; 0x5c
 8008f08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	2b5c      	cmp	r3, #92	; 0x5c
 8008f0e:	d00a      	beq.n	8008f26 <xTaskCreateStatic+0x66>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	61bb      	str	r3, [r7, #24]
}
 8008f22:	bf00      	nop
 8008f24:	e7fe      	b.n	8008f24 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008f26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d01e      	beq.n	8008f6c <xTaskCreateStatic+0xac>
 8008f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d01b      	beq.n	8008f6c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	2202      	movs	r2, #2
 8008f42:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f46:	2300      	movs	r3, #0
 8008f48:	9303      	str	r3, [sp, #12]
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4c:	9302      	str	r3, [sp, #8]
 8008f4e:	f107 0314 	add.w	r3, r7, #20
 8008f52:	9301      	str	r3, [sp, #4]
 8008f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	68b9      	ldr	r1, [r7, #8]
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f000 f850 	bl	8009004 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f66:	f000 f8dd 	bl	8009124 <prvAddNewTaskToReadyList>
 8008f6a:	e001      	b.n	8008f70 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008f70:	697b      	ldr	r3, [r7, #20]
	}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3728      	adds	r7, #40	; 0x28
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b08c      	sub	sp, #48	; 0x30
 8008f7e:	af04      	add	r7, sp, #16
 8008f80:	60f8      	str	r0, [r7, #12]
 8008f82:	60b9      	str	r1, [r7, #8]
 8008f84:	603b      	str	r3, [r7, #0]
 8008f86:	4613      	mov	r3, r2
 8008f88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f8a:	88fb      	ldrh	r3, [r7, #6]
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f001 fbfa 	bl	800a788 <pvPortMalloc>
 8008f94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00e      	beq.n	8008fba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f9c:	205c      	movs	r0, #92	; 0x5c
 8008f9e:	f001 fbf3 	bl	800a788 <pvPortMalloc>
 8008fa2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d003      	beq.n	8008fb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	631a      	str	r2, [r3, #48]	; 0x30
 8008fb0:	e005      	b.n	8008fbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008fb2:	6978      	ldr	r0, [r7, #20]
 8008fb4:	f001 fcac 	bl	800a910 <vPortFree>
 8008fb8:	e001      	b.n	8008fbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d017      	beq.n	8008ff4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008fcc:	88fa      	ldrh	r2, [r7, #6]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	9303      	str	r3, [sp, #12]
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	9302      	str	r3, [sp, #8]
 8008fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd8:	9301      	str	r3, [sp, #4]
 8008fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fdc:	9300      	str	r3, [sp, #0]
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	68b9      	ldr	r1, [r7, #8]
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f000 f80e 	bl	8009004 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fe8:	69f8      	ldr	r0, [r7, #28]
 8008fea:	f000 f89b 	bl	8009124 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	61bb      	str	r3, [r7, #24]
 8008ff2:	e002      	b.n	8008ffa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ff8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ffa:	69bb      	ldr	r3, [r7, #24]
	}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3720      	adds	r7, #32
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b088      	sub	sp, #32
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	607a      	str	r2, [r7, #4]
 8009010:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	461a      	mov	r2, r3
 800901c:	21a5      	movs	r1, #165	; 0xa5
 800901e:	f001 fe0d 	bl	800ac3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800902c:	3b01      	subs	r3, #1
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	f023 0307 	bic.w	r3, r3, #7
 800903a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	f003 0307 	and.w	r3, r3, #7
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00a      	beq.n	800905c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904a:	f383 8811 	msr	BASEPRI, r3
 800904e:	f3bf 8f6f 	isb	sy
 8009052:	f3bf 8f4f 	dsb	sy
 8009056:	617b      	str	r3, [r7, #20]
}
 8009058:	bf00      	nop
 800905a:	e7fe      	b.n	800905a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d01f      	beq.n	80090a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009062:	2300      	movs	r3, #0
 8009064:	61fb      	str	r3, [r7, #28]
 8009066:	e012      	b.n	800908e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	4413      	add	r3, r2
 800906e:	7819      	ldrb	r1, [r3, #0]
 8009070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	4413      	add	r3, r2
 8009076:	3334      	adds	r3, #52	; 0x34
 8009078:	460a      	mov	r2, r1
 800907a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	4413      	add	r3, r2
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d006      	beq.n	8009096 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	3301      	adds	r3, #1
 800908c:	61fb      	str	r3, [r7, #28]
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	2b0f      	cmp	r3, #15
 8009092:	d9e9      	bls.n	8009068 <prvInitialiseNewTask+0x64>
 8009094:	e000      	b.n	8009098 <prvInitialiseNewTask+0x94>
			{
				break;
 8009096:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909a:	2200      	movs	r2, #0
 800909c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090a0:	e003      	b.n	80090aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80090a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a4:	2200      	movs	r2, #0
 80090a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80090aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ac:	2b37      	cmp	r3, #55	; 0x37
 80090ae:	d901      	bls.n	80090b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80090b0:	2337      	movs	r3, #55	; 0x37
 80090b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80090b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80090ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80090c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c2:	2200      	movs	r2, #0
 80090c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80090c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c8:	3304      	adds	r3, #4
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7ff f9ae 	bl	800842c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80090d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d2:	3318      	adds	r3, #24
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7ff f9a9 	bl	800842c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80090da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80090e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80090ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80090f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f2:	2200      	movs	r2, #0
 80090f4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090fe:	683a      	ldr	r2, [r7, #0]
 8009100:	68f9      	ldr	r1, [r7, #12]
 8009102:	69b8      	ldr	r0, [r7, #24]
 8009104:	f001 f8ee 	bl	800a2e4 <pxPortInitialiseStack>
 8009108:	4602      	mov	r2, r0
 800910a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800910e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009110:	2b00      	cmp	r3, #0
 8009112:	d002      	beq.n	800911a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009118:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800911a:	bf00      	nop
 800911c:	3720      	adds	r7, #32
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
	...

08009124 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800912c:	f001 fa0a 	bl	800a544 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009130:	4b26      	ldr	r3, [pc, #152]	; (80091cc <prvAddNewTaskToReadyList+0xa8>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3301      	adds	r3, #1
 8009136:	4a25      	ldr	r2, [pc, #148]	; (80091cc <prvAddNewTaskToReadyList+0xa8>)
 8009138:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800913a:	4b25      	ldr	r3, [pc, #148]	; (80091d0 <prvAddNewTaskToReadyList+0xac>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d109      	bne.n	8009156 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009142:	4a23      	ldr	r2, [pc, #140]	; (80091d0 <prvAddNewTaskToReadyList+0xac>)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009148:	4b20      	ldr	r3, [pc, #128]	; (80091cc <prvAddNewTaskToReadyList+0xa8>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d110      	bne.n	8009172 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009150:	f000 fbdc 	bl	800990c <prvInitialiseTaskLists>
 8009154:	e00d      	b.n	8009172 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009156:	4b1f      	ldr	r3, [pc, #124]	; (80091d4 <prvAddNewTaskToReadyList+0xb0>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d109      	bne.n	8009172 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800915e:	4b1c      	ldr	r3, [pc, #112]	; (80091d0 <prvAddNewTaskToReadyList+0xac>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009168:	429a      	cmp	r2, r3
 800916a:	d802      	bhi.n	8009172 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800916c:	4a18      	ldr	r2, [pc, #96]	; (80091d0 <prvAddNewTaskToReadyList+0xac>)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009172:	4b19      	ldr	r3, [pc, #100]	; (80091d8 <prvAddNewTaskToReadyList+0xb4>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	3301      	adds	r3, #1
 8009178:	4a17      	ldr	r2, [pc, #92]	; (80091d8 <prvAddNewTaskToReadyList+0xb4>)
 800917a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800917c:	4b16      	ldr	r3, [pc, #88]	; (80091d8 <prvAddNewTaskToReadyList+0xb4>)
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009188:	4b14      	ldr	r3, [pc, #80]	; (80091dc <prvAddNewTaskToReadyList+0xb8>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	429a      	cmp	r2, r3
 800918e:	d903      	bls.n	8009198 <prvAddNewTaskToReadyList+0x74>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009194:	4a11      	ldr	r2, [pc, #68]	; (80091dc <prvAddNewTaskToReadyList+0xb8>)
 8009196:	6013      	str	r3, [r2, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800919c:	4613      	mov	r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	4413      	add	r3, r2
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4a0e      	ldr	r2, [pc, #56]	; (80091e0 <prvAddNewTaskToReadyList+0xbc>)
 80091a6:	441a      	add	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	3304      	adds	r3, #4
 80091ac:	4619      	mov	r1, r3
 80091ae:	4610      	mov	r0, r2
 80091b0:	f7ff f949 	bl	8008446 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80091b4:	f001 f9f6 	bl	800a5a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80091b8:	4b06      	ldr	r3, [pc, #24]	; (80091d4 <prvAddNewTaskToReadyList+0xb0>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80091c0:	4b03      	ldr	r3, [pc, #12]	; (80091d0 <prvAddNewTaskToReadyList+0xac>)
 80091c2:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091c4:	bf00      	nop
 80091c6:	3708      	adds	r7, #8
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	20000c34 	.word	0x20000c34
 80091d0:	20000760 	.word	0x20000760
 80091d4:	20000c40 	.word	0x20000c40
 80091d8:	20000c50 	.word	0x20000c50
 80091dc:	20000c3c 	.word	0x20000c3c
 80091e0:	20000764 	.word	0x20000764

080091e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80091ec:	2300      	movs	r3, #0
 80091ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d017      	beq.n	8009226 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80091f6:	4b13      	ldr	r3, [pc, #76]	; (8009244 <vTaskDelay+0x60>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00a      	beq.n	8009214 <vTaskDelay+0x30>
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	60bb      	str	r3, [r7, #8]
}
 8009210:	bf00      	nop
 8009212:	e7fe      	b.n	8009212 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009214:	f000 f880 	bl	8009318 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009218:	2100      	movs	r1, #0
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fcc0 	bl	8009ba0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009220:	f000 f888 	bl	8009334 <xTaskResumeAll>
 8009224:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d107      	bne.n	800923c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800922c:	4b06      	ldr	r3, [pc, #24]	; (8009248 <vTaskDelay+0x64>)
 800922e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009232:	601a      	str	r2, [r3, #0]
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800923c:	bf00      	nop
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	20000c5c 	.word	0x20000c5c
 8009248:	e000ed04 	.word	0xe000ed04

0800924c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b08a      	sub	sp, #40	; 0x28
 8009250:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009252:	2300      	movs	r3, #0
 8009254:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009256:	2300      	movs	r3, #0
 8009258:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800925a:	463a      	mov	r2, r7
 800925c:	1d39      	adds	r1, r7, #4
 800925e:	f107 0308 	add.w	r3, r7, #8
 8009262:	4618      	mov	r0, r3
 8009264:	f7ff f88e 	bl	8008384 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	9202      	str	r2, [sp, #8]
 8009270:	9301      	str	r3, [sp, #4]
 8009272:	2300      	movs	r3, #0
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	2300      	movs	r3, #0
 8009278:	460a      	mov	r2, r1
 800927a:	4921      	ldr	r1, [pc, #132]	; (8009300 <vTaskStartScheduler+0xb4>)
 800927c:	4821      	ldr	r0, [pc, #132]	; (8009304 <vTaskStartScheduler+0xb8>)
 800927e:	f7ff fe1f 	bl	8008ec0 <xTaskCreateStatic>
 8009282:	4603      	mov	r3, r0
 8009284:	4a20      	ldr	r2, [pc, #128]	; (8009308 <vTaskStartScheduler+0xbc>)
 8009286:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009288:	4b1f      	ldr	r3, [pc, #124]	; (8009308 <vTaskStartScheduler+0xbc>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d002      	beq.n	8009296 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009290:	2301      	movs	r3, #1
 8009292:	617b      	str	r3, [r7, #20]
 8009294:	e001      	b.n	800929a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009296:	2300      	movs	r3, #0
 8009298:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d102      	bne.n	80092a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80092a0:	f000 fcd2 	bl	8009c48 <xTimerCreateTimerTask>
 80092a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d116      	bne.n	80092da <vTaskStartScheduler+0x8e>
	__asm volatile
 80092ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b0:	f383 8811 	msr	BASEPRI, r3
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	613b      	str	r3, [r7, #16]
}
 80092be:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80092c0:	4b12      	ldr	r3, [pc, #72]	; (800930c <vTaskStartScheduler+0xc0>)
 80092c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80092c8:	4b11      	ldr	r3, [pc, #68]	; (8009310 <vTaskStartScheduler+0xc4>)
 80092ca:	2201      	movs	r2, #1
 80092cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80092ce:	4b11      	ldr	r3, [pc, #68]	; (8009314 <vTaskStartScheduler+0xc8>)
 80092d0:	2200      	movs	r2, #0
 80092d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80092d4:	f001 f894 	bl	800a400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092d8:	e00e      	b.n	80092f8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092e0:	d10a      	bne.n	80092f8 <vTaskStartScheduler+0xac>
	__asm volatile
 80092e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	60fb      	str	r3, [r7, #12]
}
 80092f4:	bf00      	nop
 80092f6:	e7fe      	b.n	80092f6 <vTaskStartScheduler+0xaa>
}
 80092f8:	bf00      	nop
 80092fa:	3718      	adds	r7, #24
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	0800b0a0 	.word	0x0800b0a0
 8009304:	080098e9 	.word	0x080098e9
 8009308:	20000c58 	.word	0x20000c58
 800930c:	20000c54 	.word	0x20000c54
 8009310:	20000c40 	.word	0x20000c40
 8009314:	20000c38 	.word	0x20000c38

08009318 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009318:	b480      	push	{r7}
 800931a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800931c:	4b04      	ldr	r3, [pc, #16]	; (8009330 <vTaskSuspendAll+0x18>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3301      	adds	r3, #1
 8009322:	4a03      	ldr	r2, [pc, #12]	; (8009330 <vTaskSuspendAll+0x18>)
 8009324:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009326:	bf00      	nop
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	20000c5c 	.word	0x20000c5c

08009334 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800933a:	2300      	movs	r3, #0
 800933c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800933e:	2300      	movs	r3, #0
 8009340:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009342:	4b3c      	ldr	r3, [pc, #240]	; (8009434 <xTaskResumeAll+0x100>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10a      	bne.n	8009360 <xTaskResumeAll+0x2c>
	__asm volatile
 800934a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	603b      	str	r3, [r7, #0]
}
 800935c:	bf00      	nop
 800935e:	e7fe      	b.n	800935e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009360:	f001 f8f0 	bl	800a544 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009364:	4b33      	ldr	r3, [pc, #204]	; (8009434 <xTaskResumeAll+0x100>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3b01      	subs	r3, #1
 800936a:	4a32      	ldr	r2, [pc, #200]	; (8009434 <xTaskResumeAll+0x100>)
 800936c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800936e:	4b31      	ldr	r3, [pc, #196]	; (8009434 <xTaskResumeAll+0x100>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d156      	bne.n	8009424 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009376:	4b30      	ldr	r3, [pc, #192]	; (8009438 <xTaskResumeAll+0x104>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d052      	beq.n	8009424 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800937e:	e02f      	b.n	80093e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009380:	4b2e      	ldr	r3, [pc, #184]	; (800943c <xTaskResumeAll+0x108>)
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	3318      	adds	r3, #24
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff f8b7 	bl	8008500 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	3304      	adds	r3, #4
 8009396:	4618      	mov	r0, r3
 8009398:	f7ff f8b2 	bl	8008500 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a0:	4b27      	ldr	r3, [pc, #156]	; (8009440 <xTaskResumeAll+0x10c>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d903      	bls.n	80093b0 <xTaskResumeAll+0x7c>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ac:	4a24      	ldr	r2, [pc, #144]	; (8009440 <xTaskResumeAll+0x10c>)
 80093ae:	6013      	str	r3, [r2, #0]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b4:	4613      	mov	r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	4413      	add	r3, r2
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	4a21      	ldr	r2, [pc, #132]	; (8009444 <xTaskResumeAll+0x110>)
 80093be:	441a      	add	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	3304      	adds	r3, #4
 80093c4:	4619      	mov	r1, r3
 80093c6:	4610      	mov	r0, r2
 80093c8:	f7ff f83d 	bl	8008446 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d0:	4b1d      	ldr	r3, [pc, #116]	; (8009448 <xTaskResumeAll+0x114>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d302      	bcc.n	80093e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80093da:	4b1c      	ldr	r3, [pc, #112]	; (800944c <xTaskResumeAll+0x118>)
 80093dc:	2201      	movs	r2, #1
 80093de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093e0:	4b16      	ldr	r3, [pc, #88]	; (800943c <xTaskResumeAll+0x108>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1cb      	bne.n	8009380 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093ee:	f000 fb2b 	bl	8009a48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80093f2:	4b17      	ldr	r3, [pc, #92]	; (8009450 <xTaskResumeAll+0x11c>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d010      	beq.n	8009420 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80093fe:	f000 f839 	bl	8009474 <xTaskIncrementTick>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009408:	4b10      	ldr	r3, [pc, #64]	; (800944c <xTaskResumeAll+0x118>)
 800940a:	2201      	movs	r2, #1
 800940c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	3b01      	subs	r3, #1
 8009412:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1f1      	bne.n	80093fe <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800941a:	4b0d      	ldr	r3, [pc, #52]	; (8009450 <xTaskResumeAll+0x11c>)
 800941c:	2200      	movs	r2, #0
 800941e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009420:	4b0a      	ldr	r3, [pc, #40]	; (800944c <xTaskResumeAll+0x118>)
 8009422:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009424:	f001 f8be 	bl	800a5a4 <vPortExitCritical>

	return xAlreadyYielded;
 8009428:	687b      	ldr	r3, [r7, #4]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	20000c5c 	.word	0x20000c5c
 8009438:	20000c34 	.word	0x20000c34
 800943c:	20000bf4 	.word	0x20000bf4
 8009440:	20000c3c 	.word	0x20000c3c
 8009444:	20000764 	.word	0x20000764
 8009448:	20000760 	.word	0x20000760
 800944c:	20000c48 	.word	0x20000c48
 8009450:	20000c44 	.word	0x20000c44

08009454 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800945a:	4b05      	ldr	r3, [pc, #20]	; (8009470 <xTaskGetTickCount+0x1c>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009460:	687b      	ldr	r3, [r7, #4]
}
 8009462:	4618      	mov	r0, r3
 8009464:	370c      	adds	r7, #12
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	20000c38 	.word	0x20000c38

08009474 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800947a:	2300      	movs	r3, #0
 800947c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800947e:	4b3f      	ldr	r3, [pc, #252]	; (800957c <xTaskIncrementTick+0x108>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d170      	bne.n	8009568 <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009486:	4b3e      	ldr	r3, [pc, #248]	; (8009580 <xTaskIncrementTick+0x10c>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3301      	adds	r3, #1
 800948c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800948e:	4a3c      	ldr	r2, [pc, #240]	; (8009580 <xTaskIncrementTick+0x10c>)
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d120      	bne.n	80094dc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800949a:	4b3a      	ldr	r3, [pc, #232]	; (8009584 <xTaskIncrementTick+0x110>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00a      	beq.n	80094ba <xTaskIncrementTick+0x46>
	__asm volatile
 80094a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a8:	f383 8811 	msr	BASEPRI, r3
 80094ac:	f3bf 8f6f 	isb	sy
 80094b0:	f3bf 8f4f 	dsb	sy
 80094b4:	603b      	str	r3, [r7, #0]
}
 80094b6:	bf00      	nop
 80094b8:	e7fe      	b.n	80094b8 <xTaskIncrementTick+0x44>
 80094ba:	4b32      	ldr	r3, [pc, #200]	; (8009584 <xTaskIncrementTick+0x110>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	60fb      	str	r3, [r7, #12]
 80094c0:	4b31      	ldr	r3, [pc, #196]	; (8009588 <xTaskIncrementTick+0x114>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a2f      	ldr	r2, [pc, #188]	; (8009584 <xTaskIncrementTick+0x110>)
 80094c6:	6013      	str	r3, [r2, #0]
 80094c8:	4a2f      	ldr	r2, [pc, #188]	; (8009588 <xTaskIncrementTick+0x114>)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	4b2f      	ldr	r3, [pc, #188]	; (800958c <xTaskIncrementTick+0x118>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3301      	adds	r3, #1
 80094d4:	4a2d      	ldr	r2, [pc, #180]	; (800958c <xTaskIncrementTick+0x118>)
 80094d6:	6013      	str	r3, [r2, #0]
 80094d8:	f000 fab6 	bl	8009a48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80094dc:	4b2c      	ldr	r3, [pc, #176]	; (8009590 <xTaskIncrementTick+0x11c>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d345      	bcc.n	8009572 <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094e6:	4b27      	ldr	r3, [pc, #156]	; (8009584 <xTaskIncrementTick+0x110>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d104      	bne.n	80094fa <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094f0:	4b27      	ldr	r3, [pc, #156]	; (8009590 <xTaskIncrementTick+0x11c>)
 80094f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094f6:	601a      	str	r2, [r3, #0]
					break;
 80094f8:	e03b      	b.n	8009572 <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094fa:	4b22      	ldr	r3, [pc, #136]	; (8009584 <xTaskIncrementTick+0x110>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800950a:	693a      	ldr	r2, [r7, #16]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	429a      	cmp	r2, r3
 8009510:	d203      	bcs.n	800951a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009512:	4a1f      	ldr	r2, [pc, #124]	; (8009590 <xTaskIncrementTick+0x11c>)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009518:	e02b      	b.n	8009572 <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	3304      	adds	r3, #4
 800951e:	4618      	mov	r0, r3
 8009520:	f7fe ffee 	bl	8008500 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009528:	2b00      	cmp	r3, #0
 800952a:	d004      	beq.n	8009536 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	3318      	adds	r3, #24
 8009530:	4618      	mov	r0, r3
 8009532:	f7fe ffe5 	bl	8008500 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800953a:	4b16      	ldr	r3, [pc, #88]	; (8009594 <xTaskIncrementTick+0x120>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	429a      	cmp	r2, r3
 8009540:	d903      	bls.n	800954a <xTaskIncrementTick+0xd6>
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009546:	4a13      	ldr	r2, [pc, #76]	; (8009594 <xTaskIncrementTick+0x120>)
 8009548:	6013      	str	r3, [r2, #0]
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800954e:	4613      	mov	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4a10      	ldr	r2, [pc, #64]	; (8009598 <xTaskIncrementTick+0x124>)
 8009558:	441a      	add	r2, r3
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	3304      	adds	r3, #4
 800955e:	4619      	mov	r1, r3
 8009560:	4610      	mov	r0, r2
 8009562:	f7fe ff70 	bl	8008446 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009566:	e7be      	b.n	80094e6 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009568:	4b0c      	ldr	r3, [pc, #48]	; (800959c <xTaskIncrementTick+0x128>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3301      	adds	r3, #1
 800956e:	4a0b      	ldr	r2, [pc, #44]	; (800959c <xTaskIncrementTick+0x128>)
 8009570:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009572:	697b      	ldr	r3, [r7, #20]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3718      	adds	r7, #24
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	20000c5c 	.word	0x20000c5c
 8009580:	20000c38 	.word	0x20000c38
 8009584:	20000bec 	.word	0x20000bec
 8009588:	20000bf0 	.word	0x20000bf0
 800958c:	20000c4c 	.word	0x20000c4c
 8009590:	20000c54 	.word	0x20000c54
 8009594:	20000c3c 	.word	0x20000c3c
 8009598:	20000764 	.word	0x20000764
 800959c:	20000c44 	.word	0x20000c44

080095a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095a6:	4b2f      	ldr	r3, [pc, #188]	; (8009664 <vTaskSwitchContext+0xc4>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d003      	beq.n	80095b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80095ae:	4b2e      	ldr	r3, [pc, #184]	; (8009668 <vTaskSwitchContext+0xc8>)
 80095b0:	2201      	movs	r2, #1
 80095b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80095b4:	e052      	b.n	800965c <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 80095b6:	4b2c      	ldr	r3, [pc, #176]	; (8009668 <vTaskSwitchContext+0xc8>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80095bc:	4b2b      	ldr	r3, [pc, #172]	; (800966c <vTaskSwitchContext+0xcc>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	4b2a      	ldr	r3, [pc, #168]	; (800966c <vTaskSwitchContext+0xcc>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d808      	bhi.n	80095de <vTaskSwitchContext+0x3e>
 80095cc:	4b27      	ldr	r3, [pc, #156]	; (800966c <vTaskSwitchContext+0xcc>)
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	4b26      	ldr	r3, [pc, #152]	; (800966c <vTaskSwitchContext+0xcc>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	3334      	adds	r3, #52	; 0x34
 80095d6:	4619      	mov	r1, r3
 80095d8:	4610      	mov	r0, r2
 80095da:	f7f7 fbc3 	bl	8000d64 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095de:	4b24      	ldr	r3, [pc, #144]	; (8009670 <vTaskSwitchContext+0xd0>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	60fb      	str	r3, [r7, #12]
 80095e4:	e010      	b.n	8009608 <vTaskSwitchContext+0x68>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10a      	bne.n	8009602 <vTaskSwitchContext+0x62>
	__asm volatile
 80095ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f0:	f383 8811 	msr	BASEPRI, r3
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	607b      	str	r3, [r7, #4]
}
 80095fe:	bf00      	nop
 8009600:	e7fe      	b.n	8009600 <vTaskSwitchContext+0x60>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	3b01      	subs	r3, #1
 8009606:	60fb      	str	r3, [r7, #12]
 8009608:	491a      	ldr	r1, [pc, #104]	; (8009674 <vTaskSwitchContext+0xd4>)
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	4613      	mov	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4413      	add	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	440b      	add	r3, r1
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d0e4      	beq.n	80095e6 <vTaskSwitchContext+0x46>
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	4613      	mov	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4a13      	ldr	r2, [pc, #76]	; (8009674 <vTaskSwitchContext+0xd4>)
 8009628:	4413      	add	r3, r2
 800962a:	60bb      	str	r3, [r7, #8]
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	685a      	ldr	r2, [r3, #4]
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	605a      	str	r2, [r3, #4]
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	685a      	ldr	r2, [r3, #4]
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	3308      	adds	r3, #8
 800963e:	429a      	cmp	r2, r3
 8009640:	d104      	bne.n	800964c <vTaskSwitchContext+0xac>
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	605a      	str	r2, [r3, #4]
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	4a06      	ldr	r2, [pc, #24]	; (800966c <vTaskSwitchContext+0xcc>)
 8009654:	6013      	str	r3, [r2, #0]
 8009656:	4a06      	ldr	r2, [pc, #24]	; (8009670 <vTaskSwitchContext+0xd0>)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6013      	str	r3, [r2, #0]
}
 800965c:	bf00      	nop
 800965e:	3710      	adds	r7, #16
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	20000c5c 	.word	0x20000c5c
 8009668:	20000c48 	.word	0x20000c48
 800966c:	20000760 	.word	0x20000760
 8009670:	20000c3c 	.word	0x20000c3c
 8009674:	20000764 	.word	0x20000764

08009678 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10a      	bne.n	800969e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	60fb      	str	r3, [r7, #12]
}
 800969a:	bf00      	nop
 800969c:	e7fe      	b.n	800969c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800969e:	4b07      	ldr	r3, [pc, #28]	; (80096bc <vTaskPlaceOnEventList+0x44>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	3318      	adds	r3, #24
 80096a4:	4619      	mov	r1, r3
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f7fe fef1 	bl	800848e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096ac:	2101      	movs	r1, #1
 80096ae:	6838      	ldr	r0, [r7, #0]
 80096b0:	f000 fa76 	bl	8009ba0 <prvAddCurrentTaskToDelayedList>
}
 80096b4:	bf00      	nop
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	20000760 	.word	0x20000760

080096c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d10a      	bne.n	80096e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80096d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	617b      	str	r3, [r7, #20]
}
 80096e4:	bf00      	nop
 80096e6:	e7fe      	b.n	80096e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096e8:	4b0a      	ldr	r3, [pc, #40]	; (8009714 <vTaskPlaceOnEventListRestricted+0x54>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	3318      	adds	r3, #24
 80096ee:	4619      	mov	r1, r3
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f7fe fea8 	bl	8008446 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d002      	beq.n	8009702 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80096fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009700:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009702:	6879      	ldr	r1, [r7, #4]
 8009704:	68b8      	ldr	r0, [r7, #8]
 8009706:	f000 fa4b 	bl	8009ba0 <prvAddCurrentTaskToDelayedList>
	}
 800970a:	bf00      	nop
 800970c:	3718      	adds	r7, #24
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	20000760 	.word	0x20000760

08009718 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10a      	bne.n	8009744 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	60fb      	str	r3, [r7, #12]
}
 8009740:	bf00      	nop
 8009742:	e7fe      	b.n	8009742 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	3318      	adds	r3, #24
 8009748:	4618      	mov	r0, r3
 800974a:	f7fe fed9 	bl	8008500 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800974e:	4b1e      	ldr	r3, [pc, #120]	; (80097c8 <xTaskRemoveFromEventList+0xb0>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d11d      	bne.n	8009792 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	3304      	adds	r3, #4
 800975a:	4618      	mov	r0, r3
 800975c:	f7fe fed0 	bl	8008500 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009764:	4b19      	ldr	r3, [pc, #100]	; (80097cc <xTaskRemoveFromEventList+0xb4>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	429a      	cmp	r2, r3
 800976a:	d903      	bls.n	8009774 <xTaskRemoveFromEventList+0x5c>
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009770:	4a16      	ldr	r2, [pc, #88]	; (80097cc <xTaskRemoveFromEventList+0xb4>)
 8009772:	6013      	str	r3, [r2, #0]
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009778:	4613      	mov	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	4a13      	ldr	r2, [pc, #76]	; (80097d0 <xTaskRemoveFromEventList+0xb8>)
 8009782:	441a      	add	r2, r3
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	3304      	adds	r3, #4
 8009788:	4619      	mov	r1, r3
 800978a:	4610      	mov	r0, r2
 800978c:	f7fe fe5b 	bl	8008446 <vListInsertEnd>
 8009790:	e005      	b.n	800979e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	3318      	adds	r3, #24
 8009796:	4619      	mov	r1, r3
 8009798:	480e      	ldr	r0, [pc, #56]	; (80097d4 <xTaskRemoveFromEventList+0xbc>)
 800979a:	f7fe fe54 	bl	8008446 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a2:	4b0d      	ldr	r3, [pc, #52]	; (80097d8 <xTaskRemoveFromEventList+0xc0>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d905      	bls.n	80097b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80097ac:	2301      	movs	r3, #1
 80097ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80097b0:	4b0a      	ldr	r3, [pc, #40]	; (80097dc <xTaskRemoveFromEventList+0xc4>)
 80097b2:	2201      	movs	r2, #1
 80097b4:	601a      	str	r2, [r3, #0]
 80097b6:	e001      	b.n	80097bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80097b8:	2300      	movs	r3, #0
 80097ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80097bc:	697b      	ldr	r3, [r7, #20]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3718      	adds	r7, #24
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	20000c5c 	.word	0x20000c5c
 80097cc:	20000c3c 	.word	0x20000c3c
 80097d0:	20000764 	.word	0x20000764
 80097d4:	20000bf4 	.word	0x20000bf4
 80097d8:	20000760 	.word	0x20000760
 80097dc:	20000c48 	.word	0x20000c48

080097e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097e8:	4b06      	ldr	r3, [pc, #24]	; (8009804 <vTaskInternalSetTimeOutState+0x24>)
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80097f0:	4b05      	ldr	r3, [pc, #20]	; (8009808 <vTaskInternalSetTimeOutState+0x28>)
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	605a      	str	r2, [r3, #4]
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr
 8009804:	20000c4c 	.word	0x20000c4c
 8009808:	20000c38 	.word	0x20000c38

0800980c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b088      	sub	sp, #32
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10a      	bne.n	8009832 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800981c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009820:	f383 8811 	msr	BASEPRI, r3
 8009824:	f3bf 8f6f 	isb	sy
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	613b      	str	r3, [r7, #16]
}
 800982e:	bf00      	nop
 8009830:	e7fe      	b.n	8009830 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10a      	bne.n	800984e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983c:	f383 8811 	msr	BASEPRI, r3
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	60fb      	str	r3, [r7, #12]
}
 800984a:	bf00      	nop
 800984c:	e7fe      	b.n	800984c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800984e:	f000 fe79 	bl	800a544 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009852:	4b1d      	ldr	r3, [pc, #116]	; (80098c8 <xTaskCheckForTimeOut+0xbc>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	69ba      	ldr	r2, [r7, #24]
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800986a:	d102      	bne.n	8009872 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800986c:	2300      	movs	r3, #0
 800986e:	61fb      	str	r3, [r7, #28]
 8009870:	e023      	b.n	80098ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	4b15      	ldr	r3, [pc, #84]	; (80098cc <xTaskCheckForTimeOut+0xc0>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	429a      	cmp	r2, r3
 800987c:	d007      	beq.n	800988e <xTaskCheckForTimeOut+0x82>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	69ba      	ldr	r2, [r7, #24]
 8009884:	429a      	cmp	r2, r3
 8009886:	d302      	bcc.n	800988e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009888:	2301      	movs	r3, #1
 800988a:	61fb      	str	r3, [r7, #28]
 800988c:	e015      	b.n	80098ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	697a      	ldr	r2, [r7, #20]
 8009894:	429a      	cmp	r2, r3
 8009896:	d20b      	bcs.n	80098b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	1ad2      	subs	r2, r2, r3
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f7ff ff9b 	bl	80097e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80098aa:	2300      	movs	r3, #0
 80098ac:	61fb      	str	r3, [r7, #28]
 80098ae:	e004      	b.n	80098ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	2200      	movs	r2, #0
 80098b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80098b6:	2301      	movs	r3, #1
 80098b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80098ba:	f000 fe73 	bl	800a5a4 <vPortExitCritical>

	return xReturn;
 80098be:	69fb      	ldr	r3, [r7, #28]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3720      	adds	r7, #32
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	20000c38 	.word	0x20000c38
 80098cc:	20000c4c 	.word	0x20000c4c

080098d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80098d0:	b480      	push	{r7}
 80098d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80098d4:	4b03      	ldr	r3, [pc, #12]	; (80098e4 <vTaskMissedYield+0x14>)
 80098d6:	2201      	movs	r2, #1
 80098d8:	601a      	str	r2, [r3, #0]
}
 80098da:	bf00      	nop
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	20000c48 	.word	0x20000c48

080098e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80098f0:	f000 f84c 	bl	800998c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 80098f4:	4b04      	ldr	r3, [pc, #16]	; (8009908 <prvIdleTask+0x20>)
 80098f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098fa:	601a      	str	r2, [r3, #0]
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009904:	e7f4      	b.n	80098f0 <prvIdleTask+0x8>
 8009906:	bf00      	nop
 8009908:	e000ed04 	.word	0xe000ed04

0800990c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009912:	2300      	movs	r3, #0
 8009914:	607b      	str	r3, [r7, #4]
 8009916:	e00c      	b.n	8009932 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	4613      	mov	r3, r2
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	4413      	add	r3, r2
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	4a12      	ldr	r2, [pc, #72]	; (800996c <prvInitialiseTaskLists+0x60>)
 8009924:	4413      	add	r3, r2
 8009926:	4618      	mov	r0, r3
 8009928:	f7fe fd60 	bl	80083ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	3301      	adds	r3, #1
 8009930:	607b      	str	r3, [r7, #4]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2b37      	cmp	r3, #55	; 0x37
 8009936:	d9ef      	bls.n	8009918 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009938:	480d      	ldr	r0, [pc, #52]	; (8009970 <prvInitialiseTaskLists+0x64>)
 800993a:	f7fe fd57 	bl	80083ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800993e:	480d      	ldr	r0, [pc, #52]	; (8009974 <prvInitialiseTaskLists+0x68>)
 8009940:	f7fe fd54 	bl	80083ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009944:	480c      	ldr	r0, [pc, #48]	; (8009978 <prvInitialiseTaskLists+0x6c>)
 8009946:	f7fe fd51 	bl	80083ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800994a:	480c      	ldr	r0, [pc, #48]	; (800997c <prvInitialiseTaskLists+0x70>)
 800994c:	f7fe fd4e 	bl	80083ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009950:	480b      	ldr	r0, [pc, #44]	; (8009980 <prvInitialiseTaskLists+0x74>)
 8009952:	f7fe fd4b 	bl	80083ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009956:	4b0b      	ldr	r3, [pc, #44]	; (8009984 <prvInitialiseTaskLists+0x78>)
 8009958:	4a05      	ldr	r2, [pc, #20]	; (8009970 <prvInitialiseTaskLists+0x64>)
 800995a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800995c:	4b0a      	ldr	r3, [pc, #40]	; (8009988 <prvInitialiseTaskLists+0x7c>)
 800995e:	4a05      	ldr	r2, [pc, #20]	; (8009974 <prvInitialiseTaskLists+0x68>)
 8009960:	601a      	str	r2, [r3, #0]
}
 8009962:	bf00      	nop
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	20000764 	.word	0x20000764
 8009970:	20000bc4 	.word	0x20000bc4
 8009974:	20000bd8 	.word	0x20000bd8
 8009978:	20000bf4 	.word	0x20000bf4
 800997c:	20000c08 	.word	0x20000c08
 8009980:	20000c20 	.word	0x20000c20
 8009984:	20000bec 	.word	0x20000bec
 8009988:	20000bf0 	.word	0x20000bf0

0800998c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009992:	e019      	b.n	80099c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009994:	f000 fdd6 	bl	800a544 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009998:	4b10      	ldr	r3, [pc, #64]	; (80099dc <prvCheckTasksWaitingTermination+0x50>)
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	3304      	adds	r3, #4
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7fe fdab 	bl	8008500 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80099aa:	4b0d      	ldr	r3, [pc, #52]	; (80099e0 <prvCheckTasksWaitingTermination+0x54>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	4a0b      	ldr	r2, [pc, #44]	; (80099e0 <prvCheckTasksWaitingTermination+0x54>)
 80099b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80099b4:	4b0b      	ldr	r3, [pc, #44]	; (80099e4 <prvCheckTasksWaitingTermination+0x58>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	3b01      	subs	r3, #1
 80099ba:	4a0a      	ldr	r2, [pc, #40]	; (80099e4 <prvCheckTasksWaitingTermination+0x58>)
 80099bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80099be:	f000 fdf1 	bl	800a5a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f810 	bl	80099e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099c8:	4b06      	ldr	r3, [pc, #24]	; (80099e4 <prvCheckTasksWaitingTermination+0x58>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1e1      	bne.n	8009994 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80099d0:	bf00      	nop
 80099d2:	bf00      	nop
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	20000c08 	.word	0x20000c08
 80099e0:	20000c34 	.word	0x20000c34
 80099e4:	20000c1c 	.word	0x20000c1c

080099e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d108      	bne.n	8009a0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fe:	4618      	mov	r0, r3
 8009a00:	f000 ff86 	bl	800a910 <vPortFree>
				vPortFree( pxTCB );
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 ff83 	bl	800a910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a0a:	e018      	b.n	8009a3e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d103      	bne.n	8009a1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 ff7a 	bl	800a910 <vPortFree>
	}
 8009a1c:	e00f      	b.n	8009a3e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	d00a      	beq.n	8009a3e <prvDeleteTCB+0x56>
	__asm volatile
 8009a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2c:	f383 8811 	msr	BASEPRI, r3
 8009a30:	f3bf 8f6f 	isb	sy
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	60fb      	str	r3, [r7, #12]
}
 8009a3a:	bf00      	nop
 8009a3c:	e7fe      	b.n	8009a3c <prvDeleteTCB+0x54>
	}
 8009a3e:	bf00      	nop
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
	...

08009a48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a4e:	4b0c      	ldr	r3, [pc, #48]	; (8009a80 <prvResetNextTaskUnblockTime+0x38>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d104      	bne.n	8009a62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a58:	4b0a      	ldr	r3, [pc, #40]	; (8009a84 <prvResetNextTaskUnblockTime+0x3c>)
 8009a5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a60:	e008      	b.n	8009a74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a62:	4b07      	ldr	r3, [pc, #28]	; (8009a80 <prvResetNextTaskUnblockTime+0x38>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	4a04      	ldr	r2, [pc, #16]	; (8009a84 <prvResetNextTaskUnblockTime+0x3c>)
 8009a72:	6013      	str	r3, [r2, #0]
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	20000bec 	.word	0x20000bec
 8009a84:	20000c54 	.word	0x20000c54

08009a88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a8e:	4b0b      	ldr	r3, [pc, #44]	; (8009abc <xTaskGetSchedulerState+0x34>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d102      	bne.n	8009a9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a96:	2301      	movs	r3, #1
 8009a98:	607b      	str	r3, [r7, #4]
 8009a9a:	e008      	b.n	8009aae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a9c:	4b08      	ldr	r3, [pc, #32]	; (8009ac0 <xTaskGetSchedulerState+0x38>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d102      	bne.n	8009aaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	607b      	str	r3, [r7, #4]
 8009aa8:	e001      	b.n	8009aae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009aae:	687b      	ldr	r3, [r7, #4]
	}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr
 8009abc:	20000c40 	.word	0x20000c40
 8009ac0:	20000c5c 	.word	0x20000c5c

08009ac4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b086      	sub	sp, #24
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d056      	beq.n	8009b88 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009ada:	4b2e      	ldr	r3, [pc, #184]	; (8009b94 <xTaskPriorityDisinherit+0xd0>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	693a      	ldr	r2, [r7, #16]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d00a      	beq.n	8009afa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae8:	f383 8811 	msr	BASEPRI, r3
 8009aec:	f3bf 8f6f 	isb	sy
 8009af0:	f3bf 8f4f 	dsb	sy
 8009af4:	60fb      	str	r3, [r7, #12]
}
 8009af6:	bf00      	nop
 8009af8:	e7fe      	b.n	8009af8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10a      	bne.n	8009b18 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b06:	f383 8811 	msr	BASEPRI, r3
 8009b0a:	f3bf 8f6f 	isb	sy
 8009b0e:	f3bf 8f4f 	dsb	sy
 8009b12:	60bb      	str	r3, [r7, #8]
}
 8009b14:	bf00      	nop
 8009b16:	e7fe      	b.n	8009b16 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b1c:	1e5a      	subs	r2, r3, #1
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d02c      	beq.n	8009b88 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d128      	bne.n	8009b88 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	3304      	adds	r3, #4
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fe fce0 	bl	8008500 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b58:	4b0f      	ldr	r3, [pc, #60]	; (8009b98 <xTaskPriorityDisinherit+0xd4>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d903      	bls.n	8009b68 <xTaskPriorityDisinherit+0xa4>
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b64:	4a0c      	ldr	r2, [pc, #48]	; (8009b98 <xTaskPriorityDisinherit+0xd4>)
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	4a09      	ldr	r2, [pc, #36]	; (8009b9c <xTaskPriorityDisinherit+0xd8>)
 8009b76:	441a      	add	r2, r3
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	4610      	mov	r0, r2
 8009b80:	f7fe fc61 	bl	8008446 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b84:	2301      	movs	r3, #1
 8009b86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b88:	697b      	ldr	r3, [r7, #20]
	}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3718      	adds	r7, #24
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	20000760 	.word	0x20000760
 8009b98:	20000c3c 	.word	0x20000c3c
 8009b9c:	20000764 	.word	0x20000764

08009ba0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009baa:	4b21      	ldr	r3, [pc, #132]	; (8009c30 <prvAddCurrentTaskToDelayedList+0x90>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bb0:	4b20      	ldr	r3, [pc, #128]	; (8009c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fe fca2 	bl	8008500 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bc2:	d10a      	bne.n	8009bda <prvAddCurrentTaskToDelayedList+0x3a>
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d007      	beq.n	8009bda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bca:	4b1a      	ldr	r3, [pc, #104]	; (8009c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	3304      	adds	r3, #4
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	4819      	ldr	r0, [pc, #100]	; (8009c38 <prvAddCurrentTaskToDelayedList+0x98>)
 8009bd4:	f7fe fc37 	bl	8008446 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009bd8:	e026      	b.n	8009c28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4413      	add	r3, r2
 8009be0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009be2:	4b14      	ldr	r3, [pc, #80]	; (8009c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d209      	bcs.n	8009c06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bf2:	4b12      	ldr	r3, [pc, #72]	; (8009c3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	4b0f      	ldr	r3, [pc, #60]	; (8009c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	3304      	adds	r3, #4
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	4610      	mov	r0, r2
 8009c00:	f7fe fc45 	bl	800848e <vListInsert>
}
 8009c04:	e010      	b.n	8009c28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c06:	4b0e      	ldr	r3, [pc, #56]	; (8009c40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	4b0a      	ldr	r3, [pc, #40]	; (8009c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3304      	adds	r3, #4
 8009c10:	4619      	mov	r1, r3
 8009c12:	4610      	mov	r0, r2
 8009c14:	f7fe fc3b 	bl	800848e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c18:	4b0a      	ldr	r3, [pc, #40]	; (8009c44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d202      	bcs.n	8009c28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009c22:	4a08      	ldr	r2, [pc, #32]	; (8009c44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	6013      	str	r3, [r2, #0]
}
 8009c28:	bf00      	nop
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	20000c38 	.word	0x20000c38
 8009c34:	20000760 	.word	0x20000760
 8009c38:	20000c20 	.word	0x20000c20
 8009c3c:	20000bf0 	.word	0x20000bf0
 8009c40:	20000bec 	.word	0x20000bec
 8009c44:	20000c54 	.word	0x20000c54

08009c48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08a      	sub	sp, #40	; 0x28
 8009c4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009c52:	f000 fb07 	bl	800a264 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009c56:	4b1c      	ldr	r3, [pc, #112]	; (8009cc8 <xTimerCreateTimerTask+0x80>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d021      	beq.n	8009ca2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c62:	2300      	movs	r3, #0
 8009c64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c66:	1d3a      	adds	r2, r7, #4
 8009c68:	f107 0108 	add.w	r1, r7, #8
 8009c6c:	f107 030c 	add.w	r3, r7, #12
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fe fba1 	bl	80083b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c76:	6879      	ldr	r1, [r7, #4]
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	9202      	str	r2, [sp, #8]
 8009c7e:	9301      	str	r3, [sp, #4]
 8009c80:	2302      	movs	r3, #2
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	2300      	movs	r3, #0
 8009c86:	460a      	mov	r2, r1
 8009c88:	4910      	ldr	r1, [pc, #64]	; (8009ccc <xTimerCreateTimerTask+0x84>)
 8009c8a:	4811      	ldr	r0, [pc, #68]	; (8009cd0 <xTimerCreateTimerTask+0x88>)
 8009c8c:	f7ff f918 	bl	8008ec0 <xTaskCreateStatic>
 8009c90:	4603      	mov	r3, r0
 8009c92:	4a10      	ldr	r2, [pc, #64]	; (8009cd4 <xTimerCreateTimerTask+0x8c>)
 8009c94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c96:	4b0f      	ldr	r3, [pc, #60]	; (8009cd4 <xTimerCreateTimerTask+0x8c>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d001      	beq.n	8009ca2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10a      	bne.n	8009cbe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	613b      	str	r3, [r7, #16]
}
 8009cba:	bf00      	nop
 8009cbc:	e7fe      	b.n	8009cbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009cbe:	697b      	ldr	r3, [r7, #20]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3718      	adds	r7, #24
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	20000c90 	.word	0x20000c90
 8009ccc:	0800b0a8 	.word	0x0800b0a8
 8009cd0:	08009e0d 	.word	0x08009e0d
 8009cd4:	20000c94 	.word	0x20000c94

08009cd8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b08a      	sub	sp, #40	; 0x28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
 8009ce4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10a      	bne.n	8009d06 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	623b      	str	r3, [r7, #32]
}
 8009d02:	bf00      	nop
 8009d04:	e7fe      	b.n	8009d04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009d06:	4b1a      	ldr	r3, [pc, #104]	; (8009d70 <xTimerGenericCommand+0x98>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d02a      	beq.n	8009d64 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	2b05      	cmp	r3, #5
 8009d1e:	dc18      	bgt.n	8009d52 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d20:	f7ff feb2 	bl	8009a88 <xTaskGetSchedulerState>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d109      	bne.n	8009d3e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d2a:	4b11      	ldr	r3, [pc, #68]	; (8009d70 <xTimerGenericCommand+0x98>)
 8009d2c:	6818      	ldr	r0, [r3, #0]
 8009d2e:	f107 0110 	add.w	r1, r7, #16
 8009d32:	2300      	movs	r3, #0
 8009d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d36:	f7fe fd03 	bl	8008740 <xQueueGenericSend>
 8009d3a:	6278      	str	r0, [r7, #36]	; 0x24
 8009d3c:	e012      	b.n	8009d64 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d3e:	4b0c      	ldr	r3, [pc, #48]	; (8009d70 <xTimerGenericCommand+0x98>)
 8009d40:	6818      	ldr	r0, [r3, #0]
 8009d42:	f107 0110 	add.w	r1, r7, #16
 8009d46:	2300      	movs	r3, #0
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f7fe fcf9 	bl	8008740 <xQueueGenericSend>
 8009d4e:	6278      	str	r0, [r7, #36]	; 0x24
 8009d50:	e008      	b.n	8009d64 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d52:	4b07      	ldr	r3, [pc, #28]	; (8009d70 <xTimerGenericCommand+0x98>)
 8009d54:	6818      	ldr	r0, [r3, #0]
 8009d56:	f107 0110 	add.w	r1, r7, #16
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	683a      	ldr	r2, [r7, #0]
 8009d5e:	f7fe fdd5 	bl	800890c <xQueueGenericSendFromISR>
 8009d62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3728      	adds	r7, #40	; 0x28
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	20000c90 	.word	0x20000c90

08009d74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b088      	sub	sp, #32
 8009d78:	af02      	add	r7, sp, #8
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d7e:	4b22      	ldr	r3, [pc, #136]	; (8009e08 <prvProcessExpiredTimer+0x94>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	3304      	adds	r3, #4
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7fe fbb7 	bl	8008500 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d98:	f003 0304 	and.w	r3, r3, #4
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d022      	beq.n	8009de6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	699a      	ldr	r2, [r3, #24]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	18d1      	adds	r1, r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	6978      	ldr	r0, [r7, #20]
 8009dae:	f000 f8d1 	bl	8009f54 <prvInsertTimerInActiveList>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d01f      	beq.n	8009df8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009db8:	2300      	movs	r3, #0
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	6978      	ldr	r0, [r7, #20]
 8009dc4:	f7ff ff88 	bl	8009cd8 <xTimerGenericCommand>
 8009dc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d113      	bne.n	8009df8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	60fb      	str	r3, [r7, #12]
}
 8009de2:	bf00      	nop
 8009de4:	e7fe      	b.n	8009de4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dec:	f023 0301 	bic.w	r3, r3, #1
 8009df0:	b2da      	uxtb	r2, r3
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	6a1b      	ldr	r3, [r3, #32]
 8009dfc:	6978      	ldr	r0, [r7, #20]
 8009dfe:	4798      	blx	r3
}
 8009e00:	bf00      	nop
 8009e02:	3718      	adds	r7, #24
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	20000c88 	.word	0x20000c88

08009e0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e14:	f107 0308 	add.w	r3, r7, #8
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f000 f857 	bl	8009ecc <prvGetNextExpireTime>
 8009e1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	4619      	mov	r1, r3
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f000 f803 	bl	8009e30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e2a:	f000 f8d5 	bl	8009fd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e2e:	e7f1      	b.n	8009e14 <prvTimerTask+0x8>

08009e30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e3a:	f7ff fa6d 	bl	8009318 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e3e:	f107 0308 	add.w	r3, r7, #8
 8009e42:	4618      	mov	r0, r3
 8009e44:	f000 f866 	bl	8009f14 <prvSampleTimeNow>
 8009e48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d130      	bne.n	8009eb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d10a      	bne.n	8009e6c <prvProcessTimerOrBlockTask+0x3c>
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d806      	bhi.n	8009e6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009e5e:	f7ff fa69 	bl	8009334 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e62:	68f9      	ldr	r1, [r7, #12]
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7ff ff85 	bl	8009d74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e6a:	e024      	b.n	8009eb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d008      	beq.n	8009e84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e72:	4b13      	ldr	r3, [pc, #76]	; (8009ec0 <prvProcessTimerOrBlockTask+0x90>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d101      	bne.n	8009e80 <prvProcessTimerOrBlockTask+0x50>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e000      	b.n	8009e82 <prvProcessTimerOrBlockTask+0x52>
 8009e80:	2300      	movs	r3, #0
 8009e82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e84:	4b0f      	ldr	r3, [pc, #60]	; (8009ec4 <prvProcessTimerOrBlockTask+0x94>)
 8009e86:	6818      	ldr	r0, [r3, #0]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	1ad3      	subs	r3, r2, r3
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	4619      	mov	r1, r3
 8009e92:	f7fe ffe1 	bl	8008e58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e96:	f7ff fa4d 	bl	8009334 <xTaskResumeAll>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d10a      	bne.n	8009eb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ea0:	4b09      	ldr	r3, [pc, #36]	; (8009ec8 <prvProcessTimerOrBlockTask+0x98>)
 8009ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ea6:	601a      	str	r2, [r3, #0]
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	f3bf 8f6f 	isb	sy
}
 8009eb0:	e001      	b.n	8009eb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009eb2:	f7ff fa3f 	bl	8009334 <xTaskResumeAll>
}
 8009eb6:	bf00      	nop
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20000c8c 	.word	0x20000c8c
 8009ec4:	20000c90 	.word	0x20000c90
 8009ec8:	e000ed04 	.word	0xe000ed04

08009ecc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ed4:	4b0e      	ldr	r3, [pc, #56]	; (8009f10 <prvGetNextExpireTime+0x44>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d101      	bne.n	8009ee2 <prvGetNextExpireTime+0x16>
 8009ede:	2201      	movs	r2, #1
 8009ee0:	e000      	b.n	8009ee4 <prvGetNextExpireTime+0x18>
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d105      	bne.n	8009efc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ef0:	4b07      	ldr	r3, [pc, #28]	; (8009f10 <prvGetNextExpireTime+0x44>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	60fb      	str	r3, [r7, #12]
 8009efa:	e001      	b.n	8009f00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009efc:	2300      	movs	r3, #0
 8009efe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009f00:	68fb      	ldr	r3, [r7, #12]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3714      	adds	r7, #20
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	20000c88 	.word	0x20000c88

08009f14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f1c:	f7ff fa9a 	bl	8009454 <xTaskGetTickCount>
 8009f20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f22:	4b0b      	ldr	r3, [pc, #44]	; (8009f50 <prvSampleTimeNow+0x3c>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d205      	bcs.n	8009f38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f2c:	f000 f936 	bl	800a19c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	e002      	b.n	8009f3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009f3e:	4a04      	ldr	r2, [pc, #16]	; (8009f50 <prvSampleTimeNow+0x3c>)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009f44:	68fb      	ldr	r3, [r7, #12]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	20000c98 	.word	0x20000c98

08009f54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
 8009f60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f62:	2300      	movs	r3, #0
 8009f64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f72:	68ba      	ldr	r2, [r7, #8]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d812      	bhi.n	8009fa0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	1ad2      	subs	r2, r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	699b      	ldr	r3, [r3, #24]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d302      	bcc.n	8009f8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	617b      	str	r3, [r7, #20]
 8009f8c:	e01b      	b.n	8009fc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f8e:	4b10      	ldr	r3, [pc, #64]	; (8009fd0 <prvInsertTimerInActiveList+0x7c>)
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	3304      	adds	r3, #4
 8009f96:	4619      	mov	r1, r3
 8009f98:	4610      	mov	r0, r2
 8009f9a:	f7fe fa78 	bl	800848e <vListInsert>
 8009f9e:	e012      	b.n	8009fc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d206      	bcs.n	8009fb6 <prvInsertTimerInActiveList+0x62>
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d302      	bcc.n	8009fb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	617b      	str	r3, [r7, #20]
 8009fb4:	e007      	b.n	8009fc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fb6:	4b07      	ldr	r3, [pc, #28]	; (8009fd4 <prvInsertTimerInActiveList+0x80>)
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3304      	adds	r3, #4
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	4610      	mov	r0, r2
 8009fc2:	f7fe fa64 	bl	800848e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009fc6:	697b      	ldr	r3, [r7, #20]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3718      	adds	r7, #24
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	20000c8c 	.word	0x20000c8c
 8009fd4:	20000c88 	.word	0x20000c88

08009fd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b08e      	sub	sp, #56	; 0x38
 8009fdc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fde:	e0ca      	b.n	800a176 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	da18      	bge.n	800a018 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009fe6:	1d3b      	adds	r3, r7, #4
 8009fe8:	3304      	adds	r3, #4
 8009fea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10a      	bne.n	800a008 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	61fb      	str	r3, [r7, #28]
}
 800a004:	bf00      	nop
 800a006:	e7fe      	b.n	800a006 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a00e:	6850      	ldr	r0, [r2, #4]
 800a010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a012:	6892      	ldr	r2, [r2, #8]
 800a014:	4611      	mov	r1, r2
 800a016:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f2c0 80aa 	blt.w	800a174 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a026:	695b      	ldr	r3, [r3, #20]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d004      	beq.n	800a036 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02e:	3304      	adds	r3, #4
 800a030:	4618      	mov	r0, r3
 800a032:	f7fe fa65 	bl	8008500 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a036:	463b      	mov	r3, r7
 800a038:	4618      	mov	r0, r3
 800a03a:	f7ff ff6b 	bl	8009f14 <prvSampleTimeNow>
 800a03e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b09      	cmp	r3, #9
 800a044:	f200 8097 	bhi.w	800a176 <prvProcessReceivedCommands+0x19e>
 800a048:	a201      	add	r2, pc, #4	; (adr r2, 800a050 <prvProcessReceivedCommands+0x78>)
 800a04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04e:	bf00      	nop
 800a050:	0800a079 	.word	0x0800a079
 800a054:	0800a079 	.word	0x0800a079
 800a058:	0800a079 	.word	0x0800a079
 800a05c:	0800a0ed 	.word	0x0800a0ed
 800a060:	0800a101 	.word	0x0800a101
 800a064:	0800a14b 	.word	0x0800a14b
 800a068:	0800a079 	.word	0x0800a079
 800a06c:	0800a079 	.word	0x0800a079
 800a070:	0800a0ed 	.word	0x0800a0ed
 800a074:	0800a101 	.word	0x0800a101
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a07e:	f043 0301 	orr.w	r3, r3, #1
 800a082:	b2da      	uxtb	r2, r3
 800a084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08e:	699b      	ldr	r3, [r3, #24]
 800a090:	18d1      	adds	r1, r2, r3
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a098:	f7ff ff5c 	bl	8009f54 <prvInsertTimerInActiveList>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d069      	beq.n	800a176 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0b0:	f003 0304 	and.w	r3, r3, #4
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d05e      	beq.n	800a176 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	441a      	add	r2, r3
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	9300      	str	r3, [sp, #0]
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0ca:	f7ff fe05 	bl	8009cd8 <xTimerGenericCommand>
 800a0ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d14f      	bne.n	800a176 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0da:	f383 8811 	msr	BASEPRI, r3
 800a0de:	f3bf 8f6f 	isb	sy
 800a0e2:	f3bf 8f4f 	dsb	sy
 800a0e6:	61bb      	str	r3, [r7, #24]
}
 800a0e8:	bf00      	nop
 800a0ea:	e7fe      	b.n	800a0ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0f2:	f023 0301 	bic.w	r3, r3, #1
 800a0f6:	b2da      	uxtb	r2, r3
 800a0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a0fe:	e03a      	b.n	800a176 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a106:	f043 0301 	orr.w	r3, r3, #1
 800a10a:	b2da      	uxtb	r2, r3
 800a10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a116:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10a      	bne.n	800a136 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	617b      	str	r3, [r7, #20]
}
 800a132:	bf00      	nop
 800a134:	e7fe      	b.n	800a134 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a138:	699a      	ldr	r2, [r3, #24]
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	18d1      	adds	r1, r2, r3
 800a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a144:	f7ff ff06 	bl	8009f54 <prvInsertTimerInActiveList>
					break;
 800a148:	e015      	b.n	800a176 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a150:	f003 0302 	and.w	r3, r3, #2
 800a154:	2b00      	cmp	r3, #0
 800a156:	d103      	bne.n	800a160 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a15a:	f000 fbd9 	bl	800a910 <vPortFree>
 800a15e:	e00a      	b.n	800a176 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a166:	f023 0301 	bic.w	r3, r3, #1
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a172:	e000      	b.n	800a176 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a174:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a176:	4b08      	ldr	r3, [pc, #32]	; (800a198 <prvProcessReceivedCommands+0x1c0>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	1d39      	adds	r1, r7, #4
 800a17c:	2200      	movs	r2, #0
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fe fc5c 	bl	8008a3c <xQueueReceive>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	f47f af2a 	bne.w	8009fe0 <prvProcessReceivedCommands+0x8>
	}
}
 800a18c:	bf00      	nop
 800a18e:	bf00      	nop
 800a190:	3730      	adds	r7, #48	; 0x30
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	20000c90 	.word	0x20000c90

0800a19c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b088      	sub	sp, #32
 800a1a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a1a2:	e048      	b.n	800a236 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a1a4:	4b2d      	ldr	r3, [pc, #180]	; (800a25c <prvSwitchTimerLists+0xc0>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1ae:	4b2b      	ldr	r3, [pc, #172]	; (800a25c <prvSwitchTimerLists+0xc0>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	3304      	adds	r3, #4
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7fe f99f 	bl	8008500 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6a1b      	ldr	r3, [r3, #32]
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1d0:	f003 0304 	and.w	r3, r3, #4
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d02e      	beq.n	800a236 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	4413      	add	r3, r2
 800a1e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d90e      	bls.n	800a208 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	68ba      	ldr	r2, [r7, #8]
 800a1ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	68fa      	ldr	r2, [r7, #12]
 800a1f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1f6:	4b19      	ldr	r3, [pc, #100]	; (800a25c <prvSwitchTimerLists+0xc0>)
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	3304      	adds	r3, #4
 800a1fe:	4619      	mov	r1, r3
 800a200:	4610      	mov	r0, r2
 800a202:	f7fe f944 	bl	800848e <vListInsert>
 800a206:	e016      	b.n	800a236 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a208:	2300      	movs	r3, #0
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	2300      	movs	r3, #0
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	2100      	movs	r1, #0
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f7ff fd60 	bl	8009cd8 <xTimerGenericCommand>
 800a218:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10a      	bne.n	800a236 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a224:	f383 8811 	msr	BASEPRI, r3
 800a228:	f3bf 8f6f 	isb	sy
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	603b      	str	r3, [r7, #0]
}
 800a232:	bf00      	nop
 800a234:	e7fe      	b.n	800a234 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a236:	4b09      	ldr	r3, [pc, #36]	; (800a25c <prvSwitchTimerLists+0xc0>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1b1      	bne.n	800a1a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a240:	4b06      	ldr	r3, [pc, #24]	; (800a25c <prvSwitchTimerLists+0xc0>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a246:	4b06      	ldr	r3, [pc, #24]	; (800a260 <prvSwitchTimerLists+0xc4>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a04      	ldr	r2, [pc, #16]	; (800a25c <prvSwitchTimerLists+0xc0>)
 800a24c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a24e:	4a04      	ldr	r2, [pc, #16]	; (800a260 <prvSwitchTimerLists+0xc4>)
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	6013      	str	r3, [r2, #0]
}
 800a254:	bf00      	nop
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	20000c88 	.word	0x20000c88
 800a260:	20000c8c 	.word	0x20000c8c

0800a264 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a26a:	f000 f96b 	bl	800a544 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a26e:	4b15      	ldr	r3, [pc, #84]	; (800a2c4 <prvCheckForValidListAndQueue+0x60>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d120      	bne.n	800a2b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a276:	4814      	ldr	r0, [pc, #80]	; (800a2c8 <prvCheckForValidListAndQueue+0x64>)
 800a278:	f7fe f8b8 	bl	80083ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a27c:	4813      	ldr	r0, [pc, #76]	; (800a2cc <prvCheckForValidListAndQueue+0x68>)
 800a27e:	f7fe f8b5 	bl	80083ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a282:	4b13      	ldr	r3, [pc, #76]	; (800a2d0 <prvCheckForValidListAndQueue+0x6c>)
 800a284:	4a10      	ldr	r2, [pc, #64]	; (800a2c8 <prvCheckForValidListAndQueue+0x64>)
 800a286:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a288:	4b12      	ldr	r3, [pc, #72]	; (800a2d4 <prvCheckForValidListAndQueue+0x70>)
 800a28a:	4a10      	ldr	r2, [pc, #64]	; (800a2cc <prvCheckForValidListAndQueue+0x68>)
 800a28c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a28e:	2300      	movs	r3, #0
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	4b11      	ldr	r3, [pc, #68]	; (800a2d8 <prvCheckForValidListAndQueue+0x74>)
 800a294:	4a11      	ldr	r2, [pc, #68]	; (800a2dc <prvCheckForValidListAndQueue+0x78>)
 800a296:	2110      	movs	r1, #16
 800a298:	200a      	movs	r0, #10
 800a29a:	f7fe f9b6 	bl	800860a <xQueueGenericCreateStatic>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	4a08      	ldr	r2, [pc, #32]	; (800a2c4 <prvCheckForValidListAndQueue+0x60>)
 800a2a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a2a4:	4b07      	ldr	r3, [pc, #28]	; (800a2c4 <prvCheckForValidListAndQueue+0x60>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d005      	beq.n	800a2b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a2ac:	4b05      	ldr	r3, [pc, #20]	; (800a2c4 <prvCheckForValidListAndQueue+0x60>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	490b      	ldr	r1, [pc, #44]	; (800a2e0 <prvCheckForValidListAndQueue+0x7c>)
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fe fda6 	bl	8008e04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2b8:	f000 f974 	bl	800a5a4 <vPortExitCritical>
}
 800a2bc:	bf00      	nop
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20000c90 	.word	0x20000c90
 800a2c8:	20000c60 	.word	0x20000c60
 800a2cc:	20000c74 	.word	0x20000c74
 800a2d0:	20000c88 	.word	0x20000c88
 800a2d4:	20000c8c 	.word	0x20000c8c
 800a2d8:	20000d3c 	.word	0x20000d3c
 800a2dc:	20000c9c 	.word	0x20000c9c
 800a2e0:	0800b0b0 	.word	0x0800b0b0

0800a2e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	3b04      	subs	r3, #4
 800a2f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a2fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	3b04      	subs	r3, #4
 800a302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	f023 0201 	bic.w	r2, r3, #1
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	3b04      	subs	r3, #4
 800a312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a314:	4a0c      	ldr	r2, [pc, #48]	; (800a348 <pxPortInitialiseStack+0x64>)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	3b14      	subs	r3, #20
 800a31e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	3b04      	subs	r3, #4
 800a32a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f06f 0202 	mvn.w	r2, #2
 800a332:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	3b20      	subs	r3, #32
 800a338:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a33a:	68fb      	ldr	r3, [r7, #12]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr
 800a348:	0800a34d 	.word	0x0800a34d

0800a34c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a352:	2300      	movs	r3, #0
 800a354:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a356:	4b12      	ldr	r3, [pc, #72]	; (800a3a0 <prvTaskExitError+0x54>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a35e:	d00a      	beq.n	800a376 <prvTaskExitError+0x2a>
	__asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	60fb      	str	r3, [r7, #12]
}
 800a372:	bf00      	nop
 800a374:	e7fe      	b.n	800a374 <prvTaskExitError+0x28>
	__asm volatile
 800a376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37a:	f383 8811 	msr	BASEPRI, r3
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	f3bf 8f4f 	dsb	sy
 800a386:	60bb      	str	r3, [r7, #8]
}
 800a388:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a38a:	bf00      	nop
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d0fc      	beq.n	800a38c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a392:	bf00      	nop
 800a394:	bf00      	nop
 800a396:	3714      	adds	r7, #20
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	20000014 	.word	0x20000014
	...

0800a3b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a3b0:	4b07      	ldr	r3, [pc, #28]	; (800a3d0 <pxCurrentTCBConst2>)
 800a3b2:	6819      	ldr	r1, [r3, #0]
 800a3b4:	6808      	ldr	r0, [r1, #0]
 800a3b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ba:	f380 8809 	msr	PSP, r0
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	f04f 0000 	mov.w	r0, #0
 800a3c6:	f380 8811 	msr	BASEPRI, r0
 800a3ca:	4770      	bx	lr
 800a3cc:	f3af 8000 	nop.w

0800a3d0 <pxCurrentTCBConst2>:
 800a3d0:	20000760 	.word	0x20000760
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a3d4:	bf00      	nop
 800a3d6:	bf00      	nop

0800a3d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a3d8:	4808      	ldr	r0, [pc, #32]	; (800a3fc <prvPortStartFirstTask+0x24>)
 800a3da:	6800      	ldr	r0, [r0, #0]
 800a3dc:	6800      	ldr	r0, [r0, #0]
 800a3de:	f380 8808 	msr	MSP, r0
 800a3e2:	f04f 0000 	mov.w	r0, #0
 800a3e6:	f380 8814 	msr	CONTROL, r0
 800a3ea:	b662      	cpsie	i
 800a3ec:	b661      	cpsie	f
 800a3ee:	f3bf 8f4f 	dsb	sy
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	df00      	svc	0
 800a3f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a3fa:	bf00      	nop
 800a3fc:	e000ed08 	.word	0xe000ed08

0800a400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a406:	4b46      	ldr	r3, [pc, #280]	; (800a520 <xPortStartScheduler+0x120>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a46      	ldr	r2, [pc, #280]	; (800a524 <xPortStartScheduler+0x124>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d10a      	bne.n	800a426 <xPortStartScheduler+0x26>
	__asm volatile
 800a410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a414:	f383 8811 	msr	BASEPRI, r3
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	613b      	str	r3, [r7, #16]
}
 800a422:	bf00      	nop
 800a424:	e7fe      	b.n	800a424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a426:	4b3e      	ldr	r3, [pc, #248]	; (800a520 <xPortStartScheduler+0x120>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a3f      	ldr	r2, [pc, #252]	; (800a528 <xPortStartScheduler+0x128>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d10a      	bne.n	800a446 <xPortStartScheduler+0x46>
	__asm volatile
 800a430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	60fb      	str	r3, [r7, #12]
}
 800a442:	bf00      	nop
 800a444:	e7fe      	b.n	800a444 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a446:	4b39      	ldr	r3, [pc, #228]	; (800a52c <xPortStartScheduler+0x12c>)
 800a448:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	22ff      	movs	r2, #255	; 0xff
 800a456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a460:	78fb      	ldrb	r3, [r7, #3]
 800a462:	b2db      	uxtb	r3, r3
 800a464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a468:	b2da      	uxtb	r2, r3
 800a46a:	4b31      	ldr	r3, [pc, #196]	; (800a530 <xPortStartScheduler+0x130>)
 800a46c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a46e:	4b31      	ldr	r3, [pc, #196]	; (800a534 <xPortStartScheduler+0x134>)
 800a470:	2207      	movs	r2, #7
 800a472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a474:	e009      	b.n	800a48a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a476:	4b2f      	ldr	r3, [pc, #188]	; (800a534 <xPortStartScheduler+0x134>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	3b01      	subs	r3, #1
 800a47c:	4a2d      	ldr	r2, [pc, #180]	; (800a534 <xPortStartScheduler+0x134>)
 800a47e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a480:	78fb      	ldrb	r3, [r7, #3]
 800a482:	b2db      	uxtb	r3, r3
 800a484:	005b      	lsls	r3, r3, #1
 800a486:	b2db      	uxtb	r3, r3
 800a488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a48a:	78fb      	ldrb	r3, [r7, #3]
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a492:	2b80      	cmp	r3, #128	; 0x80
 800a494:	d0ef      	beq.n	800a476 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a496:	4b27      	ldr	r3, [pc, #156]	; (800a534 <xPortStartScheduler+0x134>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f1c3 0307 	rsb	r3, r3, #7
 800a49e:	2b04      	cmp	r3, #4
 800a4a0:	d00a      	beq.n	800a4b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	60bb      	str	r3, [r7, #8]
}
 800a4b4:	bf00      	nop
 800a4b6:	e7fe      	b.n	800a4b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a4b8:	4b1e      	ldr	r3, [pc, #120]	; (800a534 <xPortStartScheduler+0x134>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	021b      	lsls	r3, r3, #8
 800a4be:	4a1d      	ldr	r2, [pc, #116]	; (800a534 <xPortStartScheduler+0x134>)
 800a4c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a4c2:	4b1c      	ldr	r3, [pc, #112]	; (800a534 <xPortStartScheduler+0x134>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a4ca:	4a1a      	ldr	r2, [pc, #104]	; (800a534 <xPortStartScheduler+0x134>)
 800a4cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	b2da      	uxtb	r2, r3
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a4d6:	4b18      	ldr	r3, [pc, #96]	; (800a538 <xPortStartScheduler+0x138>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a17      	ldr	r2, [pc, #92]	; (800a538 <xPortStartScheduler+0x138>)
 800a4dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a4e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a4e2:	4b15      	ldr	r3, [pc, #84]	; (800a538 <xPortStartScheduler+0x138>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a14      	ldr	r2, [pc, #80]	; (800a538 <xPortStartScheduler+0x138>)
 800a4e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a4ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a4ee:	f000 f8dd 	bl	800a6ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a4f2:	4b12      	ldr	r3, [pc, #72]	; (800a53c <xPortStartScheduler+0x13c>)
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a4f8:	f000 f8fc 	bl	800a6f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a4fc:	4b10      	ldr	r3, [pc, #64]	; (800a540 <xPortStartScheduler+0x140>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a0f      	ldr	r2, [pc, #60]	; (800a540 <xPortStartScheduler+0x140>)
 800a502:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a506:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a508:	f7ff ff66 	bl	800a3d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a50c:	f7ff f848 	bl	80095a0 <vTaskSwitchContext>
	prvTaskExitError();
 800a510:	f7ff ff1c 	bl	800a34c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3718      	adds	r7, #24
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	e000ed00 	.word	0xe000ed00
 800a524:	410fc271 	.word	0x410fc271
 800a528:	410fc270 	.word	0x410fc270
 800a52c:	e000e400 	.word	0xe000e400
 800a530:	20000d8c 	.word	0x20000d8c
 800a534:	20000d90 	.word	0x20000d90
 800a538:	e000ed20 	.word	0xe000ed20
 800a53c:	20000014 	.word	0x20000014
 800a540:	e000ef34 	.word	0xe000ef34

0800a544 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
	__asm volatile
 800a54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54e:	f383 8811 	msr	BASEPRI, r3
 800a552:	f3bf 8f6f 	isb	sy
 800a556:	f3bf 8f4f 	dsb	sy
 800a55a:	607b      	str	r3, [r7, #4]
}
 800a55c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a55e:	4b0f      	ldr	r3, [pc, #60]	; (800a59c <vPortEnterCritical+0x58>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	3301      	adds	r3, #1
 800a564:	4a0d      	ldr	r2, [pc, #52]	; (800a59c <vPortEnterCritical+0x58>)
 800a566:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a568:	4b0c      	ldr	r3, [pc, #48]	; (800a59c <vPortEnterCritical+0x58>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d10f      	bne.n	800a590 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a570:	4b0b      	ldr	r3, [pc, #44]	; (800a5a0 <vPortEnterCritical+0x5c>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	b2db      	uxtb	r3, r3
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00a      	beq.n	800a590 <vPortEnterCritical+0x4c>
	__asm volatile
 800a57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57e:	f383 8811 	msr	BASEPRI, r3
 800a582:	f3bf 8f6f 	isb	sy
 800a586:	f3bf 8f4f 	dsb	sy
 800a58a:	603b      	str	r3, [r7, #0]
}
 800a58c:	bf00      	nop
 800a58e:	e7fe      	b.n	800a58e <vPortEnterCritical+0x4a>
	}
}
 800a590:	bf00      	nop
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr
 800a59c:	20000014 	.word	0x20000014
 800a5a0:	e000ed04 	.word	0xe000ed04

0800a5a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a5aa:	4b12      	ldr	r3, [pc, #72]	; (800a5f4 <vPortExitCritical+0x50>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d10a      	bne.n	800a5c8 <vPortExitCritical+0x24>
	__asm volatile
 800a5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b6:	f383 8811 	msr	BASEPRI, r3
 800a5ba:	f3bf 8f6f 	isb	sy
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	607b      	str	r3, [r7, #4]
}
 800a5c4:	bf00      	nop
 800a5c6:	e7fe      	b.n	800a5c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a5c8:	4b0a      	ldr	r3, [pc, #40]	; (800a5f4 <vPortExitCritical+0x50>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	4a09      	ldr	r2, [pc, #36]	; (800a5f4 <vPortExitCritical+0x50>)
 800a5d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a5d2:	4b08      	ldr	r3, [pc, #32]	; (800a5f4 <vPortExitCritical+0x50>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d105      	bne.n	800a5e6 <vPortExitCritical+0x42>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	f383 8811 	msr	BASEPRI, r3
}
 800a5e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a5e6:	bf00      	nop
 800a5e8:	370c      	adds	r7, #12
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	20000014 	.word	0x20000014
	...

0800a600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a600:	f3ef 8009 	mrs	r0, PSP
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	4b15      	ldr	r3, [pc, #84]	; (800a660 <pxCurrentTCBConst>)
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	f01e 0f10 	tst.w	lr, #16
 800a610:	bf08      	it	eq
 800a612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a61a:	6010      	str	r0, [r2, #0]
 800a61c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a620:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a624:	f380 8811 	msr	BASEPRI, r0
 800a628:	f3bf 8f4f 	dsb	sy
 800a62c:	f3bf 8f6f 	isb	sy
 800a630:	f7fe ffb6 	bl	80095a0 <vTaskSwitchContext>
 800a634:	f04f 0000 	mov.w	r0, #0
 800a638:	f380 8811 	msr	BASEPRI, r0
 800a63c:	bc09      	pop	{r0, r3}
 800a63e:	6819      	ldr	r1, [r3, #0]
 800a640:	6808      	ldr	r0, [r1, #0]
 800a642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a646:	f01e 0f10 	tst.w	lr, #16
 800a64a:	bf08      	it	eq
 800a64c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a650:	f380 8809 	msr	PSP, r0
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	f3af 8000 	nop.w

0800a660 <pxCurrentTCBConst>:
 800a660:	20000760 	.word	0x20000760
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a664:	bf00      	nop
 800a666:	bf00      	nop

0800a668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	607b      	str	r3, [r7, #4]
}
 800a680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a682:	f7fe fef7 	bl	8009474 <xTaskIncrementTick>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d003      	beq.n	800a694 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a68c:	4b06      	ldr	r3, [pc, #24]	; (800a6a8 <SysTick_Handler+0x40>)
 800a68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a692:	601a      	str	r2, [r3, #0]
 800a694:	2300      	movs	r3, #0
 800a696:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	f383 8811 	msr	BASEPRI, r3
}
 800a69e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a6a0:	bf00      	nop
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	e000ed04 	.word	0xe000ed04

0800a6ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a6b0:	4b0b      	ldr	r3, [pc, #44]	; (800a6e0 <vPortSetupTimerInterrupt+0x34>)
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a6b6:	4b0b      	ldr	r3, [pc, #44]	; (800a6e4 <vPortSetupTimerInterrupt+0x38>)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a6bc:	4b0a      	ldr	r3, [pc, #40]	; (800a6e8 <vPortSetupTimerInterrupt+0x3c>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a0a      	ldr	r2, [pc, #40]	; (800a6ec <vPortSetupTimerInterrupt+0x40>)
 800a6c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6c6:	091b      	lsrs	r3, r3, #4
 800a6c8:	4a09      	ldr	r2, [pc, #36]	; (800a6f0 <vPortSetupTimerInterrupt+0x44>)
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a6ce:	4b04      	ldr	r3, [pc, #16]	; (800a6e0 <vPortSetupTimerInterrupt+0x34>)
 800a6d0:	2207      	movs	r2, #7
 800a6d2:	601a      	str	r2, [r3, #0]
}
 800a6d4:	bf00      	nop
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	e000e010 	.word	0xe000e010
 800a6e4:	e000e018 	.word	0xe000e018
 800a6e8:	20000008 	.word	0x20000008
 800a6ec:	10624dd3 	.word	0x10624dd3
 800a6f0:	e000e014 	.word	0xe000e014

0800a6f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a6f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a704 <vPortEnableVFP+0x10>
 800a6f8:	6801      	ldr	r1, [r0, #0]
 800a6fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a6fe:	6001      	str	r1, [r0, #0]
 800a700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a702:	bf00      	nop
 800a704:	e000ed88 	.word	0xe000ed88

0800a708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a70e:	f3ef 8305 	mrs	r3, IPSR
 800a712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2b0f      	cmp	r3, #15
 800a718:	d914      	bls.n	800a744 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a71a:	4a17      	ldr	r2, [pc, #92]	; (800a778 <vPortValidateInterruptPriority+0x70>)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	4413      	add	r3, r2
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a724:	4b15      	ldr	r3, [pc, #84]	; (800a77c <vPortValidateInterruptPriority+0x74>)
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	7afa      	ldrb	r2, [r7, #11]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d20a      	bcs.n	800a744 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	607b      	str	r3, [r7, #4]
}
 800a740:	bf00      	nop
 800a742:	e7fe      	b.n	800a742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a744:	4b0e      	ldr	r3, [pc, #56]	; (800a780 <vPortValidateInterruptPriority+0x78>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a74c:	4b0d      	ldr	r3, [pc, #52]	; (800a784 <vPortValidateInterruptPriority+0x7c>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	429a      	cmp	r2, r3
 800a752:	d90a      	bls.n	800a76a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a758:	f383 8811 	msr	BASEPRI, r3
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	603b      	str	r3, [r7, #0]
}
 800a766:	bf00      	nop
 800a768:	e7fe      	b.n	800a768 <vPortValidateInterruptPriority+0x60>
	}
 800a76a:	bf00      	nop
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	e000e3f0 	.word	0xe000e3f0
 800a77c:	20000d8c 	.word	0x20000d8c
 800a780:	e000ed0c 	.word	0xe000ed0c
 800a784:	20000d90 	.word	0x20000d90

0800a788 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b08a      	sub	sp, #40	; 0x28
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a790:	2300      	movs	r3, #0
 800a792:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a794:	f7fe fdc0 	bl	8009318 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a798:	4b58      	ldr	r3, [pc, #352]	; (800a8fc <pvPortMalloc+0x174>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d101      	bne.n	800a7a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a7a0:	f000 f910 	bl	800a9c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a7a4:	4b56      	ldr	r3, [pc, #344]	; (800a900 <pvPortMalloc+0x178>)
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4013      	ands	r3, r2
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f040 808e 	bne.w	800a8ce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d01d      	beq.n	800a7f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a7b8:	2208      	movs	r2, #8
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4413      	add	r3, r2
 800a7be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f003 0307 	and.w	r3, r3, #7
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d014      	beq.n	800a7f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f023 0307 	bic.w	r3, r3, #7
 800a7d0:	3308      	adds	r3, #8
 800a7d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f003 0307 	and.w	r3, r3, #7
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00a      	beq.n	800a7f4 <pvPortMalloc+0x6c>
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	617b      	str	r3, [r7, #20]
}
 800a7f0:	bf00      	nop
 800a7f2:	e7fe      	b.n	800a7f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d069      	beq.n	800a8ce <pvPortMalloc+0x146>
 800a7fa:	4b42      	ldr	r3, [pc, #264]	; (800a904 <pvPortMalloc+0x17c>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	429a      	cmp	r2, r3
 800a802:	d864      	bhi.n	800a8ce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a804:	4b40      	ldr	r3, [pc, #256]	; (800a908 <pvPortMalloc+0x180>)
 800a806:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a808:	4b3f      	ldr	r3, [pc, #252]	; (800a908 <pvPortMalloc+0x180>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a80e:	e004      	b.n	800a81a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a812:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	429a      	cmp	r2, r3
 800a822:	d903      	bls.n	800a82c <pvPortMalloc+0xa4>
 800a824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1f1      	bne.n	800a810 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a82c:	4b33      	ldr	r3, [pc, #204]	; (800a8fc <pvPortMalloc+0x174>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a832:	429a      	cmp	r2, r3
 800a834:	d04b      	beq.n	800a8ce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a836:	6a3b      	ldr	r3, [r7, #32]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2208      	movs	r2, #8
 800a83c:	4413      	add	r3, r2
 800a83e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	6a3b      	ldr	r3, [r7, #32]
 800a846:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84a:	685a      	ldr	r2, [r3, #4]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	1ad2      	subs	r2, r2, r3
 800a850:	2308      	movs	r3, #8
 800a852:	005b      	lsls	r3, r3, #1
 800a854:	429a      	cmp	r2, r3
 800a856:	d91f      	bls.n	800a898 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4413      	add	r3, r2
 800a85e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	f003 0307 	and.w	r3, r3, #7
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00a      	beq.n	800a880 <pvPortMalloc+0xf8>
	__asm volatile
 800a86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86e:	f383 8811 	msr	BASEPRI, r3
 800a872:	f3bf 8f6f 	isb	sy
 800a876:	f3bf 8f4f 	dsb	sy
 800a87a:	613b      	str	r3, [r7, #16]
}
 800a87c:	bf00      	nop
 800a87e:	e7fe      	b.n	800a87e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a882:	685a      	ldr	r2, [r3, #4]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	1ad2      	subs	r2, r2, r3
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a892:	69b8      	ldr	r0, [r7, #24]
 800a894:	f000 f8f8 	bl	800aa88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a898:	4b1a      	ldr	r3, [pc, #104]	; (800a904 <pvPortMalloc+0x17c>)
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	1ad3      	subs	r3, r2, r3
 800a8a2:	4a18      	ldr	r2, [pc, #96]	; (800a904 <pvPortMalloc+0x17c>)
 800a8a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a8a6:	4b17      	ldr	r3, [pc, #92]	; (800a904 <pvPortMalloc+0x17c>)
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	4b18      	ldr	r3, [pc, #96]	; (800a90c <pvPortMalloc+0x184>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d203      	bcs.n	800a8ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a8b2:	4b14      	ldr	r3, [pc, #80]	; (800a904 <pvPortMalloc+0x17c>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a15      	ldr	r2, [pc, #84]	; (800a90c <pvPortMalloc+0x184>)
 800a8b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	4b10      	ldr	r3, [pc, #64]	; (800a900 <pvPortMalloc+0x178>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	431a      	orrs	r2, r3
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a8ce:	f7fe fd31 	bl	8009334 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	f003 0307 	and.w	r3, r3, #7
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d00a      	beq.n	800a8f2 <pvPortMalloc+0x16a>
	__asm volatile
 800a8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e0:	f383 8811 	msr	BASEPRI, r3
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	60fb      	str	r3, [r7, #12]
}
 800a8ee:	bf00      	nop
 800a8f0:	e7fe      	b.n	800a8f0 <pvPortMalloc+0x168>
	return pvReturn;
 800a8f2:	69fb      	ldr	r3, [r7, #28]
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3728      	adds	r7, #40	; 0x28
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	20002d9c 	.word	0x20002d9c
 800a900:	20002da8 	.word	0x20002da8
 800a904:	20002da0 	.word	0x20002da0
 800a908:	20002d94 	.word	0x20002d94
 800a90c:	20002da4 	.word	0x20002da4

0800a910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d048      	beq.n	800a9b4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a922:	2308      	movs	r3, #8
 800a924:	425b      	negs	r3, r3
 800a926:	697a      	ldr	r2, [r7, #20]
 800a928:	4413      	add	r3, r2
 800a92a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	685a      	ldr	r2, [r3, #4]
 800a934:	4b21      	ldr	r3, [pc, #132]	; (800a9bc <vPortFree+0xac>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4013      	ands	r3, r2
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d10a      	bne.n	800a954 <vPortFree+0x44>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	60fb      	str	r3, [r7, #12]
}
 800a950:	bf00      	nop
 800a952:	e7fe      	b.n	800a952 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00a      	beq.n	800a972 <vPortFree+0x62>
	__asm volatile
 800a95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a960:	f383 8811 	msr	BASEPRI, r3
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	60bb      	str	r3, [r7, #8]
}
 800a96e:	bf00      	nop
 800a970:	e7fe      	b.n	800a970 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	685a      	ldr	r2, [r3, #4]
 800a976:	4b11      	ldr	r3, [pc, #68]	; (800a9bc <vPortFree+0xac>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4013      	ands	r3, r2
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d019      	beq.n	800a9b4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d115      	bne.n	800a9b4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	685a      	ldr	r2, [r3, #4]
 800a98c:	4b0b      	ldr	r3, [pc, #44]	; (800a9bc <vPortFree+0xac>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	43db      	mvns	r3, r3
 800a992:	401a      	ands	r2, r3
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a998:	f7fe fcbe 	bl	8009318 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	685a      	ldr	r2, [r3, #4]
 800a9a0:	4b07      	ldr	r3, [pc, #28]	; (800a9c0 <vPortFree+0xb0>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	4a06      	ldr	r2, [pc, #24]	; (800a9c0 <vPortFree+0xb0>)
 800a9a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a9aa:	6938      	ldr	r0, [r7, #16]
 800a9ac:	f000 f86c 	bl	800aa88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a9b0:	f7fe fcc0 	bl	8009334 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a9b4:	bf00      	nop
 800a9b6:	3718      	adds	r7, #24
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	20002da8 	.word	0x20002da8
 800a9c0:	20002da0 	.word	0x20002da0

0800a9c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a9ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a9ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a9d0:	4b27      	ldr	r3, [pc, #156]	; (800aa70 <prvHeapInit+0xac>)
 800a9d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f003 0307 	and.w	r3, r3, #7
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00c      	beq.n	800a9f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	3307      	adds	r3, #7
 800a9e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f023 0307 	bic.w	r3, r3, #7
 800a9ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a9ec:	68ba      	ldr	r2, [r7, #8]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	4a1f      	ldr	r2, [pc, #124]	; (800aa70 <prvHeapInit+0xac>)
 800a9f4:	4413      	add	r3, r2
 800a9f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a9fc:	4a1d      	ldr	r2, [pc, #116]	; (800aa74 <prvHeapInit+0xb0>)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa02:	4b1c      	ldr	r3, [pc, #112]	; (800aa74 <prvHeapInit+0xb0>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa10:	2208      	movs	r2, #8
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	1a9b      	subs	r3, r3, r2
 800aa16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f023 0307 	bic.w	r3, r3, #7
 800aa1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	4a15      	ldr	r2, [pc, #84]	; (800aa78 <prvHeapInit+0xb4>)
 800aa24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa26:	4b14      	ldr	r3, [pc, #80]	; (800aa78 <prvHeapInit+0xb4>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa2e:	4b12      	ldr	r3, [pc, #72]	; (800aa78 <prvHeapInit+0xb4>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2200      	movs	r2, #0
 800aa34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	1ad2      	subs	r2, r2, r3
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa44:	4b0c      	ldr	r3, [pc, #48]	; (800aa78 <prvHeapInit+0xb4>)
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	4a0a      	ldr	r2, [pc, #40]	; (800aa7c <prvHeapInit+0xb8>)
 800aa52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	4a09      	ldr	r2, [pc, #36]	; (800aa80 <prvHeapInit+0xbc>)
 800aa5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa5c:	4b09      	ldr	r3, [pc, #36]	; (800aa84 <prvHeapInit+0xc0>)
 800aa5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aa62:	601a      	str	r2, [r3, #0]
}
 800aa64:	bf00      	nop
 800aa66:	3714      	adds	r7, #20
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	20000d94 	.word	0x20000d94
 800aa74:	20002d94 	.word	0x20002d94
 800aa78:	20002d9c 	.word	0x20002d9c
 800aa7c:	20002da4 	.word	0x20002da4
 800aa80:	20002da0 	.word	0x20002da0
 800aa84:	20002da8 	.word	0x20002da8

0800aa88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa90:	4b28      	ldr	r3, [pc, #160]	; (800ab34 <prvInsertBlockIntoFreeList+0xac>)
 800aa92:	60fb      	str	r3, [r7, #12]
 800aa94:	e002      	b.n	800aa9c <prvInsertBlockIntoFreeList+0x14>
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	60fb      	str	r3, [r7, #12]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d8f7      	bhi.n	800aa96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	4413      	add	r3, r2
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d108      	bne.n	800aaca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	685a      	ldr	r2, [r3, #4]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	441a      	add	r2, r3
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	441a      	add	r2, r3
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d118      	bne.n	800ab10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	4b15      	ldr	r3, [pc, #84]	; (800ab38 <prvInsertBlockIntoFreeList+0xb0>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d00d      	beq.n	800ab06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685a      	ldr	r2, [r3, #4]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	441a      	add	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	e008      	b.n	800ab18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab06:	4b0c      	ldr	r3, [pc, #48]	; (800ab38 <prvInsertBlockIntoFreeList+0xb0>)
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	601a      	str	r2, [r3, #0]
 800ab0e:	e003      	b.n	800ab18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d002      	beq.n	800ab26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab26:	bf00      	nop
 800ab28:	3714      	adds	r7, #20
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	20002d94 	.word	0x20002d94
 800ab38:	20002d9c 	.word	0x20002d9c

0800ab3c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b085      	sub	sp, #20
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	0a5a      	lsrs	r2, r3, #9
 800ab4c:	490f      	ldr	r1, [pc, #60]	; (800ab8c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800ab4e:	fba1 1202 	umull	r1, r2, r1, r2
 800ab52:	09d2      	lsrs	r2, r2, #7
 800ab54:	490e      	ldr	r1, [pc, #56]	; (800ab90 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800ab56:	fb01 f202 	mul.w	r2, r1, r2
 800ab5a:	1a9b      	subs	r3, r3, r2
 800ab5c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	0a5b      	lsrs	r3, r3, #9
 800ab64:	4a09      	ldr	r2, [pc, #36]	; (800ab8c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800ab66:	fba2 2303 	umull	r2, r3, r2, r3
 800ab6a:	09db      	lsrs	r3, r3, #7
 800ab6c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	441a      	add	r2, r3
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	601a      	str	r2, [r3, #0]
}
 800ab80:	bf00      	nop
 800ab82:	3714      	adds	r7, #20
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr
 800ab8c:	00044b83 	.word	0x00044b83
 800ab90:	3b9aca00 	.word	0x3b9aca00

0800ab94 <__cxa_pure_virtual>:
 800ab94:	b508      	push	{r3, lr}
 800ab96:	f000 f80d 	bl	800abb4 <_ZSt9terminatev>

0800ab9a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ab9a:	b508      	push	{r3, lr}
 800ab9c:	4780      	blx	r0
 800ab9e:	f000 f80e 	bl	800abbe <abort>
	...

0800aba4 <_ZSt13get_terminatev>:
 800aba4:	4b02      	ldr	r3, [pc, #8]	; (800abb0 <_ZSt13get_terminatev+0xc>)
 800aba6:	6818      	ldr	r0, [r3, #0]
 800aba8:	f3bf 8f5b 	dmb	ish
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	20000018 	.word	0x20000018

0800abb4 <_ZSt9terminatev>:
 800abb4:	b508      	push	{r3, lr}
 800abb6:	f7ff fff5 	bl	800aba4 <_ZSt13get_terminatev>
 800abba:	f7ff ffee 	bl	800ab9a <_ZN10__cxxabiv111__terminateEPFvvE>

0800abbe <abort>:
 800abbe:	b508      	push	{r3, lr}
 800abc0:	2006      	movs	r0, #6
 800abc2:	f000 f873 	bl	800acac <raise>
 800abc6:	2001      	movs	r0, #1
 800abc8:	f7f8 ffae 	bl	8003b28 <_exit>

0800abcc <__errno>:
 800abcc:	4b01      	ldr	r3, [pc, #4]	; (800abd4 <__errno+0x8>)
 800abce:	6818      	ldr	r0, [r3, #0]
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop
 800abd4:	2000001c 	.word	0x2000001c

0800abd8 <__libc_init_array>:
 800abd8:	b570      	push	{r4, r5, r6, lr}
 800abda:	4d0d      	ldr	r5, [pc, #52]	; (800ac10 <__libc_init_array+0x38>)
 800abdc:	4c0d      	ldr	r4, [pc, #52]	; (800ac14 <__libc_init_array+0x3c>)
 800abde:	1b64      	subs	r4, r4, r5
 800abe0:	10a4      	asrs	r4, r4, #2
 800abe2:	2600      	movs	r6, #0
 800abe4:	42a6      	cmp	r6, r4
 800abe6:	d109      	bne.n	800abfc <__libc_init_array+0x24>
 800abe8:	4d0b      	ldr	r5, [pc, #44]	; (800ac18 <__libc_init_array+0x40>)
 800abea:	4c0c      	ldr	r4, [pc, #48]	; (800ac1c <__libc_init_array+0x44>)
 800abec:	f000 f970 	bl	800aed0 <_init>
 800abf0:	1b64      	subs	r4, r4, r5
 800abf2:	10a4      	asrs	r4, r4, #2
 800abf4:	2600      	movs	r6, #0
 800abf6:	42a6      	cmp	r6, r4
 800abf8:	d105      	bne.n	800ac06 <__libc_init_array+0x2e>
 800abfa:	bd70      	pop	{r4, r5, r6, pc}
 800abfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac00:	4798      	blx	r3
 800ac02:	3601      	adds	r6, #1
 800ac04:	e7ee      	b.n	800abe4 <__libc_init_array+0xc>
 800ac06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac0a:	4798      	blx	r3
 800ac0c:	3601      	adds	r6, #1
 800ac0e:	e7f2      	b.n	800abf6 <__libc_init_array+0x1e>
 800ac10:	0800b254 	.word	0x0800b254
 800ac14:	0800b254 	.word	0x0800b254
 800ac18:	0800b254 	.word	0x0800b254
 800ac1c:	0800b258 	.word	0x0800b258

0800ac20 <memcpy>:
 800ac20:	440a      	add	r2, r1
 800ac22:	4291      	cmp	r1, r2
 800ac24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ac28:	d100      	bne.n	800ac2c <memcpy+0xc>
 800ac2a:	4770      	bx	lr
 800ac2c:	b510      	push	{r4, lr}
 800ac2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac36:	4291      	cmp	r1, r2
 800ac38:	d1f9      	bne.n	800ac2e <memcpy+0xe>
 800ac3a:	bd10      	pop	{r4, pc}

0800ac3c <memset>:
 800ac3c:	4402      	add	r2, r0
 800ac3e:	4603      	mov	r3, r0
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d100      	bne.n	800ac46 <memset+0xa>
 800ac44:	4770      	bx	lr
 800ac46:	f803 1b01 	strb.w	r1, [r3], #1
 800ac4a:	e7f9      	b.n	800ac40 <memset+0x4>

0800ac4c <realloc>:
 800ac4c:	4b02      	ldr	r3, [pc, #8]	; (800ac58 <realloc+0xc>)
 800ac4e:	460a      	mov	r2, r1
 800ac50:	4601      	mov	r1, r0
 800ac52:	6818      	ldr	r0, [r3, #0]
 800ac54:	f000 b8a0 	b.w	800ad98 <_realloc_r>
 800ac58:	2000001c 	.word	0x2000001c

0800ac5c <_raise_r>:
 800ac5c:	291f      	cmp	r1, #31
 800ac5e:	b538      	push	{r3, r4, r5, lr}
 800ac60:	4604      	mov	r4, r0
 800ac62:	460d      	mov	r5, r1
 800ac64:	d904      	bls.n	800ac70 <_raise_r+0x14>
 800ac66:	2316      	movs	r3, #22
 800ac68:	6003      	str	r3, [r0, #0]
 800ac6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac6e:	bd38      	pop	{r3, r4, r5, pc}
 800ac70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac72:	b112      	cbz	r2, 800ac7a <_raise_r+0x1e>
 800ac74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac78:	b94b      	cbnz	r3, 800ac8e <_raise_r+0x32>
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f000 f830 	bl	800ace0 <_getpid_r>
 800ac80:	462a      	mov	r2, r5
 800ac82:	4601      	mov	r1, r0
 800ac84:	4620      	mov	r0, r4
 800ac86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac8a:	f000 b817 	b.w	800acbc <_kill_r>
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d00a      	beq.n	800aca8 <_raise_r+0x4c>
 800ac92:	1c59      	adds	r1, r3, #1
 800ac94:	d103      	bne.n	800ac9e <_raise_r+0x42>
 800ac96:	2316      	movs	r3, #22
 800ac98:	6003      	str	r3, [r0, #0]
 800ac9a:	2001      	movs	r0, #1
 800ac9c:	e7e7      	b.n	800ac6e <_raise_r+0x12>
 800ac9e:	2400      	movs	r4, #0
 800aca0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aca4:	4628      	mov	r0, r5
 800aca6:	4798      	blx	r3
 800aca8:	2000      	movs	r0, #0
 800acaa:	e7e0      	b.n	800ac6e <_raise_r+0x12>

0800acac <raise>:
 800acac:	4b02      	ldr	r3, [pc, #8]	; (800acb8 <raise+0xc>)
 800acae:	4601      	mov	r1, r0
 800acb0:	6818      	ldr	r0, [r3, #0]
 800acb2:	f7ff bfd3 	b.w	800ac5c <_raise_r>
 800acb6:	bf00      	nop
 800acb8:	2000001c 	.word	0x2000001c

0800acbc <_kill_r>:
 800acbc:	b538      	push	{r3, r4, r5, lr}
 800acbe:	4d07      	ldr	r5, [pc, #28]	; (800acdc <_kill_r+0x20>)
 800acc0:	2300      	movs	r3, #0
 800acc2:	4604      	mov	r4, r0
 800acc4:	4608      	mov	r0, r1
 800acc6:	4611      	mov	r1, r2
 800acc8:	602b      	str	r3, [r5, #0]
 800acca:	f7f8 ff1d 	bl	8003b08 <_kill>
 800acce:	1c43      	adds	r3, r0, #1
 800acd0:	d102      	bne.n	800acd8 <_kill_r+0x1c>
 800acd2:	682b      	ldr	r3, [r5, #0]
 800acd4:	b103      	cbz	r3, 800acd8 <_kill_r+0x1c>
 800acd6:	6023      	str	r3, [r4, #0]
 800acd8:	bd38      	pop	{r3, r4, r5, pc}
 800acda:	bf00      	nop
 800acdc:	200030bc 	.word	0x200030bc

0800ace0 <_getpid_r>:
 800ace0:	f7f8 bf0a 	b.w	8003af8 <_getpid>

0800ace4 <_malloc_r>:
 800ace4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace6:	1ccd      	adds	r5, r1, #3
 800ace8:	f025 0503 	bic.w	r5, r5, #3
 800acec:	3508      	adds	r5, #8
 800acee:	2d0c      	cmp	r5, #12
 800acf0:	bf38      	it	cc
 800acf2:	250c      	movcc	r5, #12
 800acf4:	2d00      	cmp	r5, #0
 800acf6:	4606      	mov	r6, r0
 800acf8:	db01      	blt.n	800acfe <_malloc_r+0x1a>
 800acfa:	42a9      	cmp	r1, r5
 800acfc:	d903      	bls.n	800ad06 <_malloc_r+0x22>
 800acfe:	230c      	movs	r3, #12
 800ad00:	6033      	str	r3, [r6, #0]
 800ad02:	2000      	movs	r0, #0
 800ad04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad06:	f000 f87d 	bl	800ae04 <__malloc_lock>
 800ad0a:	4921      	ldr	r1, [pc, #132]	; (800ad90 <_malloc_r+0xac>)
 800ad0c:	680a      	ldr	r2, [r1, #0]
 800ad0e:	4614      	mov	r4, r2
 800ad10:	b99c      	cbnz	r4, 800ad3a <_malloc_r+0x56>
 800ad12:	4f20      	ldr	r7, [pc, #128]	; (800ad94 <_malloc_r+0xb0>)
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	b923      	cbnz	r3, 800ad22 <_malloc_r+0x3e>
 800ad18:	4621      	mov	r1, r4
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f000 f862 	bl	800ade4 <_sbrk_r>
 800ad20:	6038      	str	r0, [r7, #0]
 800ad22:	4629      	mov	r1, r5
 800ad24:	4630      	mov	r0, r6
 800ad26:	f000 f85d 	bl	800ade4 <_sbrk_r>
 800ad2a:	1c43      	adds	r3, r0, #1
 800ad2c:	d123      	bne.n	800ad76 <_malloc_r+0x92>
 800ad2e:	230c      	movs	r3, #12
 800ad30:	6033      	str	r3, [r6, #0]
 800ad32:	4630      	mov	r0, r6
 800ad34:	f000 f86c 	bl	800ae10 <__malloc_unlock>
 800ad38:	e7e3      	b.n	800ad02 <_malloc_r+0x1e>
 800ad3a:	6823      	ldr	r3, [r4, #0]
 800ad3c:	1b5b      	subs	r3, r3, r5
 800ad3e:	d417      	bmi.n	800ad70 <_malloc_r+0x8c>
 800ad40:	2b0b      	cmp	r3, #11
 800ad42:	d903      	bls.n	800ad4c <_malloc_r+0x68>
 800ad44:	6023      	str	r3, [r4, #0]
 800ad46:	441c      	add	r4, r3
 800ad48:	6025      	str	r5, [r4, #0]
 800ad4a:	e004      	b.n	800ad56 <_malloc_r+0x72>
 800ad4c:	6863      	ldr	r3, [r4, #4]
 800ad4e:	42a2      	cmp	r2, r4
 800ad50:	bf0c      	ite	eq
 800ad52:	600b      	streq	r3, [r1, #0]
 800ad54:	6053      	strne	r3, [r2, #4]
 800ad56:	4630      	mov	r0, r6
 800ad58:	f000 f85a 	bl	800ae10 <__malloc_unlock>
 800ad5c:	f104 000b 	add.w	r0, r4, #11
 800ad60:	1d23      	adds	r3, r4, #4
 800ad62:	f020 0007 	bic.w	r0, r0, #7
 800ad66:	1ac2      	subs	r2, r0, r3
 800ad68:	d0cc      	beq.n	800ad04 <_malloc_r+0x20>
 800ad6a:	1a1b      	subs	r3, r3, r0
 800ad6c:	50a3      	str	r3, [r4, r2]
 800ad6e:	e7c9      	b.n	800ad04 <_malloc_r+0x20>
 800ad70:	4622      	mov	r2, r4
 800ad72:	6864      	ldr	r4, [r4, #4]
 800ad74:	e7cc      	b.n	800ad10 <_malloc_r+0x2c>
 800ad76:	1cc4      	adds	r4, r0, #3
 800ad78:	f024 0403 	bic.w	r4, r4, #3
 800ad7c:	42a0      	cmp	r0, r4
 800ad7e:	d0e3      	beq.n	800ad48 <_malloc_r+0x64>
 800ad80:	1a21      	subs	r1, r4, r0
 800ad82:	4630      	mov	r0, r6
 800ad84:	f000 f82e 	bl	800ade4 <_sbrk_r>
 800ad88:	3001      	adds	r0, #1
 800ad8a:	d1dd      	bne.n	800ad48 <_malloc_r+0x64>
 800ad8c:	e7cf      	b.n	800ad2e <_malloc_r+0x4a>
 800ad8e:	bf00      	nop
 800ad90:	20002dac 	.word	0x20002dac
 800ad94:	20002db0 	.word	0x20002db0

0800ad98 <_realloc_r>:
 800ad98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad9a:	4607      	mov	r7, r0
 800ad9c:	4614      	mov	r4, r2
 800ad9e:	460e      	mov	r6, r1
 800ada0:	b921      	cbnz	r1, 800adac <_realloc_r+0x14>
 800ada2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ada6:	4611      	mov	r1, r2
 800ada8:	f7ff bf9c 	b.w	800ace4 <_malloc_r>
 800adac:	b922      	cbnz	r2, 800adb8 <_realloc_r+0x20>
 800adae:	f000 f835 	bl	800ae1c <_free_r>
 800adb2:	4625      	mov	r5, r4
 800adb4:	4628      	mov	r0, r5
 800adb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adb8:	f000 f880 	bl	800aebc <_malloc_usable_size_r>
 800adbc:	42a0      	cmp	r0, r4
 800adbe:	d20f      	bcs.n	800ade0 <_realloc_r+0x48>
 800adc0:	4621      	mov	r1, r4
 800adc2:	4638      	mov	r0, r7
 800adc4:	f7ff ff8e 	bl	800ace4 <_malloc_r>
 800adc8:	4605      	mov	r5, r0
 800adca:	2800      	cmp	r0, #0
 800adcc:	d0f2      	beq.n	800adb4 <_realloc_r+0x1c>
 800adce:	4631      	mov	r1, r6
 800add0:	4622      	mov	r2, r4
 800add2:	f7ff ff25 	bl	800ac20 <memcpy>
 800add6:	4631      	mov	r1, r6
 800add8:	4638      	mov	r0, r7
 800adda:	f000 f81f 	bl	800ae1c <_free_r>
 800adde:	e7e9      	b.n	800adb4 <_realloc_r+0x1c>
 800ade0:	4635      	mov	r5, r6
 800ade2:	e7e7      	b.n	800adb4 <_realloc_r+0x1c>

0800ade4 <_sbrk_r>:
 800ade4:	b538      	push	{r3, r4, r5, lr}
 800ade6:	4d06      	ldr	r5, [pc, #24]	; (800ae00 <_sbrk_r+0x1c>)
 800ade8:	2300      	movs	r3, #0
 800adea:	4604      	mov	r4, r0
 800adec:	4608      	mov	r0, r1
 800adee:	602b      	str	r3, [r5, #0]
 800adf0:	f7f8 fea4 	bl	8003b3c <_sbrk>
 800adf4:	1c43      	adds	r3, r0, #1
 800adf6:	d102      	bne.n	800adfe <_sbrk_r+0x1a>
 800adf8:	682b      	ldr	r3, [r5, #0]
 800adfa:	b103      	cbz	r3, 800adfe <_sbrk_r+0x1a>
 800adfc:	6023      	str	r3, [r4, #0]
 800adfe:	bd38      	pop	{r3, r4, r5, pc}
 800ae00:	200030bc 	.word	0x200030bc

0800ae04 <__malloc_lock>:
 800ae04:	4801      	ldr	r0, [pc, #4]	; (800ae0c <__malloc_lock+0x8>)
 800ae06:	f000 b861 	b.w	800aecc <__retarget_lock_acquire_recursive>
 800ae0a:	bf00      	nop
 800ae0c:	200030c4 	.word	0x200030c4

0800ae10 <__malloc_unlock>:
 800ae10:	4801      	ldr	r0, [pc, #4]	; (800ae18 <__malloc_unlock+0x8>)
 800ae12:	f000 b85c 	b.w	800aece <__retarget_lock_release_recursive>
 800ae16:	bf00      	nop
 800ae18:	200030c4 	.word	0x200030c4

0800ae1c <_free_r>:
 800ae1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae1e:	2900      	cmp	r1, #0
 800ae20:	d048      	beq.n	800aeb4 <_free_r+0x98>
 800ae22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae26:	9001      	str	r0, [sp, #4]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f1a1 0404 	sub.w	r4, r1, #4
 800ae2e:	bfb8      	it	lt
 800ae30:	18e4      	addlt	r4, r4, r3
 800ae32:	f7ff ffe7 	bl	800ae04 <__malloc_lock>
 800ae36:	4a20      	ldr	r2, [pc, #128]	; (800aeb8 <_free_r+0x9c>)
 800ae38:	9801      	ldr	r0, [sp, #4]
 800ae3a:	6813      	ldr	r3, [r2, #0]
 800ae3c:	4615      	mov	r5, r2
 800ae3e:	b933      	cbnz	r3, 800ae4e <_free_r+0x32>
 800ae40:	6063      	str	r3, [r4, #4]
 800ae42:	6014      	str	r4, [r2, #0]
 800ae44:	b003      	add	sp, #12
 800ae46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae4a:	f7ff bfe1 	b.w	800ae10 <__malloc_unlock>
 800ae4e:	42a3      	cmp	r3, r4
 800ae50:	d90b      	bls.n	800ae6a <_free_r+0x4e>
 800ae52:	6821      	ldr	r1, [r4, #0]
 800ae54:	1862      	adds	r2, r4, r1
 800ae56:	4293      	cmp	r3, r2
 800ae58:	bf04      	itt	eq
 800ae5a:	681a      	ldreq	r2, [r3, #0]
 800ae5c:	685b      	ldreq	r3, [r3, #4]
 800ae5e:	6063      	str	r3, [r4, #4]
 800ae60:	bf04      	itt	eq
 800ae62:	1852      	addeq	r2, r2, r1
 800ae64:	6022      	streq	r2, [r4, #0]
 800ae66:	602c      	str	r4, [r5, #0]
 800ae68:	e7ec      	b.n	800ae44 <_free_r+0x28>
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	b10b      	cbz	r3, 800ae74 <_free_r+0x58>
 800ae70:	42a3      	cmp	r3, r4
 800ae72:	d9fa      	bls.n	800ae6a <_free_r+0x4e>
 800ae74:	6811      	ldr	r1, [r2, #0]
 800ae76:	1855      	adds	r5, r2, r1
 800ae78:	42a5      	cmp	r5, r4
 800ae7a:	d10b      	bne.n	800ae94 <_free_r+0x78>
 800ae7c:	6824      	ldr	r4, [r4, #0]
 800ae7e:	4421      	add	r1, r4
 800ae80:	1854      	adds	r4, r2, r1
 800ae82:	42a3      	cmp	r3, r4
 800ae84:	6011      	str	r1, [r2, #0]
 800ae86:	d1dd      	bne.n	800ae44 <_free_r+0x28>
 800ae88:	681c      	ldr	r4, [r3, #0]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	6053      	str	r3, [r2, #4]
 800ae8e:	4421      	add	r1, r4
 800ae90:	6011      	str	r1, [r2, #0]
 800ae92:	e7d7      	b.n	800ae44 <_free_r+0x28>
 800ae94:	d902      	bls.n	800ae9c <_free_r+0x80>
 800ae96:	230c      	movs	r3, #12
 800ae98:	6003      	str	r3, [r0, #0]
 800ae9a:	e7d3      	b.n	800ae44 <_free_r+0x28>
 800ae9c:	6825      	ldr	r5, [r4, #0]
 800ae9e:	1961      	adds	r1, r4, r5
 800aea0:	428b      	cmp	r3, r1
 800aea2:	bf04      	itt	eq
 800aea4:	6819      	ldreq	r1, [r3, #0]
 800aea6:	685b      	ldreq	r3, [r3, #4]
 800aea8:	6063      	str	r3, [r4, #4]
 800aeaa:	bf04      	itt	eq
 800aeac:	1949      	addeq	r1, r1, r5
 800aeae:	6021      	streq	r1, [r4, #0]
 800aeb0:	6054      	str	r4, [r2, #4]
 800aeb2:	e7c7      	b.n	800ae44 <_free_r+0x28>
 800aeb4:	b003      	add	sp, #12
 800aeb6:	bd30      	pop	{r4, r5, pc}
 800aeb8:	20002dac 	.word	0x20002dac

0800aebc <_malloc_usable_size_r>:
 800aebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aec0:	1f18      	subs	r0, r3, #4
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	bfbc      	itt	lt
 800aec6:	580b      	ldrlt	r3, [r1, r0]
 800aec8:	18c0      	addlt	r0, r0, r3
 800aeca:	4770      	bx	lr

0800aecc <__retarget_lock_acquire_recursive>:
 800aecc:	4770      	bx	lr

0800aece <__retarget_lock_release_recursive>:
 800aece:	4770      	bx	lr

0800aed0 <_init>:
 800aed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed2:	bf00      	nop
 800aed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aed6:	bc08      	pop	{r3}
 800aed8:	469e      	mov	lr, r3
 800aeda:	4770      	bx	lr

0800aedc <_fini>:
 800aedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aede:	bf00      	nop
 800aee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aee2:	bc08      	pop	{r3}
 800aee4:	469e      	mov	lr, r3
 800aee6:	4770      	bx	lr
