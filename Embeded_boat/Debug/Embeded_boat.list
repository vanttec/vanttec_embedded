
Embeded_boat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003980  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003b10  08003b10  00013b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b70  08003b70  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003b70  08003b70  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b70  08003b70  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b70  08003b70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001004  20000010  08003b88  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001014  08003b88  00021014  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef13  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021fc  00000000  00000000  0002ef53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db8  00000000  00000000  00031150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb0  00000000  00000000  00031f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001412c  00000000  00000000  00032bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a65a  00000000  00000000  00046ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007151e  00000000  00000000  0005133e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c285c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003848  00000000  00000000  000c28d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003af8 	.word	0x08003af8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08003af8 	.word	0x08003af8

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	20000080 	.word	0x20000080

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b088      	sub	sp, #32
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fa03 	bl	8000614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f81d 	bl	800024c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f8c3 	bl	800039c <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8000216:	f000 f85f 	bl	80002d8 <_ZL12MX_TIM2_Initv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800021a:	4b0a      	ldr	r3, [pc, #40]	; (8000244 <main+0x40>)
 800021c:	1d3c      	adds	r4, r7, #4
 800021e:	461d      	mov	r5, r3
 8000220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000224:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f002 fa14 	bl	800265e <osThreadCreate>
 8000236:	4602      	mov	r2, r0
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <main+0x44>)
 800023a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800023c:	f002 fa08 	bl	8002650 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000240:	e7fe      	b.n	8000240 <main+0x3c>
 8000242:	bf00      	nop
 8000244:	08003b1c 	.word	0x08003b1c
 8000248:	200002c0 	.word	0x200002c0

0800024c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b090      	sub	sp, #64	; 0x40
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	2228      	movs	r2, #40	; 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f003 fc44 	bl	8003ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026e:	2302      	movs	r3, #2
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000272:	2301      	movs	r3, #1
 8000274:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000276:	2310      	movs	r3, #16
 8000278:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027a:	2300      	movs	r3, #0
 800027c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	4618      	mov	r0, r3
 8000284:	f000 fcc8 	bl	8000c18 <HAL_RCC_OscConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	bf14      	ite	ne
 800028e:	2301      	movne	r3, #1
 8000290:	2300      	moveq	r3, #0
 8000292:	b2db      	uxtb	r3, r3
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 8000298:	f000 f8d6 	bl	8000448 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2100      	movs	r1, #0
 80002b4:	4618      	mov	r0, r3
 80002b6:	f001 fbb7 	bl	8001a28 <HAL_RCC_ClockConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	bf14      	ite	ne
 80002c0:	2301      	movne	r3, #1
 80002c2:	2300      	moveq	r3, #0
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 80002ca:	f000 f8bd 	bl	8000448 <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3740      	adds	r7, #64	; 0x40
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002de:	f107 0314 	add.w	r3, r7, #20
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002f6:	4b28      	ldr	r3, [pc, #160]	; (8000398 <_ZL12MX_TIM2_Initv+0xc0>)
 80002f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80002fe:	4b26      	ldr	r3, [pc, #152]	; (8000398 <_ZL12MX_TIM2_Initv+0xc0>)
 8000300:	2207      	movs	r2, #7
 8000302:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000304:	4b24      	ldr	r3, [pc, #144]	; (8000398 <_ZL12MX_TIM2_Initv+0xc0>)
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 800030a:	4b23      	ldr	r3, [pc, #140]	; (8000398 <_ZL12MX_TIM2_Initv+0xc0>)
 800030c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000310:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000312:	4b21      	ldr	r3, [pc, #132]	; (8000398 <_ZL12MX_TIM2_Initv+0xc0>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000318:	4b1f      	ldr	r3, [pc, #124]	; (8000398 <_ZL12MX_TIM2_Initv+0xc0>)
 800031a:	2200      	movs	r2, #0
 800031c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800031e:	481e      	ldr	r0, [pc, #120]	; (8000398 <_ZL12MX_TIM2_Initv+0xc0>)
 8000320:	f001 fd68 	bl	8001df4 <HAL_TIM_IC_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	bf14      	ite	ne
 800032a:	2301      	movne	r3, #1
 800032c:	2300      	moveq	r3, #0
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8000334:	f000 f888 	bl	8000448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000338:	2300      	movs	r3, #0
 800033a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800033c:	2300      	movs	r3, #0
 800033e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000340:	f107 0314 	add.w	r3, r7, #20
 8000344:	4619      	mov	r1, r3
 8000346:	4814      	ldr	r0, [pc, #80]	; (8000398 <_ZL12MX_TIM2_Initv+0xc0>)
 8000348:	f002 f8e6 	bl	8002518 <HAL_TIMEx_MasterConfigSynchronization>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	bf14      	ite	ne
 8000352:	2301      	movne	r3, #1
 8000354:	2300      	moveq	r3, #0
 8000356:	b2db      	uxtb	r3, r3
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 800035c:	f000 f874 	bl	8000448 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000360:	2300      	movs	r3, #0
 8000362:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000364:	2301      	movs	r3, #1
 8000366:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	2204      	movs	r2, #4
 8000374:	4619      	mov	r1, r3
 8000376:	4808      	ldr	r0, [pc, #32]	; (8000398 <_ZL12MX_TIM2_Initv+0xc0>)
 8000378:	f001 fe86 	bl	8002088 <HAL_TIM_IC_ConfigChannel>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	bf14      	ite	ne
 8000382:	2301      	movne	r3, #1
 8000384:	2300      	moveq	r3, #0
 8000386:	b2db      	uxtb	r3, r3
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <_ZL12MX_TIM2_Initv+0xb8>
  {
    Error_Handler();
 800038c:	f000 f85c 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000390:	bf00      	nop
 8000392:	3720      	adds	r7, #32
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000280 	.word	0x20000280

0800039c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b088      	sub	sp, #32
 80003a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a2:	f107 030c 	add.w	r3, r7, #12
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
 80003b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003b2:	4b20      	ldr	r3, [pc, #128]	; (8000434 <_ZL12MX_GPIO_Initv+0x98>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a1f      	ldr	r2, [pc, #124]	; (8000434 <_ZL12MX_GPIO_Initv+0x98>)
 80003b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <_ZL12MX_GPIO_Initv+0x98>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003c6:	60bb      	str	r3, [r7, #8]
 80003c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <_ZL12MX_GPIO_Initv+0x98>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a19      	ldr	r2, [pc, #100]	; (8000434 <_ZL12MX_GPIO_Initv+0x98>)
 80003d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b17      	ldr	r3, [pc, #92]	; (8000434 <_ZL12MX_GPIO_Initv+0x98>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, blue_light_pin_Pin|green_light_pin_Pin|red_light_pin_Pin, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80003e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ec:	f000 fbfc 	bl	8000be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIN_X8R_2_Pin PIN_X8R_4_Pin PIN_X8R_5_Pin */
  GPIO_InitStruct.Pin = PIN_X8R_2_Pin|PIN_X8R_4_Pin|PIN_X8R_5_Pin;
 80003f0:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80003f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003f6:	2300      	movs	r3, #0
 80003f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fe:	f107 030c 	add.w	r3, r7, #12
 8000402:	4619      	mov	r1, r3
 8000404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000408:	f000 fa7c 	bl	8000904 <HAL_GPIO_Init>

  /*Configure GPIO pins : blue_light_pin_Pin green_light_pin_Pin red_light_pin_Pin */
  GPIO_InitStruct.Pin = blue_light_pin_Pin|green_light_pin_Pin|red_light_pin_Pin;
 800040c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000410:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000412:	2301      	movs	r3, #1
 8000414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	2300      	movs	r3, #0
 8000418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041a:	2300      	movs	r3, #0
 800041c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041e:	f107 030c 	add.w	r3, r7, #12
 8000422:	4619      	mov	r1, r3
 8000424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000428:	f000 fa6c 	bl	8000904 <HAL_GPIO_Init>

}
 800042c:	bf00      	nop
 800042e:	3720      	adds	r7, #32
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40021000 	.word	0x40021000

08000438 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000440:	2001      	movs	r0, #1
 8000442:	f002 f958 	bl	80026f6 <osDelay>
 8000446:	e7fb      	b.n	8000440 <_Z16StartDefaultTaskPKv+0x8>

08000448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
	...

08000458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <HAL_MspInit+0x44>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	4a0e      	ldr	r2, [pc, #56]	; (800049c <HAL_MspInit+0x44>)
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	6193      	str	r3, [r2, #24]
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <HAL_MspInit+0x44>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <HAL_MspInit+0x44>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	4a08      	ldr	r2, [pc, #32]	; (800049c <HAL_MspInit+0x44>)
 800047c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000480:	61d3      	str	r3, [r2, #28]
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <HAL_MspInit+0x44>)
 8000484:	69db      	ldr	r3, [r3, #28]
 8000486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800048a:	603b      	str	r3, [r7, #0]
 800048c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000

080004a0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08a      	sub	sp, #40	; 0x28
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a8:	f107 0314 	add.w	r3, r7, #20
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
 80004b6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004c0:	d130      	bne.n	8000524 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004c2:	4b1a      	ldr	r3, [pc, #104]	; (800052c <HAL_TIM_IC_MspInit+0x8c>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	4a19      	ldr	r2, [pc, #100]	; (800052c <HAL_TIM_IC_MspInit+0x8c>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	61d3      	str	r3, [r2, #28]
 80004ce:	4b17      	ldr	r3, [pc, #92]	; (800052c <HAL_TIM_IC_MspInit+0x8c>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b14      	ldr	r3, [pc, #80]	; (800052c <HAL_TIM_IC_MspInit+0x8c>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a13      	ldr	r2, [pc, #76]	; (800052c <HAL_TIM_IC_MspInit+0x8c>)
 80004e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <HAL_TIM_IC_MspInit+0x8c>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004f2:	2302      	movs	r3, #2
 80004f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f6:	2302      	movs	r3, #2
 80004f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fe:	2300      	movs	r3, #0
 8000500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000502:	2301      	movs	r3, #1
 8000504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	4619      	mov	r1, r3
 800050c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000510:	f000 f9f8 	bl	8000904 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000514:	2200      	movs	r2, #0
 8000516:	2100      	movs	r1, #0
 8000518:	201c      	movs	r0, #28
 800051a:	f000 f9bc 	bl	8000896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800051e:	201c      	movs	r0, #28
 8000520:	f000 f9d5 	bl	80008ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000524:	bf00      	nop
 8000526:	3728      	adds	r7, #40	; 0x28
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000

08000530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr

0800053e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000542:	e7fe      	b.n	8000542 <HardFault_Handler+0x4>

08000544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000548:	e7fe      	b.n	8000548 <MemManage_Handler+0x4>

0800054a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800054e:	e7fe      	b.n	800054e <BusFault_Handler+0x4>

08000550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <UsageFault_Handler+0x4>

08000556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000568:	f000 f89a 	bl	80006a0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800056c:	f002 fe3c 	bl	80031e8 <xTaskGetSchedulerState>
 8000570:	4603      	mov	r3, r0
 8000572:	2b01      	cmp	r3, #1
 8000574:	d001      	beq.n	800057a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000576:	f003 f86f 	bl	8003658 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000584:	4802      	ldr	r0, [pc, #8]	; (8000590 <TIM2_IRQHandler+0x10>)
 8000586:	f001 fc60 	bl	8001e4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000280 	.word	0x20000280

08000594 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <SystemInit+0x28>)
 800059a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <SystemInit+0x28>)
 80005a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <SystemInit+0x28>)
 80005aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005ae:	609a      	str	r2, [r3, #8]
#endif
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005c6:	e003      	b.n	80005d0 <LoopCopyDataInit>

080005c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005ce:	3104      	adds	r1, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <LoopForever+0xa>)
	ldr	r3, =_edata
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <LoopForever+0xe>)
	adds	r2, r0, r1
 80005d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005d8:	d3f6      	bcc.n	80005c8 <CopyDataInit>
	ldr	r2, =_sbss
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <LoopForever+0x12>)
	b	LoopFillZerobss
 80005dc:	e002      	b.n	80005e4 <LoopFillZerobss>

080005de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005e0:	f842 3b04 	str.w	r3, [r2], #4

080005e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <LoopForever+0x16>)
	cmp	r2, r3
 80005e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005e8:	d3f9      	bcc.n	80005de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005ea:	f7ff ffd3 	bl	8000594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ee:	f003 fa57 	bl	8003aa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005f2:	f7ff fe07 	bl	8000204 <main>

080005f6 <LoopForever>:

LoopForever:
    b LoopForever
 80005f6:	e7fe      	b.n	80005f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005f8:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 80005fc:	08003b78 	.word	0x08003b78
	ldr	r0, =_sdata
 8000600:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000604:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000608:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 800060c:	20001014 	.word	0x20001014

08000610 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC1_IRQHandler>
	...

08000614 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <HAL_Init+0x28>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a07      	ldr	r2, [pc, #28]	; (800063c <HAL_Init+0x28>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f92b 	bl	8000880 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	2000      	movs	r0, #0
 800062c:	f000 f808 	bl	8000640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000630:	f7ff ff12 	bl	8000458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40022000 	.word	0x40022000

08000640 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_InitTick+0x54>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_InitTick+0x58>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	fbb3 f3f1 	udiv	r3, r3, r1
 800065a:	fbb2 f3f3 	udiv	r3, r2, r3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f943 	bl	80008ea <HAL_SYSTICK_Config>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	e00e      	b.n	800068c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b0f      	cmp	r3, #15
 8000672:	d80a      	bhi.n	800068a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000674:	2200      	movs	r2, #0
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	f04f 30ff 	mov.w	r0, #4294967295
 800067c:	f000 f90b 	bl	8000896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000680:	4a06      	ldr	r2, [pc, #24]	; (800069c <HAL_InitTick+0x5c>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000686:	2300      	movs	r3, #0
 8000688:	e000      	b.n	800068c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000000 	.word	0x20000000
 8000698:	20000008 	.word	0x20000008
 800069c:	20000004 	.word	0x20000004

080006a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_IncTick+0x20>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_IncTick+0x24>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <HAL_IncTick+0x24>)
 80006b2:	6013      	str	r3, [r2, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20000008 	.word	0x20000008
 80006c4:	20001010 	.word	0x20001010

080006c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80006cc:	4b03      	ldr	r3, [pc, #12]	; (80006dc <HAL_GetTick+0x14>)
 80006ce:	681b      	ldr	r3, [r3, #0]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20001010 	.word	0x20001010

080006e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006fc:	4013      	ands	r3, r2
 80006fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800070c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000712:	4a04      	ldr	r2, [pc, #16]	; (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	60d3      	str	r3, [r2, #12]
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <__NVIC_GetPriorityGrouping+0x18>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	0a1b      	lsrs	r3, r3, #8
 8000732:	f003 0307 	and.w	r3, r3, #7
}
 8000736:	4618      	mov	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	2b00      	cmp	r3, #0
 8000754:	db0b      	blt.n	800076e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f003 021f 	and.w	r2, r3, #31
 800075c:	4907      	ldr	r1, [pc, #28]	; (800077c <__NVIC_EnableIRQ+0x38>)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	095b      	lsrs	r3, r3, #5
 8000764:	2001      	movs	r0, #1
 8000766:	fa00 f202 	lsl.w	r2, r0, r2
 800076a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000e100 	.word	0xe000e100

08000780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db0a      	blt.n	80007aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <__NVIC_SetPriority+0x4c>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	0112      	lsls	r2, r2, #4
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	440b      	add	r3, r1
 80007a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a8:	e00a      	b.n	80007c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <__NVIC_SetPriority+0x50>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	3b04      	subs	r3, #4
 80007b8:	0112      	lsls	r2, r2, #4
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	440b      	add	r3, r1
 80007be:	761a      	strb	r2, [r3, #24]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f1c3 0307 	rsb	r3, r3, #7
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	bf28      	it	cs
 80007f2:	2304      	movcs	r3, #4
 80007f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3304      	adds	r3, #4
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d902      	bls.n	8000804 <NVIC_EncodePriority+0x30>
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3b03      	subs	r3, #3
 8000802:	e000      	b.n	8000806 <NVIC_EncodePriority+0x32>
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	f04f 32ff 	mov.w	r2, #4294967295
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43da      	mvns	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	401a      	ands	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800081c:	f04f 31ff 	mov.w	r1, #4294967295
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	43d9      	mvns	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	4313      	orrs	r3, r2
         );
}
 800082e:	4618      	mov	r0, r3
 8000830:	3724      	adds	r7, #36	; 0x24
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800084c:	d301      	bcc.n	8000852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084e:	2301      	movs	r3, #1
 8000850:	e00f      	b.n	8000872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <SysTick_Config+0x40>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085a:	210f      	movs	r1, #15
 800085c:	f04f 30ff 	mov.w	r0, #4294967295
 8000860:	f7ff ff8e 	bl	8000780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <SysTick_Config+0x40>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <SysTick_Config+0x40>)
 800086c:	2207      	movs	r2, #7
 800086e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	e000e010 	.word	0xe000e010

08000880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ff29 	bl	80006e0 <__NVIC_SetPriorityGrouping>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b086      	sub	sp, #24
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a8:	f7ff ff3e 	bl	8000728 <__NVIC_GetPriorityGrouping>
 80008ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	6978      	ldr	r0, [r7, #20]
 80008b4:	f7ff ff8e 	bl	80007d4 <NVIC_EncodePriority>
 80008b8:	4602      	mov	r2, r0
 80008ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff5d 	bl	8000780 <__NVIC_SetPriority>
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff31 	bl	8000744 <__NVIC_EnableIRQ>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff ffa2 	bl	800083c <SysTick_Config>
 80008f8:	4603      	mov	r3, r0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000904:	b480      	push	{r7}
 8000906:	b087      	sub	sp, #28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000912:	e14e      	b.n	8000bb2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	2101      	movs	r1, #1
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	fa01 f303 	lsl.w	r3, r1, r3
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b00      	cmp	r3, #0
 8000928:	f000 8140 	beq.w	8000bac <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d00b      	beq.n	800094c <HAL_GPIO_Init+0x48>
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d007      	beq.n	800094c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000940:	2b11      	cmp	r3, #17
 8000942:	d003      	beq.n	800094c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	2b12      	cmp	r3, #18
 800094a:	d130      	bne.n	80009ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	2203      	movs	r2, #3
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68da      	ldr	r2, [r3, #12]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4313      	orrs	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000982:	2201      	movs	r2, #1
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	4013      	ands	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	091b      	lsrs	r3, r3, #4
 8000998:	f003 0201 	and.w	r2, r3, #1
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	2203      	movs	r2, #3
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4013      	ands	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d003      	beq.n	80009ee <HAL_GPIO_Init+0xea>
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	2b12      	cmp	r3, #18
 80009ec:	d123      	bne.n	8000a36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	08da      	lsrs	r2, r3, #3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3208      	adds	r2, #8
 80009f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	220f      	movs	r2, #15
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	691a      	ldr	r2, [r3, #16]
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	f003 0307 	and.w	r3, r3, #7
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	08da      	lsrs	r2, r3, #3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3208      	adds	r2, #8
 8000a30:	6939      	ldr	r1, [r7, #16]
 8000a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	2203      	movs	r2, #3
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f003 0203 	and.w	r2, r3, #3
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f000 809a 	beq.w	8000bac <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a78:	4b55      	ldr	r3, [pc, #340]	; (8000bd0 <HAL_GPIO_Init+0x2cc>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a54      	ldr	r2, [pc, #336]	; (8000bd0 <HAL_GPIO_Init+0x2cc>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b52      	ldr	r3, [pc, #328]	; (8000bd0 <HAL_GPIO_Init+0x2cc>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a90:	4a50      	ldr	r2, [pc, #320]	; (8000bd4 <HAL_GPIO_Init+0x2d0>)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	089b      	lsrs	r3, r3, #2
 8000a96:	3302      	adds	r3, #2
 8000a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f003 0303 	and.w	r3, r3, #3
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	220f      	movs	r2, #15
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000aba:	d013      	beq.n	8000ae4 <HAL_GPIO_Init+0x1e0>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a46      	ldr	r2, [pc, #280]	; (8000bd8 <HAL_GPIO_Init+0x2d4>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d00d      	beq.n	8000ae0 <HAL_GPIO_Init+0x1dc>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a45      	ldr	r2, [pc, #276]	; (8000bdc <HAL_GPIO_Init+0x2d8>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d007      	beq.n	8000adc <HAL_GPIO_Init+0x1d8>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a44      	ldr	r2, [pc, #272]	; (8000be0 <HAL_GPIO_Init+0x2dc>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d101      	bne.n	8000ad8 <HAL_GPIO_Init+0x1d4>
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	e006      	b.n	8000ae6 <HAL_GPIO_Init+0x1e2>
 8000ad8:	2305      	movs	r3, #5
 8000ada:	e004      	b.n	8000ae6 <HAL_GPIO_Init+0x1e2>
 8000adc:	2302      	movs	r3, #2
 8000ade:	e002      	b.n	8000ae6 <HAL_GPIO_Init+0x1e2>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e000      	b.n	8000ae6 <HAL_GPIO_Init+0x1e2>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	697a      	ldr	r2, [r7, #20]
 8000ae8:	f002 0203 	and.w	r2, r2, #3
 8000aec:	0092      	lsls	r2, r2, #2
 8000aee:	4093      	lsls	r3, r2
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000af6:	4937      	ldr	r1, [pc, #220]	; (8000bd4 <HAL_GPIO_Init+0x2d0>)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	089b      	lsrs	r3, r3, #2
 8000afc:	3302      	adds	r3, #2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b04:	4b37      	ldr	r3, [pc, #220]	; (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b28:	4a2e      	ldr	r2, [pc, #184]	; (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b2e:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b52:	4a24      	ldr	r2, [pc, #144]	; (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b7c:	4a19      	ldr	r2, [pc, #100]	; (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	; (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f47f aea9 	bne.w	8000914 <HAL_GPIO_Init+0x10>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	371c      	adds	r7, #28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010000 	.word	0x40010000
 8000bd8:	48000400 	.word	0x48000400
 8000bdc:	48000800 	.word	0x48000800
 8000be0:	48000c00 	.word	0x48000c00
 8000be4:	40010400 	.word	0x40010400

08000be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	807b      	strh	r3, [r7, #2]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bf8:	787b      	ldrb	r3, [r7, #1]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d003      	beq.n	8000c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bfe:	887a      	ldrh	r2, [r7, #2]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c04:	e002      	b.n	8000c0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c06:	887a      	ldrh	r2, [r7, #2]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	f000 bef4 	b.w	8001a1a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f000 816a 	beq.w	8000f16 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c42:	4bb3      	ldr	r3, [pc, #716]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 030c 	and.w	r3, r3, #12
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	d00c      	beq.n	8000c68 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c4e:	4bb0      	ldr	r3, [pc, #704]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 030c 	and.w	r3, r3, #12
 8000c56:	2b08      	cmp	r3, #8
 8000c58:	d159      	bne.n	8000d0e <HAL_RCC_OscConfig+0xf6>
 8000c5a:	4bad      	ldr	r3, [pc, #692]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c66:	d152      	bne.n	8000d0e <HAL_RCC_OscConfig+0xf6>
 8000c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c6c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c70:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000c74:	fa93 f3a3 	rbit	r3, r3
 8000c78:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c7c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c80:	fab3 f383 	clz	r3, r3
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	095b      	lsrs	r3, r3, #5
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d102      	bne.n	8000c9a <HAL_RCC_OscConfig+0x82>
 8000c94:	4b9e      	ldr	r3, [pc, #632]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	e015      	b.n	8000cc6 <HAL_RCC_OscConfig+0xae>
 8000c9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c9e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000ca6:	fa93 f3a3 	rbit	r3, r3
 8000caa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000cae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000cb6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000cba:	fa93 f3a3 	rbit	r3, r3
 8000cbe:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000cc2:	4b93      	ldr	r3, [pc, #588]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cca:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000cce:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000cd2:	fa92 f2a2 	rbit	r2, r2
 8000cd6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000cda:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	f042 0220 	orr.w	r2, r2, #32
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	f002 021f 	and.w	r2, r2, #31
 8000cee:	2101      	movs	r1, #1
 8000cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 810c 	beq.w	8000f14 <HAL_RCC_OscConfig+0x2fc>
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8106 	bne.w	8000f14 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	f000 be86 	b.w	8001a1a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d18:	d106      	bne.n	8000d28 <HAL_RCC_OscConfig+0x110>
 8000d1a:	4b7d      	ldr	r3, [pc, #500]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a7c      	ldr	r2, [pc, #496]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d24:	6013      	str	r3, [r2, #0]
 8000d26:	e030      	b.n	8000d8a <HAL_RCC_OscConfig+0x172>
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d10c      	bne.n	8000d4c <HAL_RCC_OscConfig+0x134>
 8000d32:	4b77      	ldr	r3, [pc, #476]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a76      	ldr	r2, [pc, #472]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	4b74      	ldr	r3, [pc, #464]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a73      	ldr	r2, [pc, #460]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	e01e      	b.n	8000d8a <HAL_RCC_OscConfig+0x172>
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d56:	d10c      	bne.n	8000d72 <HAL_RCC_OscConfig+0x15a>
 8000d58:	4b6d      	ldr	r3, [pc, #436]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a6c      	ldr	r2, [pc, #432]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000d5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	4b6a      	ldr	r3, [pc, #424]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a69      	ldr	r2, [pc, #420]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	e00b      	b.n	8000d8a <HAL_RCC_OscConfig+0x172>
 8000d72:	4b67      	ldr	r3, [pc, #412]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a66      	ldr	r2, [pc, #408]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	4b64      	ldr	r3, [pc, #400]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a63      	ldr	r2, [pc, #396]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000d84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d88:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d8a:	4b61      	ldr	r3, [pc, #388]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8e:	f023 020f 	bic.w	r2, r3, #15
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	495d      	ldr	r1, [pc, #372]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d059      	beq.n	8000e5c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da8:	f7ff fc8e 	bl	80006c8 <HAL_GetTick>
 8000dac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db0:	e00a      	b.n	8000dc8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000db2:	f7ff fc89 	bl	80006c8 <HAL_GetTick>
 8000db6:	4602      	mov	r2, r0
 8000db8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b64      	cmp	r3, #100	; 0x64
 8000dc0:	d902      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	f000 be29 	b.w	8001a1a <HAL_RCC_OscConfig+0xe02>
 8000dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dcc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000dd4:	fa93 f3a3 	rbit	r3, r3
 8000dd8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000ddc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de0:	fab3 f383 	clz	r3, r3
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d102      	bne.n	8000dfa <HAL_RCC_OscConfig+0x1e2>
 8000df4:	4b46      	ldr	r3, [pc, #280]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	e015      	b.n	8000e26 <HAL_RCC_OscConfig+0x20e>
 8000dfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dfe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e02:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000e06:	fa93 f3a3 	rbit	r3, r3
 8000e0a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e12:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e16:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000e1a:	fa93 f3a3 	rbit	r3, r3
 8000e1e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000e22:	4b3b      	ldr	r3, [pc, #236]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e2a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000e2e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e32:	fa92 f2a2 	rbit	r2, r2
 8000e36:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000e3a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000e3e:	fab2 f282 	clz	r2, r2
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	f042 0220 	orr.w	r2, r2, #32
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	f002 021f 	and.w	r2, r2, #31
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fa01 f202 	lsl.w	r2, r1, r2
 8000e54:	4013      	ands	r3, r2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0ab      	beq.n	8000db2 <HAL_RCC_OscConfig+0x19a>
 8000e5a:	e05c      	b.n	8000f16 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fc34 	bl	80006c8 <HAL_GetTick>
 8000e60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e64:	e00a      	b.n	8000e7c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e66:	f7ff fc2f 	bl	80006c8 <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b64      	cmp	r3, #100	; 0x64
 8000e74:	d902      	bls.n	8000e7c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	f000 bdcf 	b.w	8001a1a <HAL_RCC_OscConfig+0xe02>
 8000e7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e80:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e84:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000e88:	fa93 f3a3 	rbit	r3, r3
 8000e8c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000e90:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e94:	fab3 f383 	clz	r3, r3
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	095b      	lsrs	r3, r3, #5
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d102      	bne.n	8000eae <HAL_RCC_OscConfig+0x296>
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	e015      	b.n	8000eda <HAL_RCC_OscConfig+0x2c2>
 8000eae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eb2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000eba:	fa93 f3a3 	rbit	r3, r3
 8000ebe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000ec2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000eca:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000ece:	fa93 f3a3 	rbit	r3, r3
 8000ed2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_RCC_OscConfig+0x2f8>)
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ede:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000ee2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000ee6:	fa92 f2a2 	rbit	r2, r2
 8000eea:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000eee:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000ef2:	fab2 f282 	clz	r2, r2
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	f042 0220 	orr.w	r2, r2, #32
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	f002 021f 	and.w	r2, r2, #31
 8000f02:	2101      	movs	r1, #1
 8000f04:	fa01 f202 	lsl.w	r2, r1, r2
 8000f08:	4013      	ands	r3, r2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1ab      	bne.n	8000e66 <HAL_RCC_OscConfig+0x24e>
 8000f0e:	e002      	b.n	8000f16 <HAL_RCC_OscConfig+0x2fe>
 8000f10:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 816f 	beq.w	8001204 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f26:	4bd0      	ldr	r3, [pc, #832]	; (8001268 <HAL_RCC_OscConfig+0x650>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 030c 	and.w	r3, r3, #12
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00b      	beq.n	8000f4a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f32:	4bcd      	ldr	r3, [pc, #820]	; (8001268 <HAL_RCC_OscConfig+0x650>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 030c 	and.w	r3, r3, #12
 8000f3a:	2b08      	cmp	r3, #8
 8000f3c:	d16c      	bne.n	8001018 <HAL_RCC_OscConfig+0x400>
 8000f3e:	4bca      	ldr	r3, [pc, #808]	; (8001268 <HAL_RCC_OscConfig+0x650>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d166      	bne.n	8001018 <HAL_RCC_OscConfig+0x400>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f50:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000f54:	fa93 f3a3 	rbit	r3, r3
 8000f58:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000f5c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f60:	fab3 f383 	clz	r3, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d102      	bne.n	8000f7a <HAL_RCC_OscConfig+0x362>
 8000f74:	4bbc      	ldr	r3, [pc, #752]	; (8001268 <HAL_RCC_OscConfig+0x650>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	e013      	b.n	8000fa2 <HAL_RCC_OscConfig+0x38a>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f80:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000f84:	fa93 f3a3 	rbit	r3, r3
 8000f88:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000f92:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000f96:	fa93 f3a3 	rbit	r3, r3
 8000f9a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000f9e:	4bb2      	ldr	r3, [pc, #712]	; (8001268 <HAL_RCC_OscConfig+0x650>)
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000fa8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000fac:	fa92 f2a2 	rbit	r2, r2
 8000fb0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000fb4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000fb8:	fab2 f282 	clz	r2, r2
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	f042 0220 	orr.w	r2, r2, #32
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	f002 021f 	and.w	r2, r2, #31
 8000fc8:	2101      	movs	r1, #1
 8000fca:	fa01 f202 	lsl.w	r2, r1, r2
 8000fce:	4013      	ands	r3, r2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d007      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x3cc>
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d002      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	f000 bd1b 	b.w	8001a1a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe4:	4ba0      	ldr	r3, [pc, #640]	; (8001268 <HAL_RCC_OscConfig+0x650>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	21f8      	movs	r1, #248	; 0xf8
 8000ff4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000ffc:	fa91 f1a1 	rbit	r1, r1
 8001000:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001004:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001008:	fab1 f181 	clz	r1, r1
 800100c:	b2c9      	uxtb	r1, r1
 800100e:	408b      	lsls	r3, r1
 8001010:	4995      	ldr	r1, [pc, #596]	; (8001268 <HAL_RCC_OscConfig+0x650>)
 8001012:	4313      	orrs	r3, r2
 8001014:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001016:	e0f5      	b.n	8001204 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 8085 	beq.w	800112e <HAL_RCC_OscConfig+0x516>
 8001024:	2301      	movs	r3, #1
 8001026:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800102e:	fa93 f3a3 	rbit	r3, r3
 8001032:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001036:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800103a:	fab3 f383 	clz	r3, r3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001044:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	461a      	mov	r2, r3
 800104c:	2301      	movs	r3, #1
 800104e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fb3a 	bl	80006c8 <HAL_GetTick>
 8001054:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001058:	e00a      	b.n	8001070 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800105a:	f7ff fb35 	bl	80006c8 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d902      	bls.n	8001070 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	f000 bcd5 	b.w	8001a1a <HAL_RCC_OscConfig+0xe02>
 8001070:	2302      	movs	r3, #2
 8001072:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800107a:	fa93 f3a3 	rbit	r3, r3
 800107e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001082:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001086:	fab3 f383 	clz	r3, r3
 800108a:	b2db      	uxtb	r3, r3
 800108c:	095b      	lsrs	r3, r3, #5
 800108e:	b2db      	uxtb	r3, r3
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b01      	cmp	r3, #1
 8001098:	d102      	bne.n	80010a0 <HAL_RCC_OscConfig+0x488>
 800109a:	4b73      	ldr	r3, [pc, #460]	; (8001268 <HAL_RCC_OscConfig+0x650>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	e013      	b.n	80010c8 <HAL_RCC_OscConfig+0x4b0>
 80010a0:	2302      	movs	r3, #2
 80010a2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80010aa:	fa93 f3a3 	rbit	r3, r3
 80010ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80010b2:	2302      	movs	r3, #2
 80010b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80010b8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80010bc:	fa93 f3a3 	rbit	r3, r3
 80010c0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80010c4:	4b68      	ldr	r3, [pc, #416]	; (8001268 <HAL_RCC_OscConfig+0x650>)
 80010c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c8:	2202      	movs	r2, #2
 80010ca:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80010ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80010d2:	fa92 f2a2 	rbit	r2, r2
 80010d6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80010da:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80010de:	fab2 f282 	clz	r2, r2
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	f042 0220 	orr.w	r2, r2, #32
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	f002 021f 	and.w	r2, r2, #31
 80010ee:	2101      	movs	r1, #1
 80010f0:	fa01 f202 	lsl.w	r2, r1, r2
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0af      	beq.n	800105a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fa:	4b5b      	ldr	r3, [pc, #364]	; (8001268 <HAL_RCC_OscConfig+0x650>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	21f8      	movs	r1, #248	; 0xf8
 800110a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001112:	fa91 f1a1 	rbit	r1, r1
 8001116:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800111a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800111e:	fab1 f181 	clz	r1, r1
 8001122:	b2c9      	uxtb	r1, r1
 8001124:	408b      	lsls	r3, r1
 8001126:	4950      	ldr	r1, [pc, #320]	; (8001268 <HAL_RCC_OscConfig+0x650>)
 8001128:	4313      	orrs	r3, r2
 800112a:	600b      	str	r3, [r1, #0]
 800112c:	e06a      	b.n	8001204 <HAL_RCC_OscConfig+0x5ec>
 800112e:	2301      	movs	r3, #1
 8001130:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001134:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001138:	fa93 f3a3 	rbit	r3, r3
 800113c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001140:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001144:	fab3 f383 	clz	r3, r3
 8001148:	b2db      	uxtb	r3, r3
 800114a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800114e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	461a      	mov	r2, r3
 8001156:	2300      	movs	r3, #0
 8001158:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115a:	f7ff fab5 	bl	80006c8 <HAL_GetTick>
 800115e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001162:	e00a      	b.n	800117a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001164:	f7ff fab0 	bl	80006c8 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d902      	bls.n	800117a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	f000 bc50 	b.w	8001a1a <HAL_RCC_OscConfig+0xe02>
 800117a:	2302      	movs	r3, #2
 800117c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001184:	fa93 f3a3 	rbit	r3, r3
 8001188:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800118c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001190:	fab3 f383 	clz	r3, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	b2db      	uxtb	r3, r3
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d102      	bne.n	80011aa <HAL_RCC_OscConfig+0x592>
 80011a4:	4b30      	ldr	r3, [pc, #192]	; (8001268 <HAL_RCC_OscConfig+0x650>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	e013      	b.n	80011d2 <HAL_RCC_OscConfig+0x5ba>
 80011aa:	2302      	movs	r3, #2
 80011ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80011b4:	fa93 f3a3 	rbit	r3, r3
 80011b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80011bc:	2302      	movs	r3, #2
 80011be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80011c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80011c6:	fa93 f3a3 	rbit	r3, r3
 80011ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <HAL_RCC_OscConfig+0x650>)
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	2202      	movs	r2, #2
 80011d4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80011d8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80011dc:	fa92 f2a2 	rbit	r2, r2
 80011e0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80011e4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80011e8:	fab2 f282 	clz	r2, r2
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	f042 0220 	orr.w	r2, r2, #32
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	f002 021f 	and.w	r2, r2, #31
 80011f8:	2101      	movs	r1, #1
 80011fa:	fa01 f202 	lsl.w	r2, r1, r2
 80011fe:	4013      	ands	r3, r2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1af      	bne.n	8001164 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 80da 	beq.w	80013c8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d069      	beq.n	80012f2 <HAL_RCC_OscConfig+0x6da>
 800121e:	2301      	movs	r3, #1
 8001220:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001224:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001228:	fa93 f3a3 	rbit	r3, r3
 800122c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001234:	fab3 f383 	clz	r3, r3
 8001238:	b2db      	uxtb	r3, r3
 800123a:	461a      	mov	r2, r3
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_RCC_OscConfig+0x654>)
 800123e:	4413      	add	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	461a      	mov	r2, r3
 8001244:	2301      	movs	r3, #1
 8001246:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001248:	f7ff fa3e 	bl	80006c8 <HAL_GetTick>
 800124c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001250:	e00e      	b.n	8001270 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001252:	f7ff fa39 	bl	80006c8 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d906      	bls.n	8001270 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e3d9      	b.n	8001a1a <HAL_RCC_OscConfig+0xe02>
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000
 800126c:	10908120 	.word	0x10908120
 8001270:	2302      	movs	r3, #2
 8001272:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001276:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001282:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001286:	2202      	movs	r2, #2
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	fa93 f2a3 	rbit	r2, r3
 8001294:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800129e:	2202      	movs	r2, #2
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	fa93 f2a3 	rbit	r2, r3
 80012ac:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80012b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b2:	4ba5      	ldr	r3, [pc, #660]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 80012b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012b6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80012ba:	2102      	movs	r1, #2
 80012bc:	6019      	str	r1, [r3, #0]
 80012be:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	fa93 f1a3 	rbit	r1, r3
 80012c8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012cc:	6019      	str	r1, [r3, #0]
  return result;
 80012ce:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	fab3 f383 	clz	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f003 031f 	and.w	r3, r3, #31
 80012e4:	2101      	movs	r1, #1
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0b0      	beq.n	8001252 <HAL_RCC_OscConfig+0x63a>
 80012f0:	e06a      	b.n	80013c8 <HAL_RCC_OscConfig+0x7b0>
 80012f2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	fa93 f2a3 	rbit	r2, r3
 8001304:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001308:	601a      	str	r2, [r3, #0]
  return result;
 800130a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800130e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001310:	fab3 f383 	clz	r3, r3
 8001314:	b2db      	uxtb	r3, r3
 8001316:	461a      	mov	r2, r3
 8001318:	4b8c      	ldr	r3, [pc, #560]	; (800154c <HAL_RCC_OscConfig+0x934>)
 800131a:	4413      	add	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	461a      	mov	r2, r3
 8001320:	2300      	movs	r3, #0
 8001322:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001324:	f7ff f9d0 	bl	80006c8 <HAL_GetTick>
 8001328:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800132c:	e009      	b.n	8001342 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800132e:	f7ff f9cb 	bl	80006c8 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e36b      	b.n	8001a1a <HAL_RCC_OscConfig+0xe02>
 8001342:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001346:	2202      	movs	r2, #2
 8001348:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	fa93 f2a3 	rbit	r2, r3
 8001354:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800135e:	2202      	movs	r2, #2
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	fa93 f2a3 	rbit	r2, r3
 800136c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001376:	2202      	movs	r2, #2
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	fa93 f2a3 	rbit	r2, r3
 8001384:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001388:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138a:	4b6f      	ldr	r3, [pc, #444]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 800138c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800138e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001392:	2102      	movs	r1, #2
 8001394:	6019      	str	r1, [r3, #0]
 8001396:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	fa93 f1a3 	rbit	r1, r3
 80013a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013a4:	6019      	str	r1, [r3, #0]
  return result;
 80013a6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	fab3 f383 	clz	r3, r3
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	f003 031f 	and.w	r3, r3, #31
 80013bc:	2101      	movs	r1, #1
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1b2      	bne.n	800132e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 8158 	beq.w	8001688 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013de:	4b5a      	ldr	r3, [pc, #360]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d112      	bne.n	8001410 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	4b57      	ldr	r3, [pc, #348]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4a56      	ldr	r2, [pc, #344]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	61d3      	str	r3, [r2, #28]
 80013f6:	4b54      	ldr	r3, [pc, #336]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800140a:	2301      	movs	r3, #1
 800140c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001410:	4b4f      	ldr	r3, [pc, #316]	; (8001550 <HAL_RCC_OscConfig+0x938>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001418:	2b00      	cmp	r3, #0
 800141a:	d11a      	bne.n	8001452 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800141c:	4b4c      	ldr	r3, [pc, #304]	; (8001550 <HAL_RCC_OscConfig+0x938>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a4b      	ldr	r2, [pc, #300]	; (8001550 <HAL_RCC_OscConfig+0x938>)
 8001422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001426:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001428:	f7ff f94e 	bl	80006c8 <HAL_GetTick>
 800142c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001430:	e009      	b.n	8001446 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001432:	f7ff f949 	bl	80006c8 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e2e9      	b.n	8001a1a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001446:	4b42      	ldr	r3, [pc, #264]	; (8001550 <HAL_RCC_OscConfig+0x938>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0ef      	beq.n	8001432 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d106      	bne.n	800146a <HAL_RCC_OscConfig+0x852>
 800145c:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	4a39      	ldr	r2, [pc, #228]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6213      	str	r3, [r2, #32]
 8001468:	e02f      	b.n	80014ca <HAL_RCC_OscConfig+0x8b2>
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10c      	bne.n	800148e <HAL_RCC_OscConfig+0x876>
 8001474:	4b34      	ldr	r3, [pc, #208]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a33      	ldr	r2, [pc, #204]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 800147a:	f023 0301 	bic.w	r3, r3, #1
 800147e:	6213      	str	r3, [r2, #32]
 8001480:	4b31      	ldr	r3, [pc, #196]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	4a30      	ldr	r2, [pc, #192]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 8001486:	f023 0304 	bic.w	r3, r3, #4
 800148a:	6213      	str	r3, [r2, #32]
 800148c:	e01d      	b.n	80014ca <HAL_RCC_OscConfig+0x8b2>
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b05      	cmp	r3, #5
 8001496:	d10c      	bne.n	80014b2 <HAL_RCC_OscConfig+0x89a>
 8001498:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	4a2a      	ldr	r2, [pc, #168]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 800149e:	f043 0304 	orr.w	r3, r3, #4
 80014a2:	6213      	str	r3, [r2, #32]
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	4a27      	ldr	r2, [pc, #156]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6213      	str	r3, [r2, #32]
 80014b0:	e00b      	b.n	80014ca <HAL_RCC_OscConfig+0x8b2>
 80014b2:	4b25      	ldr	r3, [pc, #148]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	4a24      	ldr	r2, [pc, #144]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 80014b8:	f023 0301 	bic.w	r3, r3, #1
 80014bc:	6213      	str	r3, [r2, #32]
 80014be:	4b22      	ldr	r3, [pc, #136]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	4a21      	ldr	r2, [pc, #132]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 80014c4:	f023 0304 	bic.w	r3, r3, #4
 80014c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d06b      	beq.n	80015ac <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d4:	f7ff f8f8 	bl	80006c8 <HAL_GetTick>
 80014d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014dc:	e00b      	b.n	80014f6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014de:	f7ff f8f3 	bl	80006c8 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e291      	b.n	8001a1a <HAL_RCC_OscConfig+0xe02>
 80014f6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014fa:	2202      	movs	r2, #2
 80014fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	fa93 f2a3 	rbit	r2, r3
 8001508:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001512:	2202      	movs	r2, #2
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	fa93 f2a3 	rbit	r2, r3
 8001520:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001524:	601a      	str	r2, [r3, #0]
  return result;
 8001526:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800152a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f043 0302 	orr.w	r3, r3, #2
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d109      	bne.n	8001554 <HAL_RCC_OscConfig+0x93c>
 8001540:	4b01      	ldr	r3, [pc, #4]	; (8001548 <HAL_RCC_OscConfig+0x930>)
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	e014      	b.n	8001570 <HAL_RCC_OscConfig+0x958>
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000
 800154c:	10908120 	.word	0x10908120
 8001550:	40007000 	.word	0x40007000
 8001554:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001558:	2202      	movs	r2, #2
 800155a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	fa93 f2a3 	rbit	r2, r3
 8001566:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	4bbb      	ldr	r3, [pc, #748]	; (800185c <HAL_RCC_OscConfig+0xc44>)
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001574:	2102      	movs	r1, #2
 8001576:	6011      	str	r1, [r2, #0]
 8001578:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	fa92 f1a2 	rbit	r1, r2
 8001582:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001586:	6011      	str	r1, [r2, #0]
  return result;
 8001588:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	fab2 f282 	clz	r2, r2
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	f002 021f 	and.w	r2, r2, #31
 800159e:	2101      	movs	r1, #1
 80015a0:	fa01 f202 	lsl.w	r2, r1, r2
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d099      	beq.n	80014de <HAL_RCC_OscConfig+0x8c6>
 80015aa:	e063      	b.n	8001674 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ac:	f7ff f88c 	bl	80006c8 <HAL_GetTick>
 80015b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b4:	e00b      	b.n	80015ce <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b6:	f7ff f887 	bl	80006c8 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e225      	b.n	8001a1a <HAL_RCC_OscConfig+0xe02>
 80015ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015d2:	2202      	movs	r2, #2
 80015d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	fa93 f2a3 	rbit	r2, r3
 80015e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015ea:	2202      	movs	r2, #2
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	fa93 f2a3 	rbit	r2, r3
 80015f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015fc:	601a      	str	r2, [r3, #0]
  return result;
 80015fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001602:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001604:	fab3 f383 	clz	r3, r3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	b2db      	uxtb	r3, r3
 800160e:	f043 0302 	orr.w	r3, r3, #2
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d102      	bne.n	800161e <HAL_RCC_OscConfig+0xa06>
 8001618:	4b90      	ldr	r3, [pc, #576]	; (800185c <HAL_RCC_OscConfig+0xc44>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	e00d      	b.n	800163a <HAL_RCC_OscConfig+0xa22>
 800161e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001622:	2202      	movs	r2, #2
 8001624:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001626:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	fa93 f2a3 	rbit	r2, r3
 8001630:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	4b89      	ldr	r3, [pc, #548]	; (800185c <HAL_RCC_OscConfig+0xc44>)
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800163e:	2102      	movs	r1, #2
 8001640:	6011      	str	r1, [r2, #0]
 8001642:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	fa92 f1a2 	rbit	r1, r2
 800164c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001650:	6011      	str	r1, [r2, #0]
  return result;
 8001652:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	fab2 f282 	clz	r2, r2
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	f002 021f 	and.w	r2, r2, #31
 8001668:	2101      	movs	r1, #1
 800166a:	fa01 f202 	lsl.w	r2, r1, r2
 800166e:	4013      	ands	r3, r2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1a0      	bne.n	80015b6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001674:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001678:	2b01      	cmp	r3, #1
 800167a:	d105      	bne.n	8001688 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800167c:	4b77      	ldr	r3, [pc, #476]	; (800185c <HAL_RCC_OscConfig+0xc44>)
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	4a76      	ldr	r2, [pc, #472]	; (800185c <HAL_RCC_OscConfig+0xc44>)
 8001682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001686:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 81c2 	beq.w	8001a18 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001694:	4b71      	ldr	r3, [pc, #452]	; (800185c <HAL_RCC_OscConfig+0xc44>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	2b08      	cmp	r3, #8
 800169e:	f000 819c 	beq.w	80019da <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	f040 8114 	bne.w	80018d6 <HAL_RCC_OscConfig+0xcbe>
 80016ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	fa93 f2a3 	rbit	r2, r3
 80016c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016c6:	601a      	str	r2, [r3, #0]
  return result;
 80016c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016cc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ce:	fab3 f383 	clz	r3, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	461a      	mov	r2, r3
 80016e0:	2300      	movs	r3, #0
 80016e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7fe fff0 	bl	80006c8 <HAL_GetTick>
 80016e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ec:	e009      	b.n	8001702 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ee:	f7fe ffeb 	bl	80006c8 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e18b      	b.n	8001a1a <HAL_RCC_OscConfig+0xe02>
 8001702:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001706:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800170a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	fa93 f2a3 	rbit	r2, r3
 8001716:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800171a:	601a      	str	r2, [r3, #0]
  return result;
 800171c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001720:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001722:	fab3 f383 	clz	r3, r3
 8001726:	b2db      	uxtb	r3, r3
 8001728:	095b      	lsrs	r3, r3, #5
 800172a:	b2db      	uxtb	r3, r3
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b01      	cmp	r3, #1
 8001734:	d102      	bne.n	800173c <HAL_RCC_OscConfig+0xb24>
 8001736:	4b49      	ldr	r3, [pc, #292]	; (800185c <HAL_RCC_OscConfig+0xc44>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	e01b      	b.n	8001774 <HAL_RCC_OscConfig+0xb5c>
 800173c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001740:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001744:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001746:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	fa93 f2a3 	rbit	r2, r3
 8001750:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800175a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	fa93 f2a3 	rbit	r2, r3
 800176a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	4b3a      	ldr	r3, [pc, #232]	; (800185c <HAL_RCC_OscConfig+0xc44>)
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001778:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800177c:	6011      	str	r1, [r2, #0]
 800177e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	fa92 f1a2 	rbit	r1, r2
 8001788:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800178c:	6011      	str	r1, [r2, #0]
  return result;
 800178e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	fab2 f282 	clz	r2, r2
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	f042 0220 	orr.w	r2, r2, #32
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	f002 021f 	and.w	r2, r2, #31
 80017a4:	2101      	movs	r1, #1
 80017a6:	fa01 f202 	lsl.w	r2, r1, r2
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d19e      	bne.n	80016ee <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b0:	4b2a      	ldr	r3, [pc, #168]	; (800185c <HAL_RCC_OscConfig+0xc44>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	430b      	orrs	r3, r1
 80017c6:	4925      	ldr	r1, [pc, #148]	; (800185c <HAL_RCC_OscConfig+0xc44>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
 80017cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	fa93 f2a3 	rbit	r2, r3
 80017e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017e4:	601a      	str	r2, [r3, #0]
  return result;
 80017e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017ea:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ec:	fab3 f383 	clz	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	461a      	mov	r2, r3
 80017fe:	2301      	movs	r3, #1
 8001800:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7fe ff61 	bl	80006c8 <HAL_GetTick>
 8001806:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800180a:	e009      	b.n	8001820 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180c:	f7fe ff5c 	bl	80006c8 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e0fc      	b.n	8001a1a <HAL_RCC_OscConfig+0xe02>
 8001820:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001824:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	fa93 f2a3 	rbit	r2, r3
 8001834:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001838:	601a      	str	r2, [r3, #0]
  return result;
 800183a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800183e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001840:	fab3 f383 	clz	r3, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	b2db      	uxtb	r3, r3
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b01      	cmp	r3, #1
 8001852:	d105      	bne.n	8001860 <HAL_RCC_OscConfig+0xc48>
 8001854:	4b01      	ldr	r3, [pc, #4]	; (800185c <HAL_RCC_OscConfig+0xc44>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	e01e      	b.n	8001898 <HAL_RCC_OscConfig+0xc80>
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000
 8001860:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001864:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001868:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	fa93 f2a3 	rbit	r2, r3
 8001874:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800187e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	fa93 f2a3 	rbit	r2, r3
 800188e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <HAL_RCC_OscConfig+0xe0c>)
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800189c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018a0:	6011      	str	r1, [r2, #0]
 80018a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	fa92 f1a2 	rbit	r1, r2
 80018ac:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80018b0:	6011      	str	r1, [r2, #0]
  return result;
 80018b2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	fab2 f282 	clz	r2, r2
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	f042 0220 	orr.w	r2, r2, #32
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	f002 021f 	and.w	r2, r2, #31
 80018c8:	2101      	movs	r1, #1
 80018ca:	fa01 f202 	lsl.w	r2, r1, r2
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d09b      	beq.n	800180c <HAL_RCC_OscConfig+0xbf4>
 80018d4:	e0a0      	b.n	8001a18 <HAL_RCC_OscConfig+0xe00>
 80018d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	fa93 f2a3 	rbit	r2, r3
 80018ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ee:	601a      	str	r2, [r3, #0]
  return result;
 80018f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001900:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	461a      	mov	r2, r3
 8001908:	2300      	movs	r3, #0
 800190a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7fe fedc 	bl	80006c8 <HAL_GetTick>
 8001910:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001914:	e009      	b.n	800192a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001916:	f7fe fed7 	bl	80006c8 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e077      	b.n	8001a1a <HAL_RCC_OscConfig+0xe02>
 800192a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800192e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001932:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001934:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	fa93 f2a3 	rbit	r2, r3
 800193e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001942:	601a      	str	r2, [r3, #0]
  return result;
 8001944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001948:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194a:	fab3 f383 	clz	r3, r3
 800194e:	b2db      	uxtb	r3, r3
 8001950:	095b      	lsrs	r3, r3, #5
 8001952:	b2db      	uxtb	r3, r3
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d102      	bne.n	8001964 <HAL_RCC_OscConfig+0xd4c>
 800195e:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <HAL_RCC_OscConfig+0xe0c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	e01b      	b.n	800199c <HAL_RCC_OscConfig+0xd84>
 8001964:	f107 0320 	add.w	r3, r7, #32
 8001968:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800196c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	fa93 f2a3 	rbit	r2, r3
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	f107 0318 	add.w	r3, r7, #24
 8001982:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	f107 0318 	add.w	r3, r7, #24
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	fa93 f2a3 	rbit	r2, r3
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <HAL_RCC_OscConfig+0xe0c>)
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	f107 0210 	add.w	r2, r7, #16
 80019a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019a4:	6011      	str	r1, [r2, #0]
 80019a6:	f107 0210 	add.w	r2, r7, #16
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	fa92 f1a2 	rbit	r1, r2
 80019b0:	f107 020c 	add.w	r2, r7, #12
 80019b4:	6011      	str	r1, [r2, #0]
  return result;
 80019b6:	f107 020c 	add.w	r2, r7, #12
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	fab2 f282 	clz	r2, r2
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	f042 0220 	orr.w	r2, r2, #32
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	f002 021f 	and.w	r2, r2, #31
 80019cc:	2101      	movs	r1, #1
 80019ce:	fa01 f202 	lsl.w	r2, r1, r2
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d19e      	bne.n	8001916 <HAL_RCC_OscConfig+0xcfe>
 80019d8:	e01e      	b.n	8001a18 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e018      	b.n	8001a1a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019e8:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <HAL_RCC_OscConfig+0xe0c>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80019f0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80019f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d108      	bne.n	8001a14 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001a02:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000

08001a28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b09e      	sub	sp, #120	; 0x78
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e162      	b.n	8001d06 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a40:	4b90      	ldr	r3, [pc, #576]	; (8001c84 <HAL_RCC_ClockConfig+0x25c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d910      	bls.n	8001a70 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b8d      	ldr	r3, [pc, #564]	; (8001c84 <HAL_RCC_ClockConfig+0x25c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 0207 	bic.w	r2, r3, #7
 8001a56:	498b      	ldr	r1, [pc, #556]	; (8001c84 <HAL_RCC_ClockConfig+0x25c>)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5e:	4b89      	ldr	r3, [pc, #548]	; (8001c84 <HAL_RCC_ClockConfig+0x25c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e14a      	b.n	8001d06 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a7c:	4b82      	ldr	r3, [pc, #520]	; (8001c88 <HAL_RCC_ClockConfig+0x260>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	497f      	ldr	r1, [pc, #508]	; (8001c88 <HAL_RCC_ClockConfig+0x260>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 80dc 	beq.w	8001c54 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d13c      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xf6>
 8001aa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d102      	bne.n	8001ace <HAL_RCC_ClockConfig+0xa6>
 8001ac8:	4b6f      	ldr	r3, [pc, #444]	; (8001c88 <HAL_RCC_ClockConfig+0x260>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	e00f      	b.n	8001aee <HAL_RCC_ClockConfig+0xc6>
 8001ace:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ad2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ad6:	fa93 f3a3 	rbit	r3, r3
 8001ada:	667b      	str	r3, [r7, #100]	; 0x64
 8001adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae0:	663b      	str	r3, [r7, #96]	; 0x60
 8001ae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ae4:	fa93 f3a3 	rbit	r3, r3
 8001ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001aea:	4b67      	ldr	r3, [pc, #412]	; (8001c88 <HAL_RCC_ClockConfig+0x260>)
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001af2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001af4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001af6:	fa92 f2a2 	rbit	r2, r2
 8001afa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001afc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001afe:	fab2 f282 	clz	r2, r2
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	f042 0220 	orr.w	r2, r2, #32
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	f002 021f 	and.w	r2, r2, #31
 8001b0e:	2101      	movs	r1, #1
 8001b10:	fa01 f202 	lsl.w	r2, r1, r2
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d17b      	bne.n	8001c12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0f3      	b.n	8001d06 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d13c      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x178>
 8001b26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b2a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b2e:	fa93 f3a3 	rbit	r3, r3
 8001b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b36:	fab3 f383 	clz	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	095b      	lsrs	r3, r3, #5
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d102      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x128>
 8001b4a:	4b4f      	ldr	r3, [pc, #316]	; (8001c88 <HAL_RCC_ClockConfig+0x260>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	e00f      	b.n	8001b70 <HAL_RCC_ClockConfig+0x148>
 8001b50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b54:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b58:	fa93 f3a3 	rbit	r3, r3
 8001b5c:	647b      	str	r3, [r7, #68]	; 0x44
 8001b5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b62:	643b      	str	r3, [r7, #64]	; 0x40
 8001b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b6c:	4b46      	ldr	r3, [pc, #280]	; (8001c88 <HAL_RCC_ClockConfig+0x260>)
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b74:	63ba      	str	r2, [r7, #56]	; 0x38
 8001b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b78:	fa92 f2a2 	rbit	r2, r2
 8001b7c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001b7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b80:	fab2 f282 	clz	r2, r2
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	f042 0220 	orr.w	r2, r2, #32
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	f002 021f 	and.w	r2, r2, #31
 8001b90:	2101      	movs	r1, #1
 8001b92:	fa01 f202 	lsl.w	r2, r1, r2
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d13a      	bne.n	8001c12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0b2      	b.n	8001d06 <HAL_RCC_ClockConfig+0x2de>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bae:	fab3 f383 	clz	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	095b      	lsrs	r3, r3, #5
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d102      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x1a0>
 8001bc2:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <HAL_RCC_ClockConfig+0x260>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	e00d      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1bc>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	623b      	str	r3, [r7, #32]
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	fa93 f3a3 	rbit	r3, r3
 8001bde:	61fb      	str	r3, [r7, #28]
 8001be0:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <HAL_RCC_ClockConfig+0x260>)
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	2202      	movs	r2, #2
 8001be6:	61ba      	str	r2, [r7, #24]
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	fa92 f2a2 	rbit	r2, r2
 8001bee:	617a      	str	r2, [r7, #20]
  return result;
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	fab2 f282 	clz	r2, r2
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	f042 0220 	orr.w	r2, r2, #32
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	f002 021f 	and.w	r2, r2, #31
 8001c02:	2101      	movs	r1, #1
 8001c04:	fa01 f202 	lsl.w	r2, r1, r2
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e079      	b.n	8001d06 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c12:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <HAL_RCC_ClockConfig+0x260>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f023 0203 	bic.w	r2, r3, #3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	491a      	ldr	r1, [pc, #104]	; (8001c88 <HAL_RCC_ClockConfig+0x260>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c24:	f7fe fd50 	bl	80006c8 <HAL_GetTick>
 8001c28:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2c:	f7fe fd4c 	bl	80006c8 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e061      	b.n	8001d06 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <HAL_RCC_ClockConfig+0x260>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 020c 	and.w	r2, r3, #12
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d1eb      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_RCC_ClockConfig+0x25c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d214      	bcs.n	8001c8c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <HAL_RCC_ClockConfig+0x25c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 0207 	bic.w	r2, r3, #7
 8001c6a:	4906      	ldr	r1, [pc, #24]	; (8001c84 <HAL_RCC_ClockConfig+0x25c>)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <HAL_RCC_ClockConfig+0x25c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e040      	b.n	8001d06 <HAL_RCC_ClockConfig+0x2de>
 8001c84:	40022000 	.word	0x40022000
 8001c88:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c98:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <HAL_RCC_ClockConfig+0x2e8>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	491a      	ldr	r1, [pc, #104]	; (8001d10 <HAL_RCC_ClockConfig+0x2e8>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d009      	beq.n	8001cca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cb6:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <HAL_RCC_ClockConfig+0x2e8>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4912      	ldr	r1, [pc, #72]	; (8001d10 <HAL_RCC_ClockConfig+0x2e8>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cca:	f000 f829 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8001cce:	4601      	mov	r1, r0
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <HAL_RCC_ClockConfig+0x2e8>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cd8:	22f0      	movs	r2, #240	; 0xf0
 8001cda:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	fa92 f2a2 	rbit	r2, r2
 8001ce2:	60fa      	str	r2, [r7, #12]
  return result;
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	fab2 f282 	clz	r2, r2
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	40d3      	lsrs	r3, r2
 8001cee:	4a09      	ldr	r2, [pc, #36]	; (8001d14 <HAL_RCC_ClockConfig+0x2ec>)
 8001cf0:	5cd3      	ldrb	r3, [r2, r3]
 8001cf2:	fa21 f303 	lsr.w	r3, r1, r3
 8001cf6:	4a08      	ldr	r2, [pc, #32]	; (8001d18 <HAL_RCC_ClockConfig+0x2f0>)
 8001cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <HAL_RCC_ClockConfig+0x2f4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fc9e 	bl	8000640 <HAL_InitTick>
  
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3778      	adds	r7, #120	; 0x78
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000
 8001d14:	08003b40 	.word	0x08003b40
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	20000004 	.word	0x20000004

08001d20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b08b      	sub	sp, #44	; 0x2c
 8001d24:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001d3a:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d002      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0x30>
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	d003      	beq.n	8001d56 <HAL_RCC_GetSysClockFreq+0x36>
 8001d4e:	e03c      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d50:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d52:	623b      	str	r3, [r7, #32]
      break;
 8001d54:	e03c      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d5c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001d60:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	fa92 f2a2 	rbit	r2, r2
 8001d68:	607a      	str	r2, [r7, #4]
  return result;
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	fab2 f282 	clz	r2, r2
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	40d3      	lsrs	r3, r2
 8001d74:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d76:	5cd3      	ldrb	r3, [r2, r3]
 8001d78:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001d7a:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	220f      	movs	r2, #15
 8001d84:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	fa92 f2a2 	rbit	r2, r2
 8001d8c:	60fa      	str	r2, [r7, #12]
  return result;
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	fab2 f282 	clz	r2, r2
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	40d3      	lsrs	r3, r2
 8001d98:	4a14      	ldr	r2, [pc, #80]	; (8001dec <HAL_RCC_GetSysClockFreq+0xcc>)
 8001d9a:	5cd3      	ldrb	r3, [r2, r3]
 8001d9c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001da8:	4a0e      	ldr	r2, [pc, #56]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fb02 f303 	mul.w	r3, r2, r3
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
 8001db8:	e004      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	4a0c      	ldr	r2, [pc, #48]	; (8001df0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	623b      	str	r3, [r7, #32]
      break;
 8001dc8:	e002      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dcc:	623b      	str	r3, [r7, #32]
      break;
 8001dce:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	372c      	adds	r7, #44	; 0x2c
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	007a1200 	.word	0x007a1200
 8001de8:	08003b50 	.word	0x08003b50
 8001dec:	08003b60 	.word	0x08003b60
 8001df0:	003d0900 	.word	0x003d0900

08001df4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e01d      	b.n	8001e42 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7fe fb40 	bl	80004a0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f000 f9f6 	bl	8002224 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d122      	bne.n	8001ea6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d11b      	bne.n	8001ea6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f06f 0202 	mvn.w	r2, #2
 8001e76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f9ab 	bl	80021e8 <HAL_TIM_IC_CaptureCallback>
 8001e92:	e005      	b.n	8001ea0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f99d 	bl	80021d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f9ae 	bl	80021fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d122      	bne.n	8001efa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d11b      	bne.n	8001efa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f06f 0204 	mvn.w	r2, #4
 8001eca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f981 	bl	80021e8 <HAL_TIM_IC_CaptureCallback>
 8001ee6:	e005      	b.n	8001ef4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f973 	bl	80021d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f984 	bl	80021fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d122      	bne.n	8001f4e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d11b      	bne.n	8001f4e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f06f 0208 	mvn.w	r2, #8
 8001f1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2204      	movs	r2, #4
 8001f24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f957 	bl	80021e8 <HAL_TIM_IC_CaptureCallback>
 8001f3a:	e005      	b.n	8001f48 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f949 	bl	80021d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f95a 	bl	80021fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b10      	cmp	r3, #16
 8001f5a:	d122      	bne.n	8001fa2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b10      	cmp	r3, #16
 8001f68:	d11b      	bne.n	8001fa2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f06f 0210 	mvn.w	r2, #16
 8001f72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2208      	movs	r2, #8
 8001f78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f92d 	bl	80021e8 <HAL_TIM_IC_CaptureCallback>
 8001f8e:	e005      	b.n	8001f9c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f91f 	bl	80021d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f930 	bl	80021fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d10e      	bne.n	8001fce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d107      	bne.n	8001fce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f06f 0201 	mvn.w	r2, #1
 8001fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f8f9 	bl	80021c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd8:	2b80      	cmp	r3, #128	; 0x80
 8001fda:	d10e      	bne.n	8001ffa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe6:	2b80      	cmp	r3, #128	; 0x80
 8001fe8:	d107      	bne.n	8001ffa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 faff 	bl	80025f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002008:	d10e      	bne.n	8002028 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002014:	2b80      	cmp	r3, #128	; 0x80
 8002016:	d107      	bne.n	8002028 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 faf2 	bl	800260c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002032:	2b40      	cmp	r3, #64	; 0x40
 8002034:	d10e      	bne.n	8002054 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002040:	2b40      	cmp	r3, #64	; 0x40
 8002042:	d107      	bne.n	8002054 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800204c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f8de 	bl	8002210 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b20      	cmp	r3, #32
 8002060:	d10e      	bne.n	8002080 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b20      	cmp	r3, #32
 800206e:	d107      	bne.n	8002080 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0220 	mvn.w	r2, #32
 8002078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 fab2 	bl	80025e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800209a:	2b01      	cmp	r3, #1
 800209c:	d101      	bne.n	80020a2 <HAL_TIM_IC_ConfigChannel+0x1a>
 800209e:	2302      	movs	r3, #2
 80020a0:	e08a      	b.n	80021b8 <HAL_TIM_IC_ConfigChannel+0x130>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2202      	movs	r2, #2
 80020ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d11b      	bne.n	80020f0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	6819      	ldr	r1, [r3, #0]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f000 f91a 	bl	8002300 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 020c 	bic.w	r2, r2, #12
 80020da:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6999      	ldr	r1, [r3, #24]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	619a      	str	r2, [r3, #24]
 80020ee:	e05a      	b.n	80021a6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d11c      	bne.n	8002130 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	6819      	ldr	r1, [r3, #0]
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f000 f951 	bl	80023ac <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699a      	ldr	r2, [r3, #24]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002118:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6999      	ldr	r1, [r3, #24]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	021a      	lsls	r2, r3, #8
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	619a      	str	r2, [r3, #24]
 800212e:	e03a      	b.n	80021a6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b08      	cmp	r3, #8
 8002134:	d11b      	bne.n	800216e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	6819      	ldr	r1, [r3, #0]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f000 f96e 	bl	8002426 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 020c 	bic.w	r2, r2, #12
 8002158:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	69d9      	ldr	r1, [r3, #28]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	61da      	str	r2, [r3, #28]
 800216c:	e01b      	b.n	80021a6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	6819      	ldr	r1, [r3, #0]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f000 f98e 	bl	800249e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69da      	ldr	r2, [r3, #28]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002190:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	69d9      	ldr	r1, [r3, #28]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	021a      	lsls	r2, r3, #8
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a2e      	ldr	r2, [pc, #184]	; (80022f0 <TIM_Base_SetConfig+0xcc>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d003      	beq.n	8002244 <TIM_Base_SetConfig+0x20>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002242:	d108      	bne.n	8002256 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800224a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a25      	ldr	r2, [pc, #148]	; (80022f0 <TIM_Base_SetConfig+0xcc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00f      	beq.n	800227e <TIM_Base_SetConfig+0x5a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002264:	d00b      	beq.n	800227e <TIM_Base_SetConfig+0x5a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a22      	ldr	r2, [pc, #136]	; (80022f4 <TIM_Base_SetConfig+0xd0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d007      	beq.n	800227e <TIM_Base_SetConfig+0x5a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a21      	ldr	r2, [pc, #132]	; (80022f8 <TIM_Base_SetConfig+0xd4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d003      	beq.n	800227e <TIM_Base_SetConfig+0x5a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a20      	ldr	r2, [pc, #128]	; (80022fc <TIM_Base_SetConfig+0xd8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d108      	bne.n	8002290 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <TIM_Base_SetConfig+0xcc>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d00b      	beq.n	80022d4 <TIM_Base_SetConfig+0xb0>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a0d      	ldr	r2, [pc, #52]	; (80022f4 <TIM_Base_SetConfig+0xd0>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d007      	beq.n	80022d4 <TIM_Base_SetConfig+0xb0>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a0c      	ldr	r2, [pc, #48]	; (80022f8 <TIM_Base_SetConfig+0xd4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d003      	beq.n	80022d4 <TIM_Base_SetConfig+0xb0>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a0b      	ldr	r2, [pc, #44]	; (80022fc <TIM_Base_SetConfig+0xd8>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d103      	bne.n	80022dc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	615a      	str	r2, [r3, #20]
}
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40012c00 	.word	0x40012c00
 80022f4:	40014000 	.word	0x40014000
 80022f8:	40014400 	.word	0x40014400
 80022fc:	40014800 	.word	0x40014800

08002300 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	f023 0201 	bic.w	r2, r3, #1
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4a1e      	ldr	r2, [pc, #120]	; (80023a4 <TIM_TI1_SetConfig+0xa4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d007      	beq.n	800233e <TIM_TI1_SetConfig+0x3e>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002334:	d003      	beq.n	800233e <TIM_TI1_SetConfig+0x3e>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4a1b      	ldr	r2, [pc, #108]	; (80023a8 <TIM_TI1_SetConfig+0xa8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d101      	bne.n	8002342 <TIM_TI1_SetConfig+0x42>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <TIM_TI1_SetConfig+0x44>
 8002342:	2300      	movs	r3, #0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f023 0303 	bic.w	r3, r3, #3
 800234e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4313      	orrs	r3, r2
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	e003      	b.n	8002362 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002368:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	b2db      	uxtb	r3, r3
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	4313      	orrs	r3, r2
 8002374:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f023 030a 	bic.w	r3, r3, #10
 800237c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f003 030a 	and.w	r3, r3, #10
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	621a      	str	r2, [r3, #32]
}
 8002396:	bf00      	nop
 8002398:	371c      	adds	r7, #28
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40012c00 	.word	0x40012c00
 80023a8:	40014000 	.word	0x40014000

080023ac <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	f023 0210 	bic.w	r2, r3, #16
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	031b      	lsls	r3, r3, #12
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023fe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	621a      	str	r2, [r3, #32]
}
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002426:	b480      	push	{r7}
 8002428:	b087      	sub	sp, #28
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f023 0303 	bic.w	r3, r3, #3
 8002452:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4313      	orrs	r3, r2
 800245a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002462:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	b2db      	uxtb	r3, r3
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002476:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	621a      	str	r2, [r3, #32]
}
 8002492:	bf00      	nop
 8002494:	371c      	adds	r7, #28
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800249e:	b480      	push	{r7}
 80024a0:	b087      	sub	sp, #28
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	031b      	lsls	r3, r3, #12
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80024f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	031b      	lsls	r3, r3, #12
 80024f6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	621a      	str	r2, [r3, #32]
}
 800250c:	bf00      	nop
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800252c:	2302      	movs	r3, #2
 800252e:	e04f      	b.n	80025d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a21      	ldr	r2, [pc, #132]	; (80025dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d108      	bne.n	800256c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002560:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002572:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a14      	ldr	r2, [pc, #80]	; (80025dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d009      	beq.n	80025a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002598:	d004      	beq.n	80025a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a10      	ldr	r2, [pc, #64]	; (80025e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d10c      	bne.n	80025be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	40012c00 	.word	0x40012c00
 80025e0:	40014000 	.word	0x40014000

080025e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800262e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002632:	2b84      	cmp	r3, #132	; 0x84
 8002634:	d005      	beq.n	8002642 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002636:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4413      	add	r3, r2
 800263e:	3303      	adds	r3, #3
 8002640:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002642:	68fb      	ldr	r3, [r7, #12]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002654:	f000 fad2 	bl	8002bfc <vTaskStartScheduler>
  
  return osOK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	bd80      	pop	{r7, pc}

0800265e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800265e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002660:	b089      	sub	sp, #36	; 0x24
 8002662:	af04      	add	r7, sp, #16
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d020      	beq.n	80026b2 <osThreadCreate+0x54>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01c      	beq.n	80026b2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685c      	ldr	r4, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681d      	ldr	r5, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691e      	ldr	r6, [r3, #16]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ffc8 	bl	8002620 <makeFreeRtosPriority>
 8002690:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800269a:	9202      	str	r2, [sp, #8]
 800269c:	9301      	str	r3, [sp, #4]
 800269e:	9100      	str	r1, [sp, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4632      	mov	r2, r6
 80026a4:	4629      	mov	r1, r5
 80026a6:	4620      	mov	r0, r4
 80026a8:	f000 f8ed 	bl	8002886 <xTaskCreateStatic>
 80026ac:	4603      	mov	r3, r0
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	e01c      	b.n	80026ec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685c      	ldr	r4, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026be:	b29e      	uxth	r6, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ffaa 	bl	8002620 <makeFreeRtosPriority>
 80026cc:	4602      	mov	r2, r0
 80026ce:	f107 030c 	add.w	r3, r7, #12
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	9200      	str	r2, [sp, #0]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	4632      	mov	r2, r6
 80026da:	4629      	mov	r1, r5
 80026dc:	4620      	mov	r0, r4
 80026de:	f000 f92b 	bl	8002938 <xTaskCreate>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d001      	beq.n	80026ec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	e000      	b.n	80026ee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80026ec:	68fb      	ldr	r3, [r7, #12]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026f6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <osDelay+0x16>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	e000      	b.n	800270e <osDelay+0x18>
 800270c:	2301      	movs	r3, #1
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fa40 	bl	8002b94 <vTaskDelay>
  
  return osOK;
 8002714:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f103 0208 	add.w	r2, r3, #8
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f04f 32ff 	mov.w	r2, #4294967295
 8002736:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f103 0208 	add.w	r2, r3, #8
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f103 0208 	add.w	r2, r3, #8
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	601a      	str	r2, [r3, #0]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d6:	d103      	bne.n	80027e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	e00c      	b.n	80027fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3308      	adds	r3, #8
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	e002      	b.n	80027ee <vListInsert+0x2e>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d2f6      	bcs.n	80027e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	601a      	str	r2, [r3, #0]
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002832:	b480      	push	{r7}
 8002834:	b085      	sub	sp, #20
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6892      	ldr	r2, [r2, #8]
 8002848:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6852      	ldr	r2, [r2, #4]
 8002852:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	429a      	cmp	r2, r3
 800285c:	d103      	bne.n	8002866 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	1e5a      	subs	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002886:	b580      	push	{r7, lr}
 8002888:	b08e      	sub	sp, #56	; 0x38
 800288a:	af04      	add	r7, sp, #16
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800289a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289e:	f383 8811 	msr	BASEPRI, r3
 80028a2:	f3bf 8f6f 	isb	sy
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	623b      	str	r3, [r7, #32]
 80028ac:	e7fe      	b.n	80028ac <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80028ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d109      	bne.n	80028c8 <xTaskCreateStatic+0x42>
 80028b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b8:	f383 8811 	msr	BASEPRI, r3
 80028bc:	f3bf 8f6f 	isb	sy
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	e7fe      	b.n	80028c6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80028c8:	2354      	movs	r3, #84	; 0x54
 80028ca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	2b54      	cmp	r3, #84	; 0x54
 80028d0:	d009      	beq.n	80028e6 <xTaskCreateStatic+0x60>
 80028d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d6:	f383 8811 	msr	BASEPRI, r3
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	61bb      	str	r3, [r7, #24]
 80028e4:	e7fe      	b.n	80028e4 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80028e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d01e      	beq.n	800292a <xTaskCreateStatic+0xa4>
 80028ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d01b      	beq.n	800292a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002904:	2300      	movs	r3, #0
 8002906:	9303      	str	r3, [sp, #12]
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	9302      	str	r3, [sp, #8]
 800290c:	f107 0314 	add.w	r3, r7, #20
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	68b9      	ldr	r1, [r7, #8]
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f850 	bl	80029c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002922:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002924:	f000 f8cc 	bl	8002ac0 <prvAddNewTaskToReadyList>
 8002928:	e001      	b.n	800292e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800292e:	697b      	ldr	r3, [r7, #20]
	}
 8002930:	4618      	mov	r0, r3
 8002932:	3728      	adds	r7, #40	; 0x28
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08c      	sub	sp, #48	; 0x30
 800293c:	af04      	add	r7, sp, #16
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fed1 	bl	80036f4 <pvPortMalloc>
 8002952:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00e      	beq.n	8002978 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800295a:	2054      	movs	r0, #84	; 0x54
 800295c:	f000 feca 	bl	80036f4 <pvPortMalloc>
 8002960:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	631a      	str	r2, [r3, #48]	; 0x30
 800296e:	e005      	b.n	800297c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002970:	6978      	ldr	r0, [r7, #20]
 8002972:	f000 ff81 	bl	8003878 <vPortFree>
 8002976:	e001      	b.n	800297c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d017      	beq.n	80029b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800298a:	88fa      	ldrh	r2, [r7, #6]
 800298c:	2300      	movs	r3, #0
 800298e:	9303      	str	r3, [sp, #12]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	9302      	str	r3, [sp, #8]
 8002994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	68b9      	ldr	r1, [r7, #8]
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f80e 	bl	80029c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029a6:	69f8      	ldr	r0, [r7, #28]
 80029a8:	f000 f88a 	bl	8002ac0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80029ac:	2301      	movs	r3, #1
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	e002      	b.n	80029b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029b2:	f04f 33ff 	mov.w	r3, #4294967295
 80029b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80029b8:	69bb      	ldr	r3, [r7, #24]
	}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3720      	adds	r7, #32
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b088      	sub	sp, #32
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80029d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029da:	3b01      	subs	r3, #1
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	f023 0307 	bic.w	r3, r3, #7
 80029e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d009      	beq.n	8002a08 <prvInitialiseNewTask+0x46>
 80029f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f8:	f383 8811 	msr	BASEPRI, r3
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	e7fe      	b.n	8002a06 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]
 8002a0c:	e012      	b.n	8002a34 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	4413      	add	r3, r2
 8002a14:	7819      	ldrb	r1, [r3, #0]
 8002a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3334      	adds	r3, #52	; 0x34
 8002a1e:	460a      	mov	r2, r1
 8002a20:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	4413      	add	r3, r2
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3301      	adds	r3, #1
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	2b0f      	cmp	r3, #15
 8002a38:	d9e9      	bls.n	8002a0e <prvInitialiseNewTask+0x4c>
 8002a3a:	e000      	b.n	8002a3e <prvInitialiseNewTask+0x7c>
		{
			break;
 8002a3c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a48:	2b06      	cmp	r3, #6
 8002a4a:	d901      	bls.n	8002a50 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a4c:	2306      	movs	r3, #6
 8002a4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5e:	2200      	movs	r2, #0
 8002a60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a64:	3304      	adds	r3, #4
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fe79 	bl	800275e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6e:	3318      	adds	r3, #24
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fe74 	bl	800275e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7e:	f1c3 0207 	rsb	r2, r3, #7
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8e:	2200      	movs	r2, #0
 8002a90:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	68f9      	ldr	r1, [r7, #12]
 8002a9e:	69b8      	ldr	r0, [r7, #24]
 8002aa0:	f000 fc26 	bl	80032f0 <pxPortInitialiseStack>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ab6:	bf00      	nop
 8002ab8:	3720      	adds	r7, #32
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ac8:	f000 fd38 	bl	800353c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002acc:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <prvAddNewTaskToReadyList+0xb8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	4a29      	ldr	r2, [pc, #164]	; (8002b78 <prvAddNewTaskToReadyList+0xb8>)
 8002ad4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ad6:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <prvAddNewTaskToReadyList+0xbc>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ade:	4a27      	ldr	r2, [pc, #156]	; (8002b7c <prvAddNewTaskToReadyList+0xbc>)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ae4:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <prvAddNewTaskToReadyList+0xb8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d110      	bne.n	8002b0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002aec:	f000 fabc 	bl	8003068 <prvInitialiseTaskLists>
 8002af0:	e00d      	b.n	8002b0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002af2:	4b23      	ldr	r3, [pc, #140]	; (8002b80 <prvAddNewTaskToReadyList+0xc0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002afa:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <prvAddNewTaskToReadyList+0xbc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d802      	bhi.n	8002b0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b08:	4a1c      	ldr	r2, [pc, #112]	; (8002b7c <prvAddNewTaskToReadyList+0xbc>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b0e:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <prvAddNewTaskToReadyList+0xc4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3301      	adds	r3, #1
 8002b14:	4a1b      	ldr	r2, [pc, #108]	; (8002b84 <prvAddNewTaskToReadyList+0xc4>)
 8002b16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <prvAddNewTaskToReadyList+0xc8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	4a18      	ldr	r2, [pc, #96]	; (8002b88 <prvAddNewTaskToReadyList+0xc8>)
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4a15      	ldr	r2, [pc, #84]	; (8002b8c <prvAddNewTaskToReadyList+0xcc>)
 8002b38:	441a      	add	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4610      	mov	r0, r2
 8002b42:	f7ff fe19 	bl	8002778 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b46:	f000 fd27 	bl	8003598 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <prvAddNewTaskToReadyList+0xc0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00e      	beq.n	8002b70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b52:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <prvAddNewTaskToReadyList+0xbc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d207      	bcs.n	8002b70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <prvAddNewTaskToReadyList+0xd0>)
 8002b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	200003c4 	.word	0x200003c4
 8002b7c:	200002c4 	.word	0x200002c4
 8002b80:	200003d0 	.word	0x200003d0
 8002b84:	200003e0 	.word	0x200003e0
 8002b88:	200003cc 	.word	0x200003cc
 8002b8c:	200002c8 	.word	0x200002c8
 8002b90:	e000ed04 	.word	0xe000ed04

08002b94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d016      	beq.n	8002bd4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <vTaskDelay+0x60>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <vTaskDelay+0x2e>
 8002bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	e7fe      	b.n	8002bc0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002bc2:	f000 f879 	bl	8002cb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fb2b 	bl	8003224 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002bce:	f000 f881 	bl	8002cd4 <xTaskResumeAll>
 8002bd2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d107      	bne.n	8002bea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002bda:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <vTaskDelay+0x64>)
 8002bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	200003ec 	.word	0x200003ec
 8002bf8:	e000ed04 	.word	0xe000ed04

08002bfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	; 0x28
 8002c00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002c0a:	463a      	mov	r2, r7
 8002c0c:	1d39      	adds	r1, r7, #4
 8002c0e:	f107 0308 	add.w	r3, r7, #8
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fd fadc 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002c18:	6839      	ldr	r1, [r7, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	9202      	str	r2, [sp, #8]
 8002c20:	9301      	str	r3, [sp, #4]
 8002c22:	2300      	movs	r3, #0
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	2300      	movs	r3, #0
 8002c28:	460a      	mov	r2, r1
 8002c2a:	491d      	ldr	r1, [pc, #116]	; (8002ca0 <vTaskStartScheduler+0xa4>)
 8002c2c:	481d      	ldr	r0, [pc, #116]	; (8002ca4 <vTaskStartScheduler+0xa8>)
 8002c2e:	f7ff fe2a 	bl	8002886 <xTaskCreateStatic>
 8002c32:	4602      	mov	r2, r0
 8002c34:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <vTaskStartScheduler+0xac>)
 8002c36:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002c38:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <vTaskStartScheduler+0xac>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002c40:	2301      	movs	r3, #1
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	e001      	b.n	8002c4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d115      	bne.n	8002c7c <vTaskStartScheduler+0x80>
 8002c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c54:	f383 8811 	msr	BASEPRI, r3
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002c62:	4b12      	ldr	r3, [pc, #72]	; (8002cac <vTaskStartScheduler+0xb0>)
 8002c64:	f04f 32ff 	mov.w	r2, #4294967295
 8002c68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002c6a:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <vTaskStartScheduler+0xb4>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002c70:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <vTaskStartScheduler+0xb8>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002c76:	f000 fbc3 	bl	8003400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002c7a:	e00d      	b.n	8002c98 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c82:	d109      	bne.n	8002c98 <vTaskStartScheduler+0x9c>
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	e7fe      	b.n	8002c96 <vTaskStartScheduler+0x9a>
}
 8002c98:	bf00      	nop
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	08003b38 	.word	0x08003b38
 8002ca4:	08003039 	.word	0x08003039
 8002ca8:	200003e8 	.word	0x200003e8
 8002cac:	200003e4 	.word	0x200003e4
 8002cb0:	200003d0 	.word	0x200003d0
 8002cb4:	200003c8 	.word	0x200003c8

08002cb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <vTaskSuspendAll+0x18>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	4a03      	ldr	r2, [pc, #12]	; (8002cd0 <vTaskSuspendAll+0x18>)
 8002cc4:	6013      	str	r3, [r2, #0]
}
 8002cc6:	bf00      	nop
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	200003ec 	.word	0x200003ec

08002cd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ce2:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <xTaskResumeAll+0x114>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <xTaskResumeAll+0x2a>
 8002cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cee:	f383 8811 	msr	BASEPRI, r3
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	603b      	str	r3, [r7, #0]
 8002cfc:	e7fe      	b.n	8002cfc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002cfe:	f000 fc1d 	bl	800353c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d02:	4b39      	ldr	r3, [pc, #228]	; (8002de8 <xTaskResumeAll+0x114>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	4a37      	ldr	r2, [pc, #220]	; (8002de8 <xTaskResumeAll+0x114>)
 8002d0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d0c:	4b36      	ldr	r3, [pc, #216]	; (8002de8 <xTaskResumeAll+0x114>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d161      	bne.n	8002dd8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d14:	4b35      	ldr	r3, [pc, #212]	; (8002dec <xTaskResumeAll+0x118>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d05d      	beq.n	8002dd8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d1c:	e02e      	b.n	8002d7c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002d1e:	4b34      	ldr	r3, [pc, #208]	; (8002df0 <xTaskResumeAll+0x11c>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3318      	adds	r3, #24
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fd81 	bl	8002832 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3304      	adds	r3, #4
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fd7c 	bl	8002832 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	2201      	movs	r2, #1
 8002d40:	409a      	lsls	r2, r3
 8002d42:	4b2c      	ldr	r3, [pc, #176]	; (8002df4 <xTaskResumeAll+0x120>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	4a2a      	ldr	r2, [pc, #168]	; (8002df4 <xTaskResumeAll+0x120>)
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4a27      	ldr	r2, [pc, #156]	; (8002df8 <xTaskResumeAll+0x124>)
 8002d5a:	441a      	add	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	4619      	mov	r1, r3
 8002d62:	4610      	mov	r0, r2
 8002d64:	f7ff fd08 	bl	8002778 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6c:	4b23      	ldr	r3, [pc, #140]	; (8002dfc <xTaskResumeAll+0x128>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d302      	bcc.n	8002d7c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002d76:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <xTaskResumeAll+0x12c>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d7c:	4b1c      	ldr	r3, [pc, #112]	; (8002df0 <xTaskResumeAll+0x11c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1cc      	bne.n	8002d1e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002d8a:	f000 fa07 	bl	800319c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <xTaskResumeAll+0x130>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d010      	beq.n	8002dbc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002d9a:	f000 f837 	bl	8002e0c <xTaskIncrementTick>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002da4:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <xTaskResumeAll+0x12c>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f1      	bne.n	8002d9a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002db6:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <xTaskResumeAll+0x130>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002dbc:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <xTaskResumeAll+0x12c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d009      	beq.n	8002dd8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <xTaskResumeAll+0x134>)
 8002dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002dd8:	f000 fbde 	bl	8003598 <vPortExitCritical>

	return xAlreadyYielded;
 8002ddc:	68bb      	ldr	r3, [r7, #8]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200003ec 	.word	0x200003ec
 8002dec:	200003c4 	.word	0x200003c4
 8002df0:	20000384 	.word	0x20000384
 8002df4:	200003cc 	.word	0x200003cc
 8002df8:	200002c8 	.word	0x200002c8
 8002dfc:	200002c4 	.word	0x200002c4
 8002e00:	200003d8 	.word	0x200003d8
 8002e04:	200003d4 	.word	0x200003d4
 8002e08:	e000ed04 	.word	0xe000ed04

08002e0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e16:	4b50      	ldr	r3, [pc, #320]	; (8002f58 <xTaskIncrementTick+0x14c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f040 808c 	bne.w	8002f38 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e20:	4b4e      	ldr	r3, [pc, #312]	; (8002f5c <xTaskIncrementTick+0x150>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3301      	adds	r3, #1
 8002e26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e28:	4a4c      	ldr	r2, [pc, #304]	; (8002f5c <xTaskIncrementTick+0x150>)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d11f      	bne.n	8002e74 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002e34:	4b4a      	ldr	r3, [pc, #296]	; (8002f60 <xTaskIncrementTick+0x154>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <xTaskIncrementTick+0x46>
 8002e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e42:	f383 8811 	msr	BASEPRI, r3
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	e7fe      	b.n	8002e50 <xTaskIncrementTick+0x44>
 8002e52:	4b43      	ldr	r3, [pc, #268]	; (8002f60 <xTaskIncrementTick+0x154>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	4b42      	ldr	r3, [pc, #264]	; (8002f64 <xTaskIncrementTick+0x158>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a40      	ldr	r2, [pc, #256]	; (8002f60 <xTaskIncrementTick+0x154>)
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	4a40      	ldr	r2, [pc, #256]	; (8002f64 <xTaskIncrementTick+0x158>)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	4b40      	ldr	r3, [pc, #256]	; (8002f68 <xTaskIncrementTick+0x15c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	4a3e      	ldr	r2, [pc, #248]	; (8002f68 <xTaskIncrementTick+0x15c>)
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	f000 f994 	bl	800319c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002e74:	4b3d      	ldr	r3, [pc, #244]	; (8002f6c <xTaskIncrementTick+0x160>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d34d      	bcc.n	8002f1a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e7e:	4b38      	ldr	r3, [pc, #224]	; (8002f60 <xTaskIncrementTick+0x154>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <xTaskIncrementTick+0x80>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <xTaskIncrementTick+0x82>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d004      	beq.n	8002e9c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e92:	4b36      	ldr	r3, [pc, #216]	; (8002f6c <xTaskIncrementTick+0x160>)
 8002e94:	f04f 32ff 	mov.w	r2, #4294967295
 8002e98:	601a      	str	r2, [r3, #0]
					break;
 8002e9a:	e03e      	b.n	8002f1a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e9c:	4b30      	ldr	r3, [pc, #192]	; (8002f60 <xTaskIncrementTick+0x154>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d203      	bcs.n	8002ebc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002eb4:	4a2d      	ldr	r2, [pc, #180]	; (8002f6c <xTaskIncrementTick+0x160>)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6013      	str	r3, [r2, #0]
						break;
 8002eba:	e02e      	b.n	8002f1a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fcb6 	bl	8002832 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d004      	beq.n	8002ed8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	3318      	adds	r3, #24
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fcad 	bl	8002832 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	2201      	movs	r2, #1
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	4b23      	ldr	r3, [pc, #140]	; (8002f70 <xTaskIncrementTick+0x164>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	4a22      	ldr	r2, [pc, #136]	; (8002f70 <xTaskIncrementTick+0x164>)
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4a1f      	ldr	r2, [pc, #124]	; (8002f74 <xTaskIncrementTick+0x168>)
 8002ef8:	441a      	add	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	3304      	adds	r3, #4
 8002efe:	4619      	mov	r1, r3
 8002f00:	4610      	mov	r0, r2
 8002f02:	f7ff fc39 	bl	8002778 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0a:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <xTaskIncrementTick+0x16c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d3b4      	bcc.n	8002e7e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002f14:	2301      	movs	r3, #1
 8002f16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f18:	e7b1      	b.n	8002e7e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f1a:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <xTaskIncrementTick+0x16c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f20:	4914      	ldr	r1, [pc, #80]	; (8002f74 <xTaskIncrementTick+0x168>)
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d907      	bls.n	8002f42 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8002f32:	2301      	movs	r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	e004      	b.n	8002f42 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002f38:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <xTaskIncrementTick+0x170>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	4a0f      	ldr	r2, [pc, #60]	; (8002f7c <xTaskIncrementTick+0x170>)
 8002f40:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002f42:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <xTaskIncrementTick+0x174>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002f4e:	697b      	ldr	r3, [r7, #20]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	200003ec 	.word	0x200003ec
 8002f5c:	200003c8 	.word	0x200003c8
 8002f60:	2000037c 	.word	0x2000037c
 8002f64:	20000380 	.word	0x20000380
 8002f68:	200003dc 	.word	0x200003dc
 8002f6c:	200003e4 	.word	0x200003e4
 8002f70:	200003cc 	.word	0x200003cc
 8002f74:	200002c8 	.word	0x200002c8
 8002f78:	200002c4 	.word	0x200002c4
 8002f7c:	200003d4 	.word	0x200003d4
 8002f80:	200003d8 	.word	0x200003d8

08002f84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f8a:	4b26      	ldr	r3, [pc, #152]	; (8003024 <vTaskSwitchContext+0xa0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002f92:	4b25      	ldr	r3, [pc, #148]	; (8003028 <vTaskSwitchContext+0xa4>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002f98:	e03e      	b.n	8003018 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002f9a:	4b23      	ldr	r3, [pc, #140]	; (8003028 <vTaskSwitchContext+0xa4>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002fa0:	4b22      	ldr	r3, [pc, #136]	; (800302c <vTaskSwitchContext+0xa8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	fab3 f383 	clz	r3, r3
 8002fac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002fae:	7afb      	ldrb	r3, [r7, #11]
 8002fb0:	f1c3 031f 	rsb	r3, r3, #31
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	491e      	ldr	r1, [pc, #120]	; (8003030 <vTaskSwitchContext+0xac>)
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d109      	bne.n	8002fde <vTaskSwitchContext+0x5a>
	__asm volatile
 8002fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	607b      	str	r3, [r7, #4]
 8002fdc:	e7fe      	b.n	8002fdc <vTaskSwitchContext+0x58>
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4a11      	ldr	r2, [pc, #68]	; (8003030 <vTaskSwitchContext+0xac>)
 8002fea:	4413      	add	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	605a      	str	r2, [r3, #4]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	3308      	adds	r3, #8
 8003000:	429a      	cmp	r2, r3
 8003002:	d104      	bne.n	800300e <vTaskSwitchContext+0x8a>
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4a07      	ldr	r2, [pc, #28]	; (8003034 <vTaskSwitchContext+0xb0>)
 8003016:	6013      	str	r3, [r2, #0]
}
 8003018:	bf00      	nop
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	200003ec 	.word	0x200003ec
 8003028:	200003d8 	.word	0x200003d8
 800302c:	200003cc 	.word	0x200003cc
 8003030:	200002c8 	.word	0x200002c8
 8003034:	200002c4 	.word	0x200002c4

08003038 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003040:	f000 f852 	bl	80030e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <prvIdleTask+0x28>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d9f9      	bls.n	8003040 <prvIdleTask+0x8>
			{
				taskYIELD();
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <prvIdleTask+0x2c>)
 800304e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800305c:	e7f0      	b.n	8003040 <prvIdleTask+0x8>
 800305e:	bf00      	nop
 8003060:	200002c8 	.word	0x200002c8
 8003064:	e000ed04 	.word	0xe000ed04

08003068 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800306e:	2300      	movs	r3, #0
 8003070:	607b      	str	r3, [r7, #4]
 8003072:	e00c      	b.n	800308e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4a12      	ldr	r2, [pc, #72]	; (80030c8 <prvInitialiseTaskLists+0x60>)
 8003080:	4413      	add	r3, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fb4b 	bl	800271e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3301      	adds	r3, #1
 800308c:	607b      	str	r3, [r7, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b06      	cmp	r3, #6
 8003092:	d9ef      	bls.n	8003074 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003094:	480d      	ldr	r0, [pc, #52]	; (80030cc <prvInitialiseTaskLists+0x64>)
 8003096:	f7ff fb42 	bl	800271e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800309a:	480d      	ldr	r0, [pc, #52]	; (80030d0 <prvInitialiseTaskLists+0x68>)
 800309c:	f7ff fb3f 	bl	800271e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80030a0:	480c      	ldr	r0, [pc, #48]	; (80030d4 <prvInitialiseTaskLists+0x6c>)
 80030a2:	f7ff fb3c 	bl	800271e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80030a6:	480c      	ldr	r0, [pc, #48]	; (80030d8 <prvInitialiseTaskLists+0x70>)
 80030a8:	f7ff fb39 	bl	800271e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80030ac:	480b      	ldr	r0, [pc, #44]	; (80030dc <prvInitialiseTaskLists+0x74>)
 80030ae:	f7ff fb36 	bl	800271e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <prvInitialiseTaskLists+0x78>)
 80030b4:	4a05      	ldr	r2, [pc, #20]	; (80030cc <prvInitialiseTaskLists+0x64>)
 80030b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80030b8:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <prvInitialiseTaskLists+0x7c>)
 80030ba:	4a05      	ldr	r2, [pc, #20]	; (80030d0 <prvInitialiseTaskLists+0x68>)
 80030bc:	601a      	str	r2, [r3, #0]
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	200002c8 	.word	0x200002c8
 80030cc:	20000354 	.word	0x20000354
 80030d0:	20000368 	.word	0x20000368
 80030d4:	20000384 	.word	0x20000384
 80030d8:	20000398 	.word	0x20000398
 80030dc:	200003b0 	.word	0x200003b0
 80030e0:	2000037c 	.word	0x2000037c
 80030e4:	20000380 	.word	0x20000380

080030e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030ee:	e019      	b.n	8003124 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80030f0:	f000 fa24 	bl	800353c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80030f4:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <prvCheckTasksWaitingTermination+0x4c>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fb96 	bl	8002832 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003106:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <prvCheckTasksWaitingTermination+0x50>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3b01      	subs	r3, #1
 800310c:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <prvCheckTasksWaitingTermination+0x50>)
 800310e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <prvCheckTasksWaitingTermination+0x54>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3b01      	subs	r3, #1
 8003116:	4a09      	ldr	r2, [pc, #36]	; (800313c <prvCheckTasksWaitingTermination+0x54>)
 8003118:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800311a:	f000 fa3d 	bl	8003598 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f80e 	bl	8003140 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <prvCheckTasksWaitingTermination+0x54>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1e1      	bne.n	80030f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800312c:	bf00      	nop
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20000398 	.word	0x20000398
 8003138:	200003c4 	.word	0x200003c4
 800313c:	200003ac 	.word	0x200003ac

08003140 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800314e:	2b00      	cmp	r3, #0
 8003150:	d108      	bne.n	8003164 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fb8e 	bl	8003878 <vPortFree>
				vPortFree( pxTCB );
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fb8b 	bl	8003878 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003162:	e017      	b.n	8003194 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800316a:	2b01      	cmp	r3, #1
 800316c:	d103      	bne.n	8003176 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fb82 	bl	8003878 <vPortFree>
	}
 8003174:	e00e      	b.n	8003194 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800317c:	2b02      	cmp	r3, #2
 800317e:	d009      	beq.n	8003194 <prvDeleteTCB+0x54>
 8003180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	e7fe      	b.n	8003192 <prvDeleteTCB+0x52>
	}
 8003194:	bf00      	nop
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031a2:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <prvResetNextTaskUnblockTime+0x44>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <prvResetNextTaskUnblockTime+0x14>
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <prvResetNextTaskUnblockTime+0x16>
 80031b0:	2300      	movs	r3, #0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d004      	beq.n	80031c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80031b6:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <prvResetNextTaskUnblockTime+0x48>)
 80031b8:	f04f 32ff 	mov.w	r2, #4294967295
 80031bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80031be:	e008      	b.n	80031d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031c0:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <prvResetNextTaskUnblockTime+0x44>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4a05      	ldr	r2, [pc, #20]	; (80031e4 <prvResetNextTaskUnblockTime+0x48>)
 80031d0:	6013      	str	r3, [r2, #0]
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	2000037c 	.word	0x2000037c
 80031e4:	200003e4 	.word	0x200003e4

080031e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80031ee:	4b0b      	ldr	r3, [pc, #44]	; (800321c <xTaskGetSchedulerState+0x34>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d102      	bne.n	80031fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80031f6:	2301      	movs	r3, #1
 80031f8:	607b      	str	r3, [r7, #4]
 80031fa:	e008      	b.n	800320e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031fc:	4b08      	ldr	r3, [pc, #32]	; (8003220 <xTaskGetSchedulerState+0x38>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003204:	2302      	movs	r3, #2
 8003206:	607b      	str	r3, [r7, #4]
 8003208:	e001      	b.n	800320e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800320a:	2300      	movs	r3, #0
 800320c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800320e:	687b      	ldr	r3, [r7, #4]
	}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	200003d0 	.word	0x200003d0
 8003220:	200003ec 	.word	0x200003ec

08003224 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800322e:	4b29      	ldr	r3, [pc, #164]	; (80032d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003234:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3304      	adds	r3, #4
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff faf9 	bl	8002832 <uxListRemove>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10b      	bne.n	800325e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003246:	4b24      	ldr	r3, [pc, #144]	; (80032d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	2201      	movs	r2, #1
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43da      	mvns	r2, r3
 8003254:	4b21      	ldr	r3, [pc, #132]	; (80032dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4013      	ands	r3, r2
 800325a:	4a20      	ldr	r2, [pc, #128]	; (80032dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800325c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003264:	d10a      	bne.n	800327c <prvAddCurrentTaskToDelayedList+0x58>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800326c:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3304      	adds	r3, #4
 8003272:	4619      	mov	r1, r3
 8003274:	481a      	ldr	r0, [pc, #104]	; (80032e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003276:	f7ff fa7f 	bl	8002778 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800327a:	e026      	b.n	80032ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4413      	add	r3, r2
 8003282:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003284:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	429a      	cmp	r2, r3
 8003292:	d209      	bcs.n	80032a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003294:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3304      	adds	r3, #4
 800329e:	4619      	mov	r1, r3
 80032a0:	4610      	mov	r0, r2
 80032a2:	f7ff fa8d 	bl	80027c0 <vListInsert>
}
 80032a6:	e010      	b.n	80032ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032a8:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3304      	adds	r3, #4
 80032b2:	4619      	mov	r1, r3
 80032b4:	4610      	mov	r0, r2
 80032b6:	f7ff fa83 	bl	80027c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80032ba:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d202      	bcs.n	80032ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80032c4:	4a09      	ldr	r2, [pc, #36]	; (80032ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	6013      	str	r3, [r2, #0]
}
 80032ca:	bf00      	nop
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	200003c8 	.word	0x200003c8
 80032d8:	200002c4 	.word	0x200002c4
 80032dc:	200003cc 	.word	0x200003cc
 80032e0:	200003b0 	.word	0x200003b0
 80032e4:	20000380 	.word	0x20000380
 80032e8:	2000037c 	.word	0x2000037c
 80032ec:	200003e4 	.word	0x200003e4

080032f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	3b04      	subs	r3, #4
 8003300:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003308:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	3b04      	subs	r3, #4
 800330e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f023 0201 	bic.w	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3b04      	subs	r3, #4
 800331e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003320:	4a0c      	ldr	r2, [pc, #48]	; (8003354 <pxPortInitialiseStack+0x64>)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	3b14      	subs	r3, #20
 800332a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	3b04      	subs	r3, #4
 8003336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f06f 0202 	mvn.w	r2, #2
 800333e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	3b20      	subs	r3, #32
 8003344:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003346:	68fb      	ldr	r3, [r7, #12]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	08003359 	.word	0x08003359

08003358 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800335e:	2300      	movs	r3, #0
 8003360:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003362:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <prvTaskExitError+0x50>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336a:	d009      	beq.n	8003380 <prvTaskExitError+0x28>
 800336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	e7fe      	b.n	800337e <prvTaskExitError+0x26>
 8003380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003392:	bf00      	nop
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0fc      	beq.n	8003394 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800339a:	bf00      	nop
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	2000000c 	.word	0x2000000c
 80033ac:	00000000 	.word	0x00000000

080033b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80033b0:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <pxCurrentTCBConst2>)
 80033b2:	6819      	ldr	r1, [r3, #0]
 80033b4:	6808      	ldr	r0, [r1, #0]
 80033b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033ba:	f380 8809 	msr	PSP, r0
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f04f 0000 	mov.w	r0, #0
 80033c6:	f380 8811 	msr	BASEPRI, r0
 80033ca:	4770      	bx	lr
 80033cc:	f3af 8000 	nop.w

080033d0 <pxCurrentTCBConst2>:
 80033d0:	200002c4 	.word	0x200002c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop

080033d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80033d8:	4808      	ldr	r0, [pc, #32]	; (80033fc <prvPortStartFirstTask+0x24>)
 80033da:	6800      	ldr	r0, [r0, #0]
 80033dc:	6800      	ldr	r0, [r0, #0]
 80033de:	f380 8808 	msr	MSP, r0
 80033e2:	f04f 0000 	mov.w	r0, #0
 80033e6:	f380 8814 	msr	CONTROL, r0
 80033ea:	b662      	cpsie	i
 80033ec:	b661      	cpsie	f
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	df00      	svc	0
 80033f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80033fa:	bf00      	nop
 80033fc:	e000ed08 	.word	0xe000ed08

08003400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003406:	4b44      	ldr	r3, [pc, #272]	; (8003518 <xPortStartScheduler+0x118>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a44      	ldr	r2, [pc, #272]	; (800351c <xPortStartScheduler+0x11c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d109      	bne.n	8003424 <xPortStartScheduler+0x24>
 8003410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	e7fe      	b.n	8003422 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003424:	4b3c      	ldr	r3, [pc, #240]	; (8003518 <xPortStartScheduler+0x118>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a3d      	ldr	r2, [pc, #244]	; (8003520 <xPortStartScheduler+0x120>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d109      	bne.n	8003442 <xPortStartScheduler+0x42>
 800342e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003432:	f383 8811 	msr	BASEPRI, r3
 8003436:	f3bf 8f6f 	isb	sy
 800343a:	f3bf 8f4f 	dsb	sy
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	e7fe      	b.n	8003440 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003442:	4b38      	ldr	r3, [pc, #224]	; (8003524 <xPortStartScheduler+0x124>)
 8003444:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	b2db      	uxtb	r3, r3
 800344c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	22ff      	movs	r2, #255	; 0xff
 8003452:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003464:	b2da      	uxtb	r2, r3
 8003466:	4b30      	ldr	r3, [pc, #192]	; (8003528 <xPortStartScheduler+0x128>)
 8003468:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800346a:	4b30      	ldr	r3, [pc, #192]	; (800352c <xPortStartScheduler+0x12c>)
 800346c:	2207      	movs	r2, #7
 800346e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003470:	e009      	b.n	8003486 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003472:	4b2e      	ldr	r3, [pc, #184]	; (800352c <xPortStartScheduler+0x12c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3b01      	subs	r3, #1
 8003478:	4a2c      	ldr	r2, [pc, #176]	; (800352c <xPortStartScheduler+0x12c>)
 800347a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	b2db      	uxtb	r3, r3
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	b2db      	uxtb	r3, r3
 8003484:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003486:	78fb      	ldrb	r3, [r7, #3]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348e:	2b80      	cmp	r3, #128	; 0x80
 8003490:	d0ef      	beq.n	8003472 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003492:	4b26      	ldr	r3, [pc, #152]	; (800352c <xPortStartScheduler+0x12c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f1c3 0307 	rsb	r3, r3, #7
 800349a:	2b04      	cmp	r3, #4
 800349c:	d009      	beq.n	80034b2 <xPortStartScheduler+0xb2>
 800349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	e7fe      	b.n	80034b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80034b2:	4b1e      	ldr	r3, [pc, #120]	; (800352c <xPortStartScheduler+0x12c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	4a1c      	ldr	r2, [pc, #112]	; (800352c <xPortStartScheduler+0x12c>)
 80034ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <xPortStartScheduler+0x12c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034c4:	4a19      	ldr	r2, [pc, #100]	; (800352c <xPortStartScheduler+0x12c>)
 80034c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80034d0:	4b17      	ldr	r3, [pc, #92]	; (8003530 <xPortStartScheduler+0x130>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a16      	ldr	r2, [pc, #88]	; (8003530 <xPortStartScheduler+0x130>)
 80034d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80034dc:	4b14      	ldr	r3, [pc, #80]	; (8003530 <xPortStartScheduler+0x130>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a13      	ldr	r2, [pc, #76]	; (8003530 <xPortStartScheduler+0x130>)
 80034e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80034e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80034e8:	f000 f8d6 	bl	8003698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <xPortStartScheduler+0x134>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80034f2:	f000 f8f5 	bl	80036e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80034f6:	4b10      	ldr	r3, [pc, #64]	; (8003538 <xPortStartScheduler+0x138>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a0f      	ldr	r2, [pc, #60]	; (8003538 <xPortStartScheduler+0x138>)
 80034fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003500:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003502:	f7ff ff69 	bl	80033d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003506:	f7ff fd3d 	bl	8002f84 <vTaskSwitchContext>
	prvTaskExitError();
 800350a:	f7ff ff25 	bl	8003358 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	e000ed00 	.word	0xe000ed00
 800351c:	410fc271 	.word	0x410fc271
 8003520:	410fc270 	.word	0x410fc270
 8003524:	e000e400 	.word	0xe000e400
 8003528:	200003f0 	.word	0x200003f0
 800352c:	200003f4 	.word	0x200003f4
 8003530:	e000ed20 	.word	0xe000ed20
 8003534:	2000000c 	.word	0x2000000c
 8003538:	e000ef34 	.word	0xe000ef34

0800353c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003554:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <vPortEnterCritical+0x54>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3301      	adds	r3, #1
 800355a:	4a0d      	ldr	r2, [pc, #52]	; (8003590 <vPortEnterCritical+0x54>)
 800355c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800355e:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <vPortEnterCritical+0x54>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d10e      	bne.n	8003584 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003566:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <vPortEnterCritical+0x58>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d009      	beq.n	8003584 <vPortEnterCritical+0x48>
 8003570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	e7fe      	b.n	8003582 <vPortEnterCritical+0x46>
	}
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	2000000c 	.word	0x2000000c
 8003594:	e000ed04 	.word	0xe000ed04

08003598 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <vPortExitCritical+0x4c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <vPortExitCritical+0x22>
 80035a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	607b      	str	r3, [r7, #4]
 80035b8:	e7fe      	b.n	80035b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80035ba:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <vPortExitCritical+0x4c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3b01      	subs	r3, #1
 80035c0:	4a08      	ldr	r2, [pc, #32]	; (80035e4 <vPortExitCritical+0x4c>)
 80035c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80035c4:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <vPortExitCritical+0x4c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d104      	bne.n	80035d6 <vPortExitCritical+0x3e>
 80035cc:	2300      	movs	r3, #0
 80035ce:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	2000000c 	.word	0x2000000c
	...

080035f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80035f0:	f3ef 8009 	mrs	r0, PSP
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	4b15      	ldr	r3, [pc, #84]	; (8003650 <pxCurrentTCBConst>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	f01e 0f10 	tst.w	lr, #16
 8003600:	bf08      	it	eq
 8003602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800360a:	6010      	str	r0, [r2, #0]
 800360c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003614:	f380 8811 	msr	BASEPRI, r0
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	f3bf 8f6f 	isb	sy
 8003620:	f7ff fcb0 	bl	8002f84 <vTaskSwitchContext>
 8003624:	f04f 0000 	mov.w	r0, #0
 8003628:	f380 8811 	msr	BASEPRI, r0
 800362c:	bc09      	pop	{r0, r3}
 800362e:	6819      	ldr	r1, [r3, #0]
 8003630:	6808      	ldr	r0, [r1, #0]
 8003632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003636:	f01e 0f10 	tst.w	lr, #16
 800363a:	bf08      	it	eq
 800363c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003640:	f380 8809 	msr	PSP, r0
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	f3af 8000 	nop.w

08003650 <pxCurrentTCBConst>:
 8003650:	200002c4 	.word	0x200002c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003654:	bf00      	nop
 8003656:	bf00      	nop

08003658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
	__asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003670:	f7ff fbcc 	bl	8002e0c <xTaskIncrementTick>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800367a:	4b06      	ldr	r3, [pc, #24]	; (8003694 <xPortSysTickHandler+0x3c>)
 800367c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	2300      	movs	r3, #0
 8003684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	e000ed04 	.word	0xe000ed04

08003698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <vPortSetupTimerInterrupt+0x34>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80036a2:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <vPortSetupTimerInterrupt+0x38>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80036a8:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <vPortSetupTimerInterrupt+0x3c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <vPortSetupTimerInterrupt+0x40>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	099b      	lsrs	r3, r3, #6
 80036b4:	4a09      	ldr	r2, [pc, #36]	; (80036dc <vPortSetupTimerInterrupt+0x44>)
 80036b6:	3b01      	subs	r3, #1
 80036b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80036ba:	4b04      	ldr	r3, [pc, #16]	; (80036cc <vPortSetupTimerInterrupt+0x34>)
 80036bc:	2207      	movs	r2, #7
 80036be:	601a      	str	r2, [r3, #0]
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	e000e010 	.word	0xe000e010
 80036d0:	e000e018 	.word	0xe000e018
 80036d4:	20000000 	.word	0x20000000
 80036d8:	10624dd3 	.word	0x10624dd3
 80036dc:	e000e014 	.word	0xe000e014

080036e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80036e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80036f0 <vPortEnableVFP+0x10>
 80036e4:	6801      	ldr	r1, [r0, #0]
 80036e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80036ea:	6001      	str	r1, [r0, #0]
 80036ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80036ee:	bf00      	nop
 80036f0:	e000ed88 	.word	0xe000ed88

080036f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	; 0x28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003700:	f7ff fada 	bl	8002cb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003704:	4b57      	ldr	r3, [pc, #348]	; (8003864 <pvPortMalloc+0x170>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800370c:	f000 f90c 	bl	8003928 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003710:	4b55      	ldr	r3, [pc, #340]	; (8003868 <pvPortMalloc+0x174>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4013      	ands	r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	f040 808c 	bne.w	8003836 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01c      	beq.n	800375e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003724:	2208      	movs	r2, #8
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4413      	add	r3, r2
 800372a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	2b00      	cmp	r3, #0
 8003734:	d013      	beq.n	800375e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f023 0307 	bic.w	r3, r3, #7
 800373c:	3308      	adds	r3, #8
 800373e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <pvPortMalloc+0x6a>
	__asm volatile
 800374a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	e7fe      	b.n	800375c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d068      	beq.n	8003836 <pvPortMalloc+0x142>
 8003764:	4b41      	ldr	r3, [pc, #260]	; (800386c <pvPortMalloc+0x178>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	429a      	cmp	r2, r3
 800376c:	d863      	bhi.n	8003836 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800376e:	4b40      	ldr	r3, [pc, #256]	; (8003870 <pvPortMalloc+0x17c>)
 8003770:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003772:	4b3f      	ldr	r3, [pc, #252]	; (8003870 <pvPortMalloc+0x17c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003778:	e004      	b.n	8003784 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	429a      	cmp	r2, r3
 800378c:	d903      	bls.n	8003796 <pvPortMalloc+0xa2>
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f1      	bne.n	800377a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003796:	4b33      	ldr	r3, [pc, #204]	; (8003864 <pvPortMalloc+0x170>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379c:	429a      	cmp	r2, r3
 800379e:	d04a      	beq.n	8003836 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2208      	movs	r2, #8
 80037a6:	4413      	add	r3, r2
 80037a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	1ad2      	subs	r2, r2, r3
 80037ba:	2308      	movs	r3, #8
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	429a      	cmp	r2, r3
 80037c0:	d91e      	bls.n	8003800 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80037c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4413      	add	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d009      	beq.n	80037e8 <pvPortMalloc+0xf4>
 80037d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	e7fe      	b.n	80037e6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	1ad2      	subs	r2, r2, r3
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80037fa:	69b8      	ldr	r0, [r7, #24]
 80037fc:	f000 f8f6 	bl	80039ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003800:	4b1a      	ldr	r3, [pc, #104]	; (800386c <pvPortMalloc+0x178>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	4a18      	ldr	r2, [pc, #96]	; (800386c <pvPortMalloc+0x178>)
 800380c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800380e:	4b17      	ldr	r3, [pc, #92]	; (800386c <pvPortMalloc+0x178>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	4b18      	ldr	r3, [pc, #96]	; (8003874 <pvPortMalloc+0x180>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d203      	bcs.n	8003822 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800381a:	4b14      	ldr	r3, [pc, #80]	; (800386c <pvPortMalloc+0x178>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a15      	ldr	r2, [pc, #84]	; (8003874 <pvPortMalloc+0x180>)
 8003820:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	4b10      	ldr	r3, [pc, #64]	; (8003868 <pvPortMalloc+0x174>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	431a      	orrs	r2, r3
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003836:	f7ff fa4d 	bl	8002cd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	2b00      	cmp	r3, #0
 8003842:	d009      	beq.n	8003858 <pvPortMalloc+0x164>
 8003844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	e7fe      	b.n	8003856 <pvPortMalloc+0x162>
	return pvReturn;
 8003858:	69fb      	ldr	r3, [r7, #28]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3728      	adds	r7, #40	; 0x28
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20001000 	.word	0x20001000
 8003868:	2000100c 	.word	0x2000100c
 800386c:	20001004 	.word	0x20001004
 8003870:	20000ff8 	.word	0x20000ff8
 8003874:	20001008 	.word	0x20001008

08003878 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d046      	beq.n	8003918 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800388a:	2308      	movs	r3, #8
 800388c:	425b      	negs	r3, r3
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	4413      	add	r3, r2
 8003892:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	4b20      	ldr	r3, [pc, #128]	; (8003920 <vPortFree+0xa8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <vPortFree+0x42>
 80038a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	e7fe      	b.n	80038b8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d009      	beq.n	80038d6 <vPortFree+0x5e>
 80038c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	e7fe      	b.n	80038d4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	4b11      	ldr	r3, [pc, #68]	; (8003920 <vPortFree+0xa8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d019      	beq.n	8003918 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d115      	bne.n	8003918 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <vPortFree+0xa8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	43db      	mvns	r3, r3
 80038f6:	401a      	ands	r2, r3
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80038fc:	f7ff f9dc 	bl	8002cb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	4b07      	ldr	r3, [pc, #28]	; (8003924 <vPortFree+0xac>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4413      	add	r3, r2
 800390a:	4a06      	ldr	r2, [pc, #24]	; (8003924 <vPortFree+0xac>)
 800390c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800390e:	6938      	ldr	r0, [r7, #16]
 8003910:	f000 f86c 	bl	80039ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003914:	f7ff f9de 	bl	8002cd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003918:	bf00      	nop
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	2000100c 	.word	0x2000100c
 8003924:	20001004 	.word	0x20001004

08003928 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800392e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003932:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003934:	4b27      	ldr	r3, [pc, #156]	; (80039d4 <prvHeapInit+0xac>)
 8003936:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00c      	beq.n	800395c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	3307      	adds	r3, #7
 8003946:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0307 	bic.w	r3, r3, #7
 800394e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	4a1f      	ldr	r2, [pc, #124]	; (80039d4 <prvHeapInit+0xac>)
 8003958:	4413      	add	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003960:	4a1d      	ldr	r2, [pc, #116]	; (80039d8 <prvHeapInit+0xb0>)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003966:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <prvHeapInit+0xb0>)
 8003968:	2200      	movs	r2, #0
 800396a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	4413      	add	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003974:	2208      	movs	r2, #8
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 0307 	bic.w	r3, r3, #7
 8003982:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4a15      	ldr	r2, [pc, #84]	; (80039dc <prvHeapInit+0xb4>)
 8003988:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800398a:	4b14      	ldr	r3, [pc, #80]	; (80039dc <prvHeapInit+0xb4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2200      	movs	r2, #0
 8003990:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003992:	4b12      	ldr	r3, [pc, #72]	; (80039dc <prvHeapInit+0xb4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	1ad2      	subs	r2, r2, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80039a8:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <prvHeapInit+0xb4>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <prvHeapInit+0xb8>)
 80039b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4a09      	ldr	r2, [pc, #36]	; (80039e4 <prvHeapInit+0xbc>)
 80039be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80039c0:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <prvHeapInit+0xc0>)
 80039c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80039c6:	601a      	str	r2, [r3, #0]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	200003f8 	.word	0x200003f8
 80039d8:	20000ff8 	.word	0x20000ff8
 80039dc:	20001000 	.word	0x20001000
 80039e0:	20001008 	.word	0x20001008
 80039e4:	20001004 	.word	0x20001004
 80039e8:	2000100c 	.word	0x2000100c

080039ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80039f4:	4b28      	ldr	r3, [pc, #160]	; (8003a98 <prvInsertBlockIntoFreeList+0xac>)
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	e002      	b.n	8003a00 <prvInsertBlockIntoFreeList+0x14>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d8f7      	bhi.n	80039fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	4413      	add	r3, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d108      	bne.n	8003a2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	441a      	add	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	441a      	add	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d118      	bne.n	8003a74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4b15      	ldr	r3, [pc, #84]	; (8003a9c <prvInsertBlockIntoFreeList+0xb0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d00d      	beq.n	8003a6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	441a      	add	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	e008      	b.n	8003a7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003a6a:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <prvInsertBlockIntoFreeList+0xb0>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e003      	b.n	8003a7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d002      	beq.n	8003a8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a8a:	bf00      	nop
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20000ff8 	.word	0x20000ff8
 8003a9c:	20001000 	.word	0x20001000

08003aa0 <__libc_init_array>:
 8003aa0:	b570      	push	{r4, r5, r6, lr}
 8003aa2:	4e0d      	ldr	r6, [pc, #52]	; (8003ad8 <__libc_init_array+0x38>)
 8003aa4:	4c0d      	ldr	r4, [pc, #52]	; (8003adc <__libc_init_array+0x3c>)
 8003aa6:	1ba4      	subs	r4, r4, r6
 8003aa8:	10a4      	asrs	r4, r4, #2
 8003aaa:	2500      	movs	r5, #0
 8003aac:	42a5      	cmp	r5, r4
 8003aae:	d109      	bne.n	8003ac4 <__libc_init_array+0x24>
 8003ab0:	4e0b      	ldr	r6, [pc, #44]	; (8003ae0 <__libc_init_array+0x40>)
 8003ab2:	4c0c      	ldr	r4, [pc, #48]	; (8003ae4 <__libc_init_array+0x44>)
 8003ab4:	f000 f820 	bl	8003af8 <_init>
 8003ab8:	1ba4      	subs	r4, r4, r6
 8003aba:	10a4      	asrs	r4, r4, #2
 8003abc:	2500      	movs	r5, #0
 8003abe:	42a5      	cmp	r5, r4
 8003ac0:	d105      	bne.n	8003ace <__libc_init_array+0x2e>
 8003ac2:	bd70      	pop	{r4, r5, r6, pc}
 8003ac4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ac8:	4798      	blx	r3
 8003aca:	3501      	adds	r5, #1
 8003acc:	e7ee      	b.n	8003aac <__libc_init_array+0xc>
 8003ace:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ad2:	4798      	blx	r3
 8003ad4:	3501      	adds	r5, #1
 8003ad6:	e7f2      	b.n	8003abe <__libc_init_array+0x1e>
 8003ad8:	08003b70 	.word	0x08003b70
 8003adc:	08003b70 	.word	0x08003b70
 8003ae0:	08003b70 	.word	0x08003b70
 8003ae4:	08003b74 	.word	0x08003b74

08003ae8 <memset>:
 8003ae8:	4402      	add	r2, r0
 8003aea:	4603      	mov	r3, r0
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d100      	bne.n	8003af2 <memset+0xa>
 8003af0:	4770      	bx	lr
 8003af2:	f803 1b01 	strb.w	r1, [r3], #1
 8003af6:	e7f9      	b.n	8003aec <memset+0x4>

08003af8 <_init>:
 8003af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afa:	bf00      	nop
 8003afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afe:	bc08      	pop	{r3}
 8003b00:	469e      	mov	lr, r3
 8003b02:	4770      	bx	lr

08003b04 <_fini>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	bf00      	nop
 8003b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0a:	bc08      	pop	{r3}
 8003b0c:	469e      	mov	lr, r3
 8003b0e:	4770      	bx	lr
